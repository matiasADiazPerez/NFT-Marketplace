var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/modules/AppModule.html",[0,1.034,1,2.427]],["body/modules/AppModule.html",[0,1.674,1,4.939,2,1.59,3,1.59,4,1.802,5,1.802,6,1.59,7,1.802,8,1.802,9,3.288,10,3.288,11,4.099,12,0.022,13,4.099,14,3.783,15,3.512,16,4.099,17,4.099,18,4.099,19,2.394,20,1.802,21,1.802,22,0.245,23,0.217,24,0.217,25,3.856,26,3.498,27,0.49,28,0.58,29,3.856,30,3.856,31,3.856,32,3.856,33,3.856,34,3.856,35,3.288,36,2.913,37,3.856,38,3.856,39,0.245,40,0.109,41,0.015,42,0.015]],["title/controllers/AuthController.html",[43,1.465,44,2.427]],["body/controllers/AuthController.html",[12,0.022,22,0.276,23,0.244,24,0.244,27,0.457,28,0.652,39,0.276,40,0.122,41,0.017,42,0.017,43,1.788,44,3.776,45,1.788,46,3.698,47,2.711,48,5.529,49,0.567,50,2.024,51,4.177,52,3.698,53,3.626,54,1.498,55,3.698,56,0.697,57,4.337,58,1.127,59,1.127,60,0.527,61,0.894,62,2.024,63,2.323,64,3.805,65,2.711,66,3.511,67,3.698,68,3.456,69,3.698,70,4.337,71,1.788,72,2.711,73,4.337,74,1.005,75,2.962,76,4.337,77,1.684,78,1.414,79,4.337,80,1.684,81,1.704,82,1.336]],["title/guards/AuthGuard.html",[83,2.427,84,2.427]],["body/guards/AuthGuard.html",[12,0.022,22,0.205,23,0.182,24,0.182,27,0.405,28,0.485,39,0.334,40,0.091,41,0.014,42,0.014,49,0.422,50,1.66,51,2.438,56,0.843,58,1.363,59,1.363,60,0.728,61,1.081,62,1.66,68,2.018,71,1.331,74,1.215,75,3.885,77,1.253,78,1.71,80,1.253,82,1.397,83,3.098,84,3.098,85,3.228,86,2.438,87,2.658,88,4.535,89,2.299,90,5.687,91,1.115,92,3.228,93,4.849,94,6.382,95,3.228,96,4.535,97,4.359,98,3.228,99,0.935,100,3.581,101,4.535,102,5.687,103,3.228,104,3.228,105,2.835,106,1.248,107,5.243,108,3.228,109,2.438,110,2.204,111,2.752,112,1.756,113,2.438,114,4.471,115,2.752,116,4.471,117,3.228,118,2.018,119,3.228,120,3.228,121,3.228,122,2.204,123,3.228,124,3.228,125,1.053,126,3.228,127,3.228,128,3.228,129,3.228,130,3.228,131,4.297,132,3.228,133,0.935,134,4.535,135,3.228,136,3.228,137,3.228,138,3.228]],["title/modules/AuthModule.html",[0,1.034,11,2.221]],["body/modules/AuthModule.html",[0,1.729,2,1.699,3,1.699,4,1.926,5,1.926,6,1.699,7,2.776,8,1.926,11,4.174,12,0.022,19,2.5,20,1.926,21,1.926,22,0.262,23,0.232,24,0.232,26,3.654,27,0.491,28,0.62,35,4.561,36,4.042,39,0.262,40,0.116,41,0.016,42,0.016,44,4.057,45,2.205,66,3.852,67,3.513,69,3.513,84,3.654,89,1.807,109,3.113,110,2.814,139,3.513,140,3.513,141,4.12,142,4.12,143,4.12,144,6.287,145,5.349,146,4.12,147,4.12,148,4.12,149,4.12,150,4.12,151,4.12,152,4.12]],["title/injectables/AuthService.html",[66,2.05,106,0.977]],["body/injectables/AuthService.html",[12,0.022,22,0.238,23,0.21,24,0.21,27,0.463,28,0.562,39,0.238,40,0.105,41,0.015,42,0.015,49,0.489,50,1.836,51,4.768,52,4.276,53,3.38,56,0.806,58,1.303,59,1.303,60,0.61,61,1.033,62,1.368,65,2.336,66,2.893,71,1.54,74,1.463,75,4.31,77,1.45,78,1.219,80,1.45,81,1.151,82,1.151,87,1.746,89,2.482,91,1.29,93,5.159,106,1.38,110,2.552,112,1.38,133,0.77,153,1.866,154,3.186,155,3.186,156,2.849,157,3.736,158,3.736,159,5.015,160,5.015,161,2.072,162,5.015,163,2.336,164,1.866,165,2.001,166,2.336,167,3.186,168,2.823,169,3.186,170,1.638,171,2.336,172,3.736,173,3.736,174,3.736,175,3.736,176,3.736,177,3.736,178,3.736,179,3.736,180,1.866,181,3.736,182,2.552]],["title/classes/Bid.html",[40,0.1,183,1.379]],["body/classes/Bid.html",[12,0.022,22,0.201,23,0.177,24,0.177,27,0.225,39,0.284,40,0.146,41,0.013,42,0.013,49,0.413,54,1.542,56,1.019,58,0.82,59,0.82,60,0.771,61,1.067,63,1.69,91,1.09,97,2.156,100,3.049,122,3.846,125,1.689,133,0.92,161,2.321,183,2.688,184,1.029,185,2.384,186,2.156,187,3.016,188,3.238,189,2.391,190,3.428,191,3.806,192,2.791,193,1.958,194,3.737,195,1.375,196,2.421,197,2.271,198,2.421,199,4.416,200,2.988,201,2.087,202,1.837,203,4.464,204,1.958,205,2.688,206,3.156,207,3.806,208,3.806,209,3.806,210,2.087,211,3.156,212,3.806,213,3.373,214,3.156,215,3.373,216,2.988,217,3.806,218,3.156,219,1.973,220,3.156,221,1.475,222,2.087,223,1.69,224,1.301,225,2.691,226,1.475,227,1.973,228,2.691,229,1.475,230,1.576,231,1.475,232,1.821,233,1.475,234,1.821,235,1.475,236,1.475]],["title/controllers/BidsController.html",[43,1.465,237,2.427]],["body/controllers/BidsController.html",[12,0.022,22,0.192,23,0.17,24,0.17,27,0.36,28,0.455,39,0.192,40,0.085,41,0.013,42,0.013,43,1.246,45,1.246,47,1.889,49,0.395,50,1.584,54,2.019,56,0.939,58,1.435,59,1.435,60,0.671,61,1.138,62,2.139,63,1.619,64,3.653,71,1.246,72,1.889,74,1.003,75,2.956,77,1.68,78,1.906,80,1.68,81,1.701,82,1.334,99,1.253,125,1.906,183,2.361,189,2.318,194,3.508,210,2.023,215,3.27,237,2.956,238,2.576,239,4.927,240,2.162,241,3.186,242,4.328,243,2.497,244,3.771,245,2.576,246,5.06,247,3.022,248,2.318,249,3.022,250,5.185,251,2.956,252,3.022,253,4.328,254,3.022,255,4.328,256,1.743,257,3.27,258,3.022,259,5.522,260,3.69,261,2.576,262,3.69,263,3.022,264,4.312,265,3.69,266,2.283,267,2.283,268,2.917,269,2.576,270,3.022,271,2.576,272,3.022,273,2.576,274,3.022,275,3.022,276,3.022,277,2.283,278,3.022,279,2.576,280,3.022]],["title/modules/BidsModule.html",[0,1.034,13,2.221]],["body/modules/BidsModule.html",[0,1.779,2,1.803,3,1.803,4,2.044,5,2.044,6,1.803,7,2.856,8,2.044,12,0.022,13,4.436,14,3.914,15,3.634,19,2.598,20,2.044,21,2.044,22,0.278,23,0.246,24,0.246,26,3.796,27,0.473,28,0.658,39,0.278,40,0.123,41,0.017,42,0.017,45,2.292,237,4.173,268,3.914,269,3.729,281,3.729,282,3.729,283,4.373,284,4.373,285,4.373,286,3.729,287,4.373]],["title/injectables/BidsService.html",[106,0.977,268,2.05]],["body/injectables/BidsService.html",[12,0.022,22,0.143,23,0.126,24,0.126,27,0.405,28,0.338,39,0.143,40,0.063,41,0.01,42,0.01,49,0.294,50,1.27,56,0.828,58,1.34,59,1.34,60,0.627,61,1.062,62,1.887,71,0.926,74,1.316,77,1.646,78,1.681,80,1.347,81,1.069,82,1.306,87,1.05,89,1.859,91,0.776,100,1.534,106,0.954,112,1.499,118,2.169,122,2.37,125,1.914,133,0.983,153,1.122,156,2.491,161,1.552,163,1.404,164,1.733,165,1.203,166,1.404,170,0.985,171,1.404,180,1.122,182,2.37,183,2.594,189,2.554,190,3.549,192,2.169,194,2.974,202,1.791,204,1.521,205,0.872,210,1.982,213,2.621,227,2.169,231,1.05,239,3.895,240,1.733,241,2.001,243,2.001,244,2.37,245,2.958,251,1.534,256,2.001,265,2.958,267,1.697,268,2.001,288,1.915,289,1.697,290,2.247,291,2.246,292,2.246,293,3.469,294,3.469,295,3.469,296,3.469,297,3.469,298,5.003,299,3.043,300,2.246,301,2.246,302,4.239,303,4.239,304,1.295,305,1.697,306,2.246,307,3.469,308,2.246,309,2.621,310,1.43,311,3.469,312,3.469,313,4.769,314,2.958,315,3.469,316,3.615,317,1.697,318,1.203,319,1.534,320,1.203,321,1.915,322,1.122,323,2.246,324,2.246,325,1.697,326,4.239,327,1.697,328,2.246,329,1.915,330,1.203,331,1.697,332,2.246,333,2.246,334,1.295,335,1.295,336,2.246,337,1.915,338,1.915,339,2.246,340,1.295,341,2.246,342,4.239,343,2.958,344,3.469,345,3.469,346,2.246,347,2.246,348,3.615,349,2.246,350,3.469,351,2.246,352,2.246,353,2.246,354,2.246,355,2.246,356,2.246,357,2.246,358,2.246,359,2.246,360,3.469,361,2.246,362,2.246,363,2.246]],["title/injectables/Client.html",[106,0.977,290,1.465]],["body/injectables/Client.html",[12,0.022,22,0.086,23,0.076,24,0.076,27,0.306,28,0.203,39,0.086,40,0.038,41,0.007,42,0.007,49,0.177,50,0.84,56,0.861,58,1.393,59,1.393,60,0.707,61,1.105,62,1.962,74,0.817,77,0.524,78,1.793,80,0.524,81,0.707,82,0.416,87,2.569,89,2.942,99,1.471,105,3.578,106,0.631,112,1.769,133,0.278,153,0.674,163,2.47,180,2.745,183,0.524,188,0.844,229,2.676,230,2.409,248,1.889,290,1.233,299,1.229,304,2.035,305,1.02,320,1.889,335,1.324,364,0.922,365,2.26,366,2.294,367,2.294,368,2.26,369,1.956,370,1.956,371,2.294,372,2.294,373,3.462,374,2.986,375,1.35,376,4.153,377,2.935,378,3.246,379,4.363,380,1.35,381,3.644,382,3.933,383,1.733,384,3.246,385,3.639,386,2.26,387,3.933,388,1.733,389,2.865,390,1.35,391,2.665,392,3.246,393,1.733,394,1.35,395,1.35,396,1.35,397,1.35,398,1.567,399,1.733,400,4.524,401,2.289,402,1.35,403,2.409,404,1.567,405,2.583,406,3.246,407,2.28,408,1.733,409,1.35,410,1.567,411,1.35,412,2.665,413,1.35,414,1.733,415,1.567,416,1.567,417,2.665,418,1.733,419,1.35,420,2.665,421,1.434,422,1.733,423,1.567,424,2.28,425,1.733,426,1.35,427,1.567,428,1.733,429,1.35,430,2.205,431,1.434,432,1.733,433,1.35,434,1.733,435,1.229,436,1.02,437,1.567,438,0.922,439,2.26,440,1.02,441,1.733,442,0.922,443,2.26,444,0.723,445,1.02,446,1.733,447,0.779,448,0.723,449,1.02,450,0.844,451,1.146,452,0.844,453,1.02,454,1.02,455,1.02,456,0.922,457,1.02,458,1.733,459,1.02,460,1.02,461,2.409,462,3.462,463,2.986,464,1.02,465,1.733,466,1.02,467,2.665,468,1.733,469,1.02,470,1.733,471,1.02,472,1.733,473,1.733,474,1.733,475,2.409,476,1.733,477,1.02,478,3.254,479,2.665,480,1.733,481,1.733,482,2.043,483,1.02,484,1.733,485,1.733,486,1.02,487,1.02,488,1.02,489,1.02,490,1.02,491,1.02,492,1.02,493,1.02,494,1.02,495,1.733,496,1.02,497,2.26,498,1.733,499,1.02,500,1.02,501,1.02,502,1.02,503,1.733,504,1.733,505,1.02,506,1.02,507,1.02,508,0.922]],["title/modules/ClientsModule.html",[0,1.034,14,2.05]],["body/modules/ClientsModule.html",[0,1.839,2,1.938,3,1.938,4,2.198,5,2.198,6,1.938,7,2.952,8,2.952,12,0.022,14,4.04,19,2.719,20,2.198,21,2.198,22,0.299,23,0.264,24,0.264,27,0.414,28,0.707,39,0.299,40,0.133,41,0.018,42,0.018,290,2.989,450,3.636,509,4.009,510,4.009,511,4.009,512,4.702,513,4.702]],["title/classes/CloseDto.html",[40,0.1,514,1.903]],["body/classes/CloseDto.html",[12,0.022,22,0.251,23,0.222,24,0.222,27,0.281,39,0.409,40,0.181,41,0.016,42,0.016,49,0.516,54,1.362,56,0.634,60,0.479,99,0.813,133,1.071,161,2.128,184,1.286,193,1.729,195,1.602,196,1.843,197,1.729,198,1.843,200,3.355,201,1.843,202,1.918,204,1.729,205,2.494,216,3.566,221,1.843,222,2.43,223,3.115,224,1.626,226,2.718,231,1.843,232,2.275,233,1.843,234,2.275,235,1.843,236,1.843,310,1.626,318,3.115,330,2.112,340,2.275,401,1.97,514,2.784,515,2.275,516,3.943,517,2.693,518,2.465,519,2.465,520,2.112,521,2.905,522,2.999,523,2.693,524,1.97,525,2.693,526,2.693,527,2.693,528,2.693,529,2.693,530,2.693,531,2.693]],["title/classes/CreateBidDto.html",[40,0.1,194,2.05]],["body/classes/CreateBidDto.html",[12,0.022,22,0.233,23,0.206,24,0.206,27,0.261,39,0.315,40,0.158,41,0.015,42,0.015,49,0.48,54,1.71,56,0.796,60,0.602,63,2.652,97,3.382,100,2.504,122,4.283,125,1.615,133,1.02,161,2.052,183,2.695,184,1.196,185,2.77,186,2.504,187,2.652,188,3.505,189,1.964,190,3.235,191,3.126,192,2.292,193,1.608,194,3.464,195,1.526,196,1.714,197,1.608,198,1.714,199,4.78,200,3.235,201,1.714,202,1.817,204,1.608,205,2.608,207,3.126,208,3.126,209,3.126,210,1.714,212,3.126,213,2.77,215,2.77,216,3.235,219,2.292,221,1.714,222,2.314,223,1.964,224,1.511,225,4.222,226,1.714,227,2.292,228,3.126,229,1.714,230,1.831,231,1.714,232,2.115,233,1.714,234,2.115,235,1.714,236,1.714,532,3.666,533,3.666]],["title/classes/CreateSellOfferDto.html",[40,0.1,521,1.775]],["body/classes/CreateSellOfferDto.html",[12,0.022,22,0.237,23,0.209,24,0.209,27,0.265,39,0.401,40,0.178,41,0.015,42,0.015,49,0.487,54,1.951,56,0.908,60,0.686,61,1.244,99,0.766,133,1.03,161,2.067,184,1.213,193,1.631,195,1.54,196,1.738,197,1.631,198,1.738,200,2.145,201,1.738,202,1.929,204,1.631,205,2.446,216,3.484,219,2.324,221,1.738,222,2.337,223,3.025,224,1.533,226,2.337,231,1.738,232,2.145,233,1.738,234,2.145,235,1.738,236,1.738,310,1.533,318,3.025,330,1.992,340,2.145,401,2.821,514,1.992,515,2.145,517,2.54,518,2.324,519,2.324,520,1.992,521,3.016,522,3.484,523,3.857,524,1.857,525,2.54,526,2.54,527,2.54,528,2.54,529,2.54,530,2.54,531,2.54,534,4.262,535,3.718,536,3.718,537,3.718]],["title/classes/CreateTokenDto.html",[40,0.1,538,2.427]],["body/classes/CreateTokenDto.html",[12,0.022,22,0.321,23,0.284,24,0.284,27,0.36,39,0.321,40,0.172,41,0.018,42,0.018,49,0.661,54,1.745,56,0.812,60,0.614,61,1.252,99,1.252,184,1.647,195,1.872,223,3.255,224,2.082,229,3.046,538,4.15,539,4.306,540,5.051,541,5.051,542,4.15]],["title/classes/CreateUserDto.html",[40,0.1,543,1.903]],["body/classes/CreateUserDto.html",[12,0.022,22,0.256,23,0.226,24,0.226,27,0.418,39,0.374,40,0.176,41,0.016,42,0.016,49,0.527,53,2.156,54,1.82,56,0.847,60,0.64,74,0.933,99,1.413,112,1.449,133,1.21,161,1.473,184,1.313,195,1.623,196,1.881,197,1.765,198,1.881,201,1.881,202,1.107,204,1.765,205,2.511,221,1.881,222,2.462,224,1.659,226,1.881,233,1.881,235,1.881,236,1.881,407,3.039,424,2.322,444,2.822,447,2.322,448,2.156,542,4.532,543,3.146,544,2.749,545,4.437,546,4.417,547,4.025,548,4.025,549,2.749,550,3.041,551,3.041,552,3.041,553,3.041,554,3.041,555,3.041]],["title/injectables/Db.html",[106,0.977,156,1.558]],["body/injectables/Db.html",[12,0.022,22,0.183,23,0.162,24,0.162,27,0.426,28,0.432,39,0.183,40,0.081,41,0.013,42,0.013,49,0.376,50,1.527,56,1.077,58,1.603,59,1.489,60,0.805,61,1.181,62,2.394,65,1.795,74,1.25,78,1.361,87,2.793,91,1.697,99,1.013,106,1.148,125,1.949,153,1.435,156,2.704,171,1.795,183,2.094,187,2.235,195,1.286,202,1.861,231,1.95,239,3.713,267,2.17,310,2.224,319,1.962,377,3.684,556,2.449,557,4.19,558,4.19,559,4.172,560,4.172,561,4.172,562,4.172,563,4.172,564,4.914,565,4.914,566,4.914,567,4.172,568,4.172,569,6.167,570,4.914,571,2.872,572,4.172,573,4.172,574,4.172,575,3.557,576,4.172,577,4.172,578,4.172,579,2.872,580,2.872,581,2.872,582,2.872,583,2.872,584,2.872,585,2.872,586,2.872,587,2.872,588,2.872,589,2.872,590,2.872,591,1.962,592,2.872,593,2.872,594,1.435,595,1.435,596,1.435,597,2.872,598,2.872,599,3.557,600,2.872,601,2.872,602,2.872,603,4.172,604,2.449,605,2.872]],["title/modules/DbModule.html",[0,1.034,15,1.903]],["body/modules/DbModule.html",[0,1.839,2,1.938,3,1.938,4,2.198,5,2.198,6,1.938,7,2.952,8,2.952,12,0.022,15,3.751,19,2.719,20,2.198,21,2.198,22,0.299,23,0.264,24,0.264,27,0.414,28,0.707,39,0.299,40,0.133,41,0.018,42,0.018,156,3.179,450,3.636,606,4.009,607,4.009,608,4.009,609,4.702,610,4.702]],["title/classes/DeletedEntity.html",[40,0.1,594,1.775]],["body/classes/DeletedEntity.html",[12,0.022,22,0.244,23,0.216,24,0.216,27,0.273,28,0.577,39,0.405,40,0.173,41,0.015,42,0.015,56,0.617,58,0.997,59,0.997,60,0.466,61,0.791,81,2.017,82,1.884,91,1.763,99,1.312,112,1.056,125,1.995,133,1.182,164,3.055,165,2.055,170,1.683,184,1.251,187,3.276,193,2.792,202,1.056,210,1.793,322,1.917,334,2.214,435,2.055,594,3.055,595,2.55,596,2.866,611,2.214,612,3.98,613,4.177,614,3.837,615,2.621,616,2.621,617,2.621,618,2.621,619,2.621,620,2.621,621,3.823,622,3.586,623,2.399,624,2.399]],["title/classes/EntityNotFound.html",[40,0.1,595,1.775]],["body/classes/EntityNotFound.html",[12,0.022,22,0.242,23,0.214,24,0.214,27,0.271,28,0.572,39,0.404,40,0.172,41,0.015,42,0.015,56,0.611,58,0.988,59,0.988,60,0.462,61,0.783,81,2.012,82,1.877,91,1.752,99,1.308,112,1.045,125,2.13,133,1.176,164,3.043,165,2.035,170,1.666,184,1.239,187,3.263,193,2.783,202,1.571,210,1.776,322,1.898,334,2.192,435,2.035,594,2.852,595,2.852,596,2.852,611,2.192,612,3.967,613,4.161,615,2.595,616,2.595,617,2.595,618,2.595,619,2.595,620,2.595,621,3.808,622,3.569,623,2.375,624,2.375,625,3.8]],["title/interfaces/EntityType.html",[451,1.775,591,2.427]],["body/interfaces/EntityType.html",[12,0.021,22,0.334,23,0.295,24,0.295,39,0.334,41,0.019,42,0.019,49,0.688,60,0.639,61,1.282,195,1.917,197,3.005,205,2.573,451,2.625,591,4.249,626,3.589,627,4.48]],["title/interfaces/FinishAuctionInput.html",[389,2.221,451,1.775]],["body/interfaces/FinishAuctionInput.html",[12,0.023,22,0.12,23,0.106,24,0.106,27,0.361,28,0.285,39,0.12,40,0.053,41,0.009,42,0.009,49,0.248,60,0.616,74,0.703,77,0.735,78,1.986,80,0.735,81,0.934,82,0.583,87,2.028,89,2.67,99,1.418,105,3.457,106,0.834,112,1.871,133,0.39,180,3.041,183,1.684,188,1.183,195,0.934,229,2.487,230,2.167,248,1.624,290,1.25,299,1.014,304,1.749,320,1.624,335,1.092,364,1.293,365,1.43,368,1.43,373,2.866,374,2.291,376,4.021,377,2.071,378,2.291,379,4.083,381,3.278,382,3.587,383,1.43,384,2.866,385,3.566,386,1.43,387,3.587,388,1.43,389,2.712,391,2.291,392,2.866,393,1.43,398,1.293,399,1.43,400,4.31,401,2.658,403,2.071,404,1.293,405,2.324,406,3.278,407,1.749,408,1.43,410,1.293,412,2.291,414,1.43,415,1.293,416,1.293,417,2.866,418,1.43,420,2.291,421,1.183,422,1.43,423,1.293,424,2.189,425,1.43,427,1.293,428,1.43,430,1.895,431,1.183,432,1.43,434,1.43,435,1.014,436,1.43,437,2.071,438,1.293,439,2.866,440,1.43,441,2.291,442,1.293,443,2.866,444,1.014,445,1.43,446,2.291,447,1.092,448,1.014,449,1.43,450,1.183,451,1.515,452,1.183,453,1.43,454,1.43,455,1.43,456,1.293,457,1.43,458,2.291,459,1.43,460,1.43,461,2.964,462,4.021,463,3.587,464,1.43,465,2.291,466,1.43,467,3.278,468,2.291,469,1.43,470,2.291,471,1.43,472,2.291,473,2.291,474,2.291,475,2.964,476,2.291,477,1.43,478,3.658,479,3.278,480,2.291,481,2.291,482,2.591,483,1.43,484,2.291,485,2.291,486,1.43,487,1.43,488,1.43,489,1.43,490,1.43,491,1.43,492,1.43,493,1.43,494,1.43,495,2.291,496,1.43,497,2.866,498,2.291,499,1.43,500,1.43,501,1.43,502,1.43,503,2.291,504,2.291,505,1.43,506,1.43,507,1.43,508,1.293,626,1.293]],["title/classes/InvalidId.html",[40,0.1,596,1.775]],["body/classes/InvalidId.html",[12,0.022,22,0.249,23,0.22,24,0.22,27,0.279,28,0.589,39,0.408,40,0.174,41,0.016,42,0.016,56,0.629,81,2.029,82,1.899,91,2.001,99,1.194,112,1.077,125,2.01,133,1.194,164,3.079,165,2.096,170,1.716,184,1.276,187,3.103,193,2.811,202,1.077,210,1.829,322,1.955,334,2.258,435,2.096,594,2.894,595,2.584,596,3.079,611,2.258,612,4.006,613,3.957,615,2.673,616,2.673,617,2.673,618,2.673,619,2.673,620,2.673,621,3.853,622,3.622,623,2.447,624,2.447,628,3.914]],["title/controllers/NftsController.html",[43,1.465,629,2.427]],["body/controllers/NftsController.html",[12,0.022,22,0.22,23,0.194,24,0.194,27,0.387,28,0.52,39,0.22,40,0.098,41,0.014,42,0.014,43,1.425,45,1.425,47,2.16,49,0.452,50,1.741,54,1.878,56,0.941,58,1.413,59,1.413,60,0.661,61,1.121,62,2.248,63,3.138,64,3.84,71,1.425,72,2.16,74,1.102,78,1.774,97,3.248,118,2.973,125,1.127,131,4.108,229,2.542,230,1.726,240,3.171,246,4.914,304,2.744,385,3.84,405,2.913,421,2.16,423,4.001,427,3.248,430,3.399,431,2.16,538,4.442,629,3.248,630,2.946,631,4.055,632,4.055,633,2.946,634,3.456,635,5.858,636,4.756,637,4.756,638,3.248,639,4.756,640,3.456,641,3.456,642,3.456,643,4.756,644,3.456,645,3.137,646,2.946,647,3.456,648,3.456,649,2.946,650,3.456,651,3.456,652,3.456,653,3.456,654,3.456,655,3.456,656,3.456,657,3.456,658,3.456]],["title/modules/NftsModule.html",[0,1.034,16,2.221]],["body/modules/NftsModule.html",[0,1.849,2,1.962,3,1.962,4,2.224,5,2.224,6,1.962,7,2.968,8,2.224,12,0.022,16,4.331,19,2.739,20,2.224,21,2.224,22,0.303,23,0.268,24,0.268,27,0.452,28,0.716,39,0.303,40,0.134,41,0.018,42,0.018,45,2.416,629,4.337,645,3.997,646,4.058,659,4.058,660,4.058,661,4.759,662,4.759]],["title/injectables/NftsService.html",[106,0.977,645,2.05]],["body/injectables/NftsService.html",[12,0.022,22,0.193,23,0.17,24,0.17,27,0.394,28,0.455,39,0.193,40,0.085,41,0.013,42,0.013,49,0.396,50,1.586,56,0.888,58,1.436,59,1.436,60,0.672,61,1.139,62,2.293,71,1.248,74,1.355,77,1.965,78,1.651,80,1.965,81,1.56,87,1.415,89,2.861,91,1.046,99,1.043,106,1.192,112,1.674,118,2.709,131,3.275,153,1.512,156,2.748,161,1.853,163,3.165,166,1.893,170,1.328,171,1.893,180,2.529,182,3.458,202,1.795,229,2.844,230,2.165,240,2.761,248,2.321,289,2.287,290,2.509,304,3.188,305,2.287,317,2.287,331,3.825,405,2.96,421,3.455,430,3.455,431,3.455,478,3.455,631,3.695,632,3.695,638,2.96,645,2.5,663,2.581,664,3.028,665,3.695,666,3.028,667,4.334,668,3.028,669,4.334,670,3.028,671,4.334,672,3.028,673,3.028,674,2.581,675,3.695,676,3.028,677,3.028]],["title/classes/NotOwner.html",[40,0.1,322,1.775]],["body/classes/NotOwner.html",[12,0.022,22,0.244,23,0.216,24,0.216,27,0.273,28,0.577,39,0.405,40,0.173,41,0.015,42,0.015,56,0.617,58,0.997,59,0.997,60,0.466,61,0.791,81,2.017,82,1.884,91,1.763,99,1.312,112,1.056,125,1.995,133,1.182,164,3.181,165,2.055,170,1.683,184,1.251,187,3.276,193,2.792,202,1.056,210,1.793,322,2.55,334,2.214,435,2.055,594,2.866,595,2.55,596,2.866,611,2.214,612,3.823,613,4.177,615,2.621,616,2.621,617,2.621,618,2.621,619,2.621,620,2.621,621,3.823,622,3.586,623,2.399,624,2.399,678,3.837]],["title/classes/SellOffer.html",[40,0.1,310,1.465]],["body/classes/SellOffer.html",[12,0.022,22,0.198,23,0.175,24,0.175,27,0.222,39,0.376,40,0.167,41,0.013,42,0.013,49,0.407,54,1.775,56,1.093,58,0.809,59,0.809,60,0.827,61,1.302,91,1.075,99,0.911,133,0.911,161,2.312,184,1.015,193,1.938,195,1.362,196,2.403,197,2.254,198,2.403,200,1.795,201,2.066,202,1.933,204,1.938,205,2.506,216,3.228,217,4.382,219,1.945,221,1.455,222,2.066,223,2.753,224,1.283,226,2.066,231,1.455,232,1.795,233,1.455,234,1.795,235,1.455,236,1.455,310,1.822,318,3.289,330,1.667,340,1.795,401,2.567,514,1.667,515,1.795,517,2.126,518,1.945,519,1.945,520,1.667,521,3.28,522,3.228,523,3.511,524,1.554,525,3.511,526,3.511,527,3.511,528,2.126,529,2.126,530,2.126,531,2.126,534,3.768,679,4.42,680,3.112,681,3.112,682,3.112,683,3.112,684,3.112,685,3.112,686,3.112,687,3.112,688,3.112,689,3.112]],["title/controllers/SellOffersController.html",[43,1.465,690,2.427]],["body/controllers/SellOffersController.html",[12,0.022,22,0.146,23,0.129,24,0.129,27,0.306,28,0.344,39,0.146,40,0.065,41,0.011,42,0.011,43,0.943,45,0.943,47,1.43,49,0.299,50,1.288,54,1.975,56,0.919,58,1.427,59,1.427,60,0.667,61,1.131,62,2.093,63,2.785,64,3.785,71,0.943,72,1.43,74,0.816,77,1.665,78,1.865,80,1.665,81,1.692,82,1.322,99,1.248,112,0.968,125,1.925,183,1.367,189,2.941,190,3.406,192,3.011,210,1.645,227,3.011,229,1.645,240,1.758,241,2.779,243,2.031,244,2.404,246,4.985,248,1.885,250,4.107,251,3.75,256,1.32,257,2.659,260,3.001,261,1.951,262,3.001,264,3.658,266,1.729,273,1.951,277,1.729,279,1.951,298,3.001,299,1.885,309,2.659,310,2.264,314,3.001,319,1.563,405,1.885,514,3.463,520,2.941,521,2.949,522,2.779,524,2.857,557,5.364,575,3.001,633,1.951,638,2.404,649,1.951,690,2.404,691,1.951,692,4.107,693,3.001,694,2.288,695,3.52,696,2.288,697,3.001,698,2.288,699,3.52,700,2.288,701,3.52,702,3.52,703,3.52,704,2.288,705,2.288,706,3.52,707,2.288,708,2.288,709,2.288,710,4.107,711,3.52,712,2.288,713,4.29,714,3.52,715,2.475,716,1.951,717,2.288,718,2.288,719,2.288,720,2.288,721,2.288,722,2.288,723,2.288,724,2.288,725,3.52,726,2.288,727,3.52,728,2.288,729,2.288]],["title/modules/SellOffersModule.html",[0,1.034,17,2.221]],["body/modules/SellOffersModule.html",[0,1.81,2,1.871,3,1.871,4,2.121,5,2.121,6,1.871,7,2.905,8,2.121,12,0.022,15,3.668,17,4.393,19,2.659,20,2.121,21,2.121,22,0.289,23,0.255,24,0.255,26,3.886,27,0.464,28,0.683,39,0.289,40,0.128,41,0.017,42,0.017,45,2.346,286,3.869,690,4.245,715,3.951,716,3.869,730,3.869,731,3.869,732,4.538,733,4.538,734,4.538]],["title/injectables/SellOffersService.html",[106,0.977,715,2.05]],["body/injectables/SellOffersService.html",[12,0.023,22,0.124,23,0.11,24,0.11,27,0.366,28,0.293,39,0.124,40,0.055,41,0.009,42,0.009,49,0.255,50,1.136,56,0.926,58,1.453,59,1.453,60,0.679,61,1.152,62,2.046,71,0.804,74,0.452,77,1.993,78,1.926,80,1.993,81,1.582,82,1.659,87,0.911,89,2.251,91,0.673,99,0.402,105,1.941,106,0.854,112,1.624,125,1.756,133,1.187,153,0.974,156,2.361,161,2.28,163,1.218,164,1.933,165,1.044,166,1.218,170,0.855,171,1.218,180,1.551,182,3.506,189,2.363,190,3.755,192,2.758,202,1.927,205,0.757,240,1.933,241,2.546,243,1.791,244,2.12,248,1.663,251,3.014,256,1.791,289,1.473,290,2.116,299,1.663,309,2.345,310,2.305,317,1.473,318,1.044,319,1.331,320,1.044,321,1.662,322,0.974,325,2.345,327,1.473,329,2.647,330,1.044,331,2.345,335,1.124,337,1.662,338,1.662,340,1.124,478,1.941,520,2.581,521,2.69,522,2.546,524,2.564,638,2.12,665,1.662,674,1.662,692,2.647,693,2.647,697,2.647,710,3.299,715,1.791,735,1.662,736,3.104,737,1.949,738,3.104,739,5.133,740,1.949,741,3.104,742,1.949,743,2.647,744,1.949,745,4.412,746,3.104,747,1.949,748,3.104,749,1.949,750,1.949,751,3.104,752,1.949,753,3.104,754,1.949,755,3.104,756,2.647,757,3.104,758,1.949,759,1.949,760,1.949,761,1.949,762,1.949,763,1.949,764,1.949,765,3.104,766,3.104,767,3.869,768,3.869,769,4.412,770,1.949,771,1.949,772,1.949,773,1.949,774,3.104,775,1.949,776,3.104,777,1.949,778,1.949]],["title/classes/UpdatePrice.html",[40,0.1,524,1.775]],["body/classes/UpdatePrice.html",[12,0.022,22,0.251,23,0.222,24,0.222,27,0.281,39,0.409,40,0.181,41,0.016,42,0.016,49,0.516,54,1.362,56,0.634,60,0.479,99,0.813,133,1.071,161,2.128,184,1.286,193,1.729,195,1.602,196,1.843,197,1.729,198,1.843,200,2.275,201,1.843,202,1.918,204,1.729,205,2.494,216,3.707,221,1.843,222,2.43,223,3.115,224,1.626,226,2.43,231,1.843,232,2.275,233,1.843,234,2.275,235,1.843,236,1.843,310,1.626,318,3.115,330,2.112,340,2.275,401,1.97,514,2.112,515,2.275,517,2.693,518,2.465,519,2.465,520,2.112,521,2.905,522,3.566,523,2.693,524,2.597,525,2.693,526,2.693,527,2.693,528,2.693,529,2.693,530,2.693,531,2.693,779,3.943]],["title/classes/User.html",[40,0.1,74,0.823]],["body/classes/User.html",[12,0.022,22,0.234,23,0.207,24,0.207,27,0.4,39,0.358,40,0.17,41,0.015,42,0.015,49,0.482,53,1.973,56,1.063,58,0.957,59,0.957,60,0.804,61,1.158,74,1.151,91,1.272,99,1.404,112,1.366,133,1.158,161,1.348,184,1.201,195,1.53,196,2.627,197,2.465,198,2.627,201,2.322,202,1.013,204,2.178,205,2.611,221,1.722,222,2.322,224,1.519,226,1.722,233,1.722,235,1.722,236,1.722,407,2.866,424,3.242,444,2.661,447,2.125,448,1.973,542,4.109,543,3.222,544,2.516,545,2.783,546,4.29,549,3.839,550,2.783,551,2.783,552,2.783,553,2.783,554,2.783,555,2.783,780,4.967,781,3.683,782,3.683,783,3.683,784,3.683,785,3.683]],["title/classes/UserAuth.html",[40,0.1,53,1.903]],["body/classes/UserAuth.html",[12,0.022,22,0.256,23,0.226,24,0.226,27,0.418,39,0.374,40,0.176,41,0.016,42,0.016,49,0.527,53,2.822,54,1.82,56,0.847,60,0.64,74,0.933,99,1.393,112,1.449,133,1.21,161,2.15,184,1.313,195,1.623,196,1.881,197,1.765,198,1.881,201,1.881,202,1.449,204,1.765,205,2.511,219,2.516,221,1.881,222,2.462,224,1.659,226,1.881,233,1.881,235,1.881,236,1.881,407,3.039,424,2.322,444,2.822,447,2.322,448,2.156,542,4.417,543,2.822,544,2.749,545,3.041,546,4.417,549,2.749,550,3.041,551,3.041,552,3.041,553,3.041,554,3.041,555,3.041,786,4.025,787,4.025]],["title/controllers/UserController.html",[43,1.465,788,2.427]],["body/controllers/UserController.html",[12,0.022,22,0.259,23,0.229,24,0.229,27,0.446,28,0.612,39,0.259,40,0.115,41,0.016,42,0.016,43,1.676,45,1.676,47,2.542,49,0.532,50,1.941,54,2.039,55,3.467,56,0.949,58,1.379,59,1.379,60,0.645,61,1.093,62,2.161,63,2.178,64,3.316,65,2.542,68,3.316,71,1.676,72,2.542,74,0.942,78,1.925,99,1.216,125,1.73,240,2.649,241,3.609,243,3.06,256,2.346,257,4.007,266,3.072,271,3.467,277,3.072,543,3.564,788,3.623,789,3.467,790,3.467,791,4.066,792,4.066,793,4.066,794,3.405,795,3.467,796,4.066,797,4.066,798,4.066,799,4.066,800,4.066]],["title/modules/UserModule.html",[0,1.034,18,2.221]],["body/modules/UserModule.html",[0,1.849,2,1.962,3,1.962,4,2.224,5,2.224,6,1.962,7,2.968,8,2.224,12,0.022,18,4.331,19,2.739,20,2.224,21,2.224,22,0.303,23,0.268,24,0.268,27,0.452,28,0.716,39,0.303,40,0.134,41,0.018,42,0.018,45,2.416,788,4.337,794,3.997,795,4.058,801,4.058,802,4.058,803,4.759,804,4.759]],["title/injectables/UserService.html",[106,0.977,794,2.05]],["body/injectables/UserService.html",[12,0.022,22,0.23,23,0.203,24,0.203,27,0.425,28,0.544,39,0.23,40,0.102,41,0.015,42,0.015,49,0.473,50,1.795,56,0.959,58,1.447,59,1.447,60,0.677,61,1.147,62,2.038,65,2.26,71,1.491,74,1.137,77,1.404,78,2.035,80,1.404,81,1.511,82,1.114,91,1.249,106,1.349,112,1.531,125,1.179,133,0.745,153,1.806,155,3.082,156,2.822,166,2.26,167,3.082,168,2.731,169,3.082,202,1.717,240,2.45,241,3.444,243,2.83,256,2.83,343,3.082,543,3.343,546,2.469,549,2.469,558,3.082,675,3.082,790,4.182,794,2.83,805,3.082,806,3.615,807,3.615,808,3.615,809,3.615,810,3.615,811,3.615,812,3.615,813,3.615,814,3.615,815,3.615,816,3.615,817,3.615,818,3.615,819,3.615,820,3.615,821,3.615,822,3.082,823,3.615,824,3.615,825,3.615,826,4.905,827,3.615]],["title/interfaces/Window.html",[451,1.775,452,2.221]],["body/interfaces/Window.html",[12,0.023,22,0.121,23,0.107,24,0.107,27,0.362,28,0.286,39,0.121,40,0.054,41,0.009,42,0.009,49,0.249,60,0.579,61,0.628,74,0.706,77,0.739,78,1.989,80,0.739,81,0.939,82,0.587,87,2.035,89,2.674,99,1.396,105,3.465,106,0.838,112,1.872,133,0.392,180,3.046,183,0.739,188,1.19,195,0.939,229,2.493,230,2.175,248,1.632,290,1.256,299,1.02,304,1.758,320,1.632,335,1.098,364,1.3,365,1.438,368,1.438,373,2.878,374,2.302,376,4.031,377,2.081,378,2.302,379,4.09,381,3.29,382,3.598,383,1.438,384,2.878,385,3.573,386,1.438,387,3.598,388,1.438,389,2.381,391,2.302,392,2.878,393,1.438,398,1.3,399,1.438,400,4.319,401,2.175,403,2.081,404,1.3,405,2.332,406,3.29,407,1.758,408,1.438,410,1.3,412,2.302,414,1.438,415,1.3,416,1.3,417,2.878,418,1.438,420,2.302,421,1.19,422,1.438,423,1.3,424,2.198,425,1.438,427,1.3,428,1.438,430,1.905,431,1.19,432,1.438,434,1.438,435,1.02,436,1.438,437,2.081,438,1.3,439,2.878,440,1.438,441,3.29,442,1.3,443,2.878,444,1.02,445,1.438,446,2.302,447,1.098,448,1.02,449,1.438,450,1.19,451,1.522,452,1.905,453,3.29,454,1.438,455,1.438,456,1.3,457,1.438,458,2.302,459,1.438,460,1.438,461,2.974,462,4.031,463,3.598,464,1.438,465,2.302,466,1.438,467,3.29,468,2.302,469,1.438,470,2.302,471,1.438,472,2.302,473,2.302,474,2.302,475,2.974,476,2.302,477,1.438,478,3.665,479,3.29,480,2.302,481,2.302,482,2.602,483,1.438,484,2.302,485,2.302,486,1.438,487,1.438,488,1.438,489,1.438,490,1.438,491,1.438,492,1.438,493,1.438,494,1.438,495,2.302,496,1.438,497,2.878,498,2.302,499,1.438,500,1.438,501,1.438,502,1.438,503,2.302,504,2.302,505,1.438,506,1.438,507,1.438,508,1.3,626,1.3]],["title/coverage.html",[828,3.662]],["body/coverage.html",[6,1.312,12,0.022,24,0.179,40,0.196,41,0.014,42,0.014,43,2.457,44,2.173,46,2.713,53,1.704,60,0.387,66,1.835,68,1.989,74,0.737,83,2.173,84,2.173,86,3.931,106,1.749,113,2.404,133,0.656,154,2.713,156,1.395,170,1.395,183,1.235,185,3.392,194,1.835,231,3.36,237,2.173,238,2.713,268,1.835,288,2.713,290,1.312,310,1.312,320,1.704,322,1.589,364,3.554,389,1.989,451,2.599,452,1.989,514,1.704,515,3.26,521,1.589,524,1.589,538,2.173,539,2.713,543,1.704,544,3.554,556,2.713,591,2.173,594,1.589,595,1.589,596,1.589,599,2.713,611,3.438,627,2.713,629,2.173,630,2.713,645,1.835,663,2.713,690,2.173,691,2.713,715,1.835,735,2.713,788,2.173,789,2.713,794,1.835,805,2.713,828,2.404,829,3.182,830,3.182,831,3.182,832,3.182,833,3.182,834,4.49,835,4.49,836,6.69,837,5.203,838,3.182,839,5.203,840,3.182,841,5.652,842,5.652,843,3.182,844,3.182,845,3.182,846,3.182,847,2.713,848,3.182,849,3.182,850,2.713,851,3.182,852,3.182,853,3.182,854,3.182,855,3.182,856,3.182,857,3.182,858,3.182,859,3.182,860,3.182,861,3.182,862,2.713,863,3.182,864,3.182,865,3.182]],["title/dependencies.html",[3,1.762,866,2.53]],["body/dependencies.html",[3,1.938,12,0.022,28,0.707,36,3.552,40,0.164,41,0.018,42,0.018,109,3.552,110,3.211,111,4.009,168,3.552,224,1.938,437,3.211,438,3.211,442,3.211,444,2.518,448,2.518,867,4.702,868,6.316,869,4.702,870,4.702,871,4.702,872,4.702,873,4.702,874,4.702,875,4.702,876,5.817,877,5.817,878,4.702,879,4.702,880,4.702,881,4.702,882,4.702,883,4.702,884,4.702,885,4.702,886,4.702,887,4.702,888,4.702,889,4.702]],["title/miscellaneous/enumerations.html",[890,1.712,891,3.643]],["body/miscellaneous/enumerations.html",[12,0.019,41,0.019,42,0.019,49,0.724,318,3.435,515,3.192,518,3.459,519,3.459,520,2.964,890,3.192,891,4.718,892,5.533]],["title/miscellaneous/functions.html",[890,1.712,893,3.643]],["body/miscellaneous/functions.html",[6,2.8,12,0.019,41,0.019,42,0.019,49,0.729,850,4.751,890,3.215,893,4.751,894,5.573]],["title/index.html",[49,0.388,895,2.968,896,2.968]],["body/index.html",[12,0.022,23,0.241,41,0.017,42,0.017,186,2.93,316,3.657,398,2.93,456,3.75,756,3.657,822,3.657,828,3.241,897,4.289,898,4.289,899,5.49,900,4.289,901,4.289,902,4.289,903,4.289,904,4.289,905,4.289,906,6.055,907,4.289,908,4.289,909,4.289,910,6.862,911,4.289,912,4.289,913,4.289,914,6.75,915,4.289,916,4.289,917,5.49,918,4.289,919,4.289,920,4.289,921,4.289,922,5.49,923,4.289,924,4.289,925,4.289,926,5.49,927,5.49,928,4.289,929,4.289,930,4.289,931,4.289,932,3.657,933,4.289,934,4.289,935,4.289,936,4.289,937,4.289,938,4.289,939,4.289,940,4.289,941,3.657,942,4.289,943,4.289,944,4.289,945,4.289,946,4.289,947,4.289,948,3.657]],["title/modules.html",[2,1.998]],["body/modules.html",[1,3.406,2,2.056,11,3.117,12,0.018,13,3.117,14,2.877,15,2.671,16,3.117,17,3.117,18,3.117,41,0.018,42,0.018,932,6.098,949,7.152,950,7.152,951,7.152]],["title/overview.html",[952,4.133]],["body/overview.html",[0,1.072,1,4.881,2,1.519,3,1.519,4,1.722,5,1.722,6,1.519,7,1.722,8,1.722,9,3.141,10,3.141,11,3.926,12,0.022,13,4.26,14,3.815,15,3.602,16,3.926,17,4.134,18,3.926,19,2.322,20,1.722,21,1.722,41,0.015,42,0.015,45,1.519,66,3.242,83,2.516,139,3.141,140,3.141,153,1.84,156,2.9,184,1.201,268,3.242,281,3.141,282,3.141,290,2.727,509,3.141,510,3.141,511,3.141,604,3.141,606,3.141,607,3.141,608,3.141,626,2.516,645,3.242,659,3.141,660,3.141,715,3.242,730,3.141,731,3.141,794,3.242,801,3.141,802,3.141,862,3.141,952,3.141,953,3.683,954,3.683,955,3.683,956,3.683]],["title/properties.html",[195,1.316,866,2.53]],["body/properties.html",[12,0.022,41,0.019,42,0.019,186,3.766,195,1.699,941,4.701,948,4.701,957,5.514,958,5.514,959,5.514]],["title/miscellaneous/variables.html",[890,1.712,960,3.643]],["body/miscellaneous/variables.html",[12,0.022,41,0.014,42,0.014,49,0.454,60,0.422,68,2.982,74,1.105,81,1.959,82,1.808,86,2.622,89,1.522,99,0.715,112,1.749,113,3.604,114,2.959,115,2.959,116,2.959,118,3.669,133,1.123,164,2.383,170,2.092,180,2.383,183,1.852,189,1.859,190,2.752,227,2.17,230,2.383,290,1.967,299,2.555,310,1.431,320,2.555,325,3.604,327,2.622,330,1.859,334,2.002,335,2.752,348,2.959,369,4.067,370,2.959,379,2.371,385,2.17,401,1.734,403,2.371,404,2.371,405,2.555,410,2.371,415,2.371,416,2.371,461,4.008,475,2.371,482,2.371,508,3.258,594,2.383,595,1.734,596,2.383,611,2.002,612,2.17,621,3.669,622,3.407,623,2.17,624,2.17,743,2.959,847,2.959,890,2.002,960,2.959,961,3.471,962,3.471,963,4.77,964,3.471,965,4.77,966,3.471,967,4.77,968,3.471,969,3.471,970,4.77,971,3.471,972,3.471,973,4.77,974,3.471,975,3.471,976,3.471,977,3.471,978,3.471,979,3.471,980,3.471,981,3.471]]],"invertedIndex":[["",{"_index":12,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/Bid.html":{},"controllers/BidsController.html":{},"modules/BidsModule.html":{},"injectables/BidsService.html":{},"injectables/Client.html":{},"modules/ClientsModule.html":{},"classes/CloseDto.html":{},"classes/CreateBidDto.html":{},"classes/CreateSellOfferDto.html":{},"classes/CreateTokenDto.html":{},"classes/CreateUserDto.html":{},"injectables/Db.html":{},"modules/DbModule.html":{},"classes/DeletedEntity.html":{},"classes/EntityNotFound.html":{},"interfaces/EntityType.html":{},"interfaces/FinishAuctionInput.html":{},"classes/InvalidId.html":{},"controllers/NftsController.html":{},"modules/NftsModule.html":{},"injectables/NftsService.html":{},"classes/NotOwner.html":{},"classes/SellOffer.html":{},"controllers/SellOffersController.html":{},"modules/SellOffersModule.html":{},"injectables/SellOffersService.html":{},"classes/UpdatePrice.html":{},"classes/User.html":{},"classes/UserAuth.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"interfaces/Window.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":231,"title":{},"body":{"classes/Bid.html":{},"injectables/BidsService.html":{},"classes/CloseDto.html":{},"classes/CreateBidDto.html":{},"classes/CreateSellOfferDto.html":{},"injectables/Db.html":{},"classes/SellOffer.html":{},"classes/UpdatePrice.html":{},"coverage.html":{}}}],["0.0.1",{"_index":958,"title":{},"body":{"properties.html":{}}}],["0.1.13",{"_index":886,"title":{},"body":{"dependencies.html":{}}}],["0.14.0",{"_index":880,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":879,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":842,"title":{},"body":{"coverage.html":{}}}],["0/13",{"_index":838,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":836,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":839,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":837,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":864,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":840,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":604,"title":{},"body":{"injectables/Db.html":{},"overview.html":{}}}],["1/1",{"_index":849,"title":{},"body":{"coverage.html":{}}}],["1/13",{"_index":863,"title":{},"body":{"coverage.html":{}}}],["1/3",{"_index":835,"title":{},"body":{"coverage.html":{}}}],["1/4",{"_index":853,"title":{},"body":{"coverage.html":{}}}],["10.0.0",{"_index":868,"title":{},"body":{"dependencies.html":{}}}],["10.1.0",{"_index":870,"title":{},"body":{"dependencies.html":{}}}],["100",{"_index":848,"title":{},"body":{"coverage.html":{}}}],["11.1.0",{"_index":867,"title":{},"body":{"dependencies.html":{}}}],["11/12",{"_index":861,"title":{},"body":{"coverage.html":{}}}],["14",{"_index":955,"title":{},"body":{"overview.html":{}}}],["16.3.1",{"_index":882,"title":{},"body":{"dependencies.html":{}}}],["25",{"_index":852,"title":{},"body":{"coverage.html":{}}}],["3",{"_index":956,"title":{},"body":{"overview.html":{}}}],["3.0.0",{"_index":869,"title":{},"body":{"dependencies.html":{}}}],["3.10.40",{"_index":874,"title":{},"body":{"dependencies.html":{}}}],["3/5",{"_index":855,"title":{},"body":{"coverage.html":{}}}],["33",{"_index":834,"title":{},"body":{"coverage.html":{}}}],["4.0.3",{"_index":889,"title":{},"body":{"dependencies.html":{}}}],["4.1.1",{"_index":877,"title":{},"body":{"dependencies.html":{}}}],["4/6",{"_index":846,"title":{},"body":{"coverage.html":{}}}],["5",{"_index":954,"title":{},"body":{"overview.html":{}}}],["5.7.2",{"_index":883,"title":{},"body":{"dependencies.html":{}}}],["5/10",{"_index":859,"title":{},"body":{"coverage.html":{}}}],["5/6",{"_index":844,"title":{},"body":{"coverage.html":{}}}],["5/8",{"_index":833,"title":{},"body":{"coverage.html":{}}}],["50",{"_index":858,"title":{},"body":{"coverage.html":{}}}],["60",{"_index":854,"title":{},"body":{"coverage.html":{}}}],["62",{"_index":832,"title":{},"body":{"coverage.html":{}}}],["66",{"_index":845,"title":{},"body":{"coverage.html":{}}}],["7",{"_index":862,"title":{},"body":{"coverage.html":{},"overview.html":{}}}],["7.8.1",{"_index":888,"title":{},"body":{"dependencies.html":{}}}],["7/8",{"_index":857,"title":{},"body":{"coverage.html":{}}}],["8",{"_index":953,"title":{},"body":{"overview.html":{}}}],["83",{"_index":843,"title":{},"body":{"coverage.html":{}}}],["87",{"_index":856,"title":{},"body":{"coverage.html":{}}}],["91",{"_index":860,"title":{},"body":{"coverage.html":{}}}],["_",{"_index":491,"title":{},"body":{"injectables/Client.html":{},"interfaces/FinishAuctionInput.html":{},"interfaces/Window.html":{}}}],["_callcontract",{"_index":365,"title":{},"body":{"injectables/Client.html":{},"interfaces/FinishAuctionInput.html":{},"interfaces/Window.html":{}}}],["_callcontract(privatekey",{"_index":375,"title":{},"body":{"injectables/Client.html":{}}}],["_extracttokenfromheader",{"_index":88,"title":{},"body":{"guards/AuthGuard.html":{}}}],["_extracttokenfromheader(request",{"_index":96,"title":{},"body":{"guards/AuthGuard.html":{}}}],["_getbiddersign",{"_index":366,"title":{},"body":{"injectables/Client.html":{}}}],["_getbiddersign(inputs",{"_index":388,"title":{},"body":{"injectables/Client.html":{},"interfaces/FinishAuctionInput.html":{},"interfaces/Window.html":{}}}],["_getentity",{"_index":559,"title":{},"body":{"injectables/Db.html":{}}}],["_getentity(id",{"_index":568,"title":{},"body":{"injectables/Db.html":{}}}],["_getsellersign",{"_index":367,"title":{},"body":{"injectables/Client.html":{}}}],["_getsellersign(biddersignedmsg",{"_index":393,"title":{},"body":{"injectables/Client.html":{},"interfaces/FinishAuctionInput.html":{},"interfaces/Window.html":{}}}],["_lastindex",{"_index":560,"title":{},"body":{"injectables/Db.html":{}}}],["_lastindex(db",{"_index":578,"title":{},"body":{"injectables/Db.html":{}}}],["_readcontract",{"_index":368,"title":{},"body":{"injectables/Client.html":{},"interfaces/FinishAuctionInput.html":{},"interfaces/Window.html":{}}}],["_readcontract(input",{"_index":396,"title":{},"body":{"injectables/Client.html":{}}}],["accept",{"_index":328,"title":{},"body":{"injectables/BidsService.html":{}}}],["accesstoken",{"_index":179,"title":{},"body":{"injectables/AuthService.html":{}}}],["addr",{"_index":480,"title":{},"body":{"injectables/Client.html":{},"interfaces/FinishAuctionInput.html":{},"interfaces/Window.html":{}}}],["address",{"_index":406,"title":{},"body":{"injectables/Client.html":{},"interfaces/FinishAuctionInput.html":{},"interfaces/Window.html":{}}}],["adjudicates",{"_index":703,"title":{},"body":{"controllers/SellOffersController.html":{}}}],["allres",{"_index":495,"title":{},"body":{"injectables/Client.html":{},"interfaces/FinishAuctionInput.html":{},"interfaces/Window.html":{}}}],["amazing",{"_index":933,"title":{},"body":{"index.html":{}}}],["amount",{"_index":229,"title":{},"body":{"classes/Bid.html":{},"injectables/Client.html":{},"classes/CreateBidDto.html":{},"classes/CreateTokenDto.html":{},"interfaces/FinishAuctionInput.html":{},"controllers/NftsController.html":{},"injectables/NftsService.html":{},"controllers/SellOffersController.html":{},"interfaces/Window.html":{}}}],["ans",{"_index":475,"title":{},"body":{"injectables/Client.html":{},"interfaces/FinishAuctionInput.html":{},"interfaces/Window.html":{},"miscellaneous/variables.html":{}}}],["ans['transactionhash",{"_index":977,"title":{},"body":{"miscellaneous/variables.html":{}}}],["app",{"_index":912,"title":{},"body":{"index.html":{}}}],["app_guard",{"_index":145,"title":{},"body":{"modules/AuthModule.html":{}}}],["application",{"_index":598,"title":{},"body":{"injectables/Db.html":{}}}],["applications",{"_index":905,"title":{},"body":{"index.html":{}}}],["appmodule",{"_index":1,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["approve",{"_index":498,"title":{},"body":{"injectables/Client.html":{},"interfaces/FinishAuctionInput.html":{},"interfaces/Window.html":{}}}],["approvenft",{"_index":369,"title":{},"body":{"injectables/Client.html":{},"miscellaneous/variables.html":{}}}],["approvenft(key",{"_index":399,"title":{},"body":{"injectables/Client.html":{},"interfaces/FinishAuctionInput.html":{},"interfaces/Window.html":{}}}],["approves",{"_index":403,"title":{},"body":{"injectables/Client.html":{},"interfaces/FinishAuctionInput.html":{},"interfaces/Window.html":{},"miscellaneous/variables.html":{}}}],["approvetoken",{"_index":370,"title":{},"body":{"injectables/Client.html":{},"miscellaneous/variables.html":{}}}],["approvetoken(key",{"_index":408,"title":{},"body":{"injectables/Client.html":{},"interfaces/FinishAuctionInput.html":{},"interfaces/Window.html":{}}}],["array",{"_index":377,"title":{},"body":{"injectables/Client.html":{},"injectables/Db.html":{},"interfaces/FinishAuctionInput.html":{},"interfaces/Window.html":{}}}],["array.from",{"_index":488,"title":{},"body":{"injectables/Client.html":{},"interfaces/FinishAuctionInput.html":{},"interfaces/Window.html":{}}}],["ask",{"_index":120,"title":{},"body":{"guards/AuthGuard.html":{}}}],["associated",{"_index":228,"title":{},"body":{"classes/Bid.html":{},"classes/CreateBidDto.html":{}}}],["asumes",{"_index":745,"title":{},"body":{"injectables/SellOffersService.html":{}}}],["async",{"_index":89,"title":{},"body":{"guards/AuthGuard.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/BidsService.html":{},"injectables/Client.html":{},"interfaces/FinishAuctionInput.html":{},"injectables/NftsService.html":{},"injectables/SellOffersService.html":{},"interfaces/Window.html":{},"miscellaneous/variables.html":{}}}],["auction",{"_index":189,"title":{},"body":{"classes/Bid.html":{},"controllers/BidsController.html":{},"injectables/BidsService.html":{},"classes/CreateBidDto.html":{},"controllers/SellOffersController.html":{},"injectables/SellOffersService.html":{},"miscellaneous/variables.html":{}}}],["auctionstate",{"_index":318,"title":{},"body":{"injectables/BidsService.html":{},"classes/CloseDto.html":{},"classes/CreateSellOfferDto.html":{},"classes/SellOffer.html":{},"injectables/SellOffersService.html":{},"classes/UpdatePrice.html":{},"miscellaneous/enumerations.html":{}}}],["auctionstate.closed",{"_index":327,"title":{},"body":{"injectables/BidsService.html":{},"injectables/SellOffersService.html":{},"miscellaneous/variables.html":{}}}],["auctionstate.onauction",{"_index":340,"title":{},"body":{"injectables/BidsService.html":{},"classes/CloseDto.html":{},"classes/CreateSellOfferDto.html":{},"classes/SellOffer.html":{},"injectables/SellOffersService.html":{},"classes/UpdatePrice.html":{}}}],["auctionstate.onsale",{"_index":330,"title":{},"body":{"injectables/BidsService.html":{},"classes/CloseDto.html":{},"classes/CreateSellOfferDto.html":{},"classes/SellOffer.html":{},"injectables/SellOffersService.html":{},"classes/UpdatePrice.html":{},"miscellaneous/variables.html":{}}}],["auth",{"_index":48,"title":{},"body":{"controllers/AuthController.html":{}}}],["auth.controller",{"_index":142,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.guard",{"_index":69,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{}}}],["auth.service",{"_index":67,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{}}}],["auth/auth.module",{"_index":30,"title":{},"body":{"modules/AppModule.html":{}}}],["authcontroller",{"_index":44,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authentication",{"_index":117,"title":{},"body":{"guards/AuthGuard.html":{}}}],["authguard",{"_index":84,"title":{"guards/AuthGuard.html":{}},"body":{"guards/AuthGuard.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authmodule",{"_index":11,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":941,"title":{},"body":{"index.html":{},"properties.html":{}}}],["authservice",{"_index":66,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"coverage.html":{},"overview.html":{}}}],["await",{"_index":180,"title":{},"body":{"injectables/AuthService.html":{},"injectables/BidsService.html":{},"injectables/Client.html":{},"interfaces/FinishAuctionInput.html":{},"injectables/NftsService.html":{},"injectables/SellOffersService.html":{},"interfaces/Window.html":{},"miscellaneous/variables.html":{}}}],["b.deletedat",{"_index":355,"title":{},"body":{"injectables/BidsService.html":{}}}],["b.sellofferid",{"_index":354,"title":{},"body":{"injectables/BidsService.html":{}}}],["b1.bidamount",{"_index":358,"title":{},"body":{"injectables/BidsService.html":{}}}],["b2",{"_index":357,"title":{},"body":{"injectables/BidsService.html":{}}}],["b2.bidamount)[0",{"_index":359,"title":{},"body":{"injectables/BidsService.html":{}}}],["backers",{"_index":934,"title":{},"body":{"index.html":{}}}],["balance",{"_index":484,"title":{},"body":{"injectables/Client.html":{},"interfaces/FinishAuctionInput.html":{},"interfaces/Window.html":{}}}],["balance.tonumber",{"_index":490,"title":{},"body":{"injectables/Client.html":{},"interfaces/FinishAuctionInput.html":{},"interfaces/Window.html":{}}}],["balanceof",{"_index":485,"title":{},"body":{"injectables/Client.html":{},"interfaces/FinishAuctionInput.html":{},"interfaces/Window.html":{}}}],["bearer",{"_index":138,"title":{},"body":{"guards/AuthGuard.html":{}}}],["bid",{"_index":183,"title":{"classes/Bid.html":{}},"body":{"classes/Bid.html":{},"controllers/BidsController.html":{},"injectables/BidsService.html":{},"injectables/Client.html":{},"classes/CreateBidDto.html":{},"injectables/Db.html":{},"interfaces/FinishAuctionInput.html":{},"controllers/SellOffersController.html":{},"interfaces/Window.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["bid.bidamount",{"_index":349,"title":{},"body":{"injectables/BidsService.html":{}}}],["bid.deletedat",{"_index":342,"title":{},"body":{"injectables/BidsService.html":{}}}],["bid.sellofferid",{"_index":353,"title":{},"body":{"injectables/BidsService.html":{}}}],["bid.userid",{"_index":344,"title":{},"body":{"injectables/BidsService.html":{}}}],["bidamount",{"_index":199,"title":{},"body":{"classes/Bid.html":{},"classes/CreateBidDto.html":{}}}],["bidder",{"_index":299,"title":{},"body":{"injectables/BidsService.html":{},"injectables/Client.html":{},"interfaces/FinishAuctionInput.html":{},"controllers/SellOffersController.html":{},"injectables/SellOffersService.html":{},"interfaces/Window.html":{},"miscellaneous/variables.html":{}}}],["bidder.userkey",{"_index":970,"title":{},"body":{"miscellaneous/variables.html":{}}}],["bidderkey",{"_index":417,"title":{},"body":{"injectables/Client.html":{},"interfaces/FinishAuctionInput.html":{},"interfaces/Window.html":{}}}],["biddersignature",{"_index":499,"title":{},"body":{"injectables/Client.html":{},"interfaces/FinishAuctionInput.html":{},"interfaces/Window.html":{}}}],["biddersignature.signature",{"_index":503,"title":{},"body":{"injectables/Client.html":{},"interfaces/FinishAuctionInput.html":{},"interfaces/Window.html":{}}}],["biddersignedmsg",{"_index":395,"title":{},"body":{"injectables/Client.html":{}}}],["bids",{"_index":239,"title":{},"body":{"controllers/BidsController.html":{},"injectables/BidsService.html":{},"injectables/Db.html":{}}}],["bids.controller",{"_index":285,"title":{},"body":{"modules/BidsModule.html":{}}}],["bids.service",{"_index":269,"title":{},"body":{"controllers/BidsController.html":{},"modules/BidsModule.html":{}}}],["bids/:id",{"_index":259,"title":{},"body":{"controllers/BidsController.html":{}}}],["bids/bids.module",{"_index":34,"title":{},"body":{"modules/AppModule.html":{}}}],["bids/me",{"_index":255,"title":{},"body":{"controllers/BidsController.html":{}}}],["bidscontroller",{"_index":237,"title":{"controllers/BidsController.html":{}},"body":{"controllers/BidsController.html":{},"modules/BidsModule.html":{},"coverage.html":{}}}],["bidsmodule",{"_index":13,"title":{"modules/BidsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/BidsModule.html":{},"modules.html":{},"overview.html":{}}}],["bidsservice",{"_index":268,"title":{"injectables/BidsService.html":{}},"body":{"controllers/BidsController.html":{},"modules/BidsModule.html":{},"injectables/BidsService.html":{},"coverage.html":{},"overview.html":{}}}],["bignumber",{"_index":443,"title":{},"body":{"injectables/Client.html":{},"interfaces/FinishAuctionInput.html":{},"interfaces/Window.html":{}}}],["body",{"_index":63,"title":{},"body":{"controllers/AuthController.html":{},"classes/Bid.html":{},"controllers/BidsController.html":{},"classes/CreateBidDto.html":{},"controllers/NftsController.html":{},"controllers/SellOffersController.html":{},"controllers/UserController.html":{}}}],["bootstrap",{"_index":6,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/BidsModule.html":{},"modules/ClientsModule.html":{},"modules/DbModule.html":{},"modules/NftsModule.html":{},"modules/SellOffersModule.html":{},"modules/UserModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["break",{"_index":339,"title":{},"body":{"injectables/BidsService.html":{}}}],["browse",{"_index":951,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":949,"title":{},"body":{"modules.html":{}}}],["building",{"_index":900,"title":{},"body":{"index.html":{}}}],["buy",{"_index":191,"title":{},"body":{"classes/Bid.html":{},"classes/CreateBidDto.html":{}}}],["buyinput",{"_index":967,"title":{},"body":{"miscellaneous/variables.html":{}}}],["buyinput.bid",{"_index":971,"title":{},"body":{"miscellaneous/variables.html":{}}}],["buyinput.tokenid",{"_index":974,"title":{},"body":{"miscellaneous/variables.html":{}}}],["call",{"_index":454,"title":{},"body":{"injectables/Client.html":{},"interfaces/FinishAuctionInput.html":{},"interfaces/Window.html":{}}}],["calling",{"_index":636,"title":{},"body":{"controllers/NftsController.html":{}}}],["calls",{"_index":382,"title":{},"body":{"injectables/Client.html":{},"interfaces/FinishAuctionInput.html":{},"interfaces/Window.html":{}}}],["canactivate",{"_index":90,"title":{},"body":{"guards/AuthGuard.html":{}}}],["canactivate(context",{"_index":101,"title":{},"body":{"guards/AuthGuard.html":{}}}],["cancel",{"_index":692,"title":{},"body":{"controllers/SellOffersController.html":{},"injectables/SellOffersService.html":{}}}],["cancel(@req",{"_index":728,"title":{},"body":{"controllers/SellOffersController.html":{}}}],["cancel(req",{"_index":694,"title":{},"body":{"controllers/SellOffersController.html":{}}}],["cancel(userid",{"_index":738,"title":{},"body":{"injectables/SellOffersService.html":{}}}],["cancels",{"_index":697,"title":{},"body":{"controllers/SellOffersController.html":{},"injectables/SellOffersService.html":{}}}],["case",{"_index":326,"title":{},"body":{"injectables/BidsService.html":{}}}],["catch",{"_index":80,"title":{},"body":{"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"controllers/BidsController.html":{},"injectables/BidsService.html":{},"injectables/Client.html":{},"interfaces/FinishAuctionInput.html":{},"injectables/NftsService.html":{},"controllers/SellOffersController.html":{},"injectables/SellOffersService.html":{},"injectables/UserService.html":{},"interfaces/Window.html":{}}}],["change",{"_index":714,"title":{},"body":{"controllers/SellOffersController.html":{}}}],["class",{"_index":40,"title":{"classes/Bid.html":{},"classes/CloseDto.html":{},"classes/CreateBidDto.html":{},"classes/CreateSellOfferDto.html":{},"classes/CreateTokenDto.html":{},"classes/CreateUserDto.html":{},"classes/DeletedEntity.html":{},"classes/EntityNotFound.html":{},"classes/InvalidId.html":{},"classes/NotOwner.html":{},"classes/SellOffer.html":{},"classes/UpdatePrice.html":{},"classes/User.html":{},"classes/UserAuth.html":{}},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/Bid.html":{},"controllers/BidsController.html":{},"modules/BidsModule.html":{},"injectables/BidsService.html":{},"injectables/Client.html":{},"modules/ClientsModule.html":{},"classes/CloseDto.html":{},"classes/CreateBidDto.html":{},"classes/CreateSellOfferDto.html":{},"classes/CreateTokenDto.html":{},"classes/CreateUserDto.html":{},"injectables/Db.html":{},"modules/DbModule.html":{},"classes/DeletedEntity.html":{},"classes/EntityNotFound.html":{},"interfaces/FinishAuctionInput.html":{},"classes/InvalidId.html":{},"controllers/NftsController.html":{},"modules/NftsModule.html":{},"injectables/NftsService.html":{},"classes/NotOwner.html":{},"classes/SellOffer.html":{},"controllers/SellOffersController.html":{},"modules/SellOffersModule.html":{},"injectables/SellOffersService.html":{},"classes/UpdatePrice.html":{},"classes/User.html":{},"classes/UserAuth.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"interfaces/Window.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":184,"title":{},"body":{"classes/Bid.html":{},"classes/CloseDto.html":{},"classes/CreateBidDto.html":{},"classes/CreateSellOfferDto.html":{},"classes/CreateTokenDto.html":{},"classes/CreateUserDto.html":{},"classes/DeletedEntity.html":{},"classes/EntityNotFound.html":{},"classes/InvalidId.html":{},"classes/NotOwner.html":{},"classes/SellOffer.html":{},"classes/UpdatePrice.html":{},"classes/User.html":{},"classes/UserAuth.html":{},"overview.html":{}}}],["client",{"_index":290,"title":{"injectables/Client.html":{}},"body":{"injectables/BidsService.html":{},"injectables/Client.html":{},"modules/ClientsModule.html":{},"interfaces/FinishAuctionInput.html":{},"injectables/NftsService.html":{},"injectables/SellOffersService.html":{},"interfaces/Window.html":{},"coverage.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["client.approvenft",{"_index":972,"title":{},"body":{"miscellaneous/variables.html":{}}}],["client.approvetoken",{"_index":969,"title":{},"body":{"miscellaneous/variables.html":{}}}],["client.finishauction",{"_index":976,"title":{},"body":{"miscellaneous/variables.html":{}}}],["clients.service",{"_index":513,"title":{},"body":{"modules/ClientsModule.html":{}}}],["clientsmodule",{"_index":14,"title":{"modules/ClientsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/BidsModule.html":{},"modules/ClientsModule.html":{},"modules.html":{},"overview.html":{}}}],["close",{"_index":693,"title":{},"body":{"controllers/SellOffersController.html":{},"injectables/SellOffersService.html":{}}}],["close(@req",{"_index":724,"title":{},"body":{"controllers/SellOffersController.html":{}}}],["close(req",{"_index":698,"title":{},"body":{"controllers/SellOffersController.html":{}}}],["close(userid",{"_index":741,"title":{},"body":{"injectables/SellOffersService.html":{}}}],["closed",{"_index":520,"title":{},"body":{"classes/CloseDto.html":{},"classes/CreateSellOfferDto.html":{},"classes/SellOffer.html":{},"controllers/SellOffersController.html":{},"injectables/SellOffersService.html":{},"classes/UpdatePrice.html":{},"miscellaneous/enumerations.html":{}}}],["closedto",{"_index":514,"title":{"classes/CloseDto.html":{}},"body":{"classes/CloseDto.html":{},"classes/CreateSellOfferDto.html":{},"classes/SellOffer.html":{},"controllers/SellOffersController.html":{},"classes/UpdatePrice.html":{},"coverage.html":{}}}],["closedto.sellofferid",{"_index":727,"title":{},"body":{"controllers/SellOffersController.html":{}}}],["closes",{"_index":702,"title":{},"body":{"controllers/SellOffersController.html":{}}}],["cluster_appmodule",{"_index":9,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":10,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":139,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_providers",{"_index":140,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_bidsmodule",{"_index":281,"title":{},"body":{"modules/BidsModule.html":{},"overview.html":{}}}],["cluster_bidsmodule_imports",{"_index":283,"title":{},"body":{"modules/BidsModule.html":{}}}],["cluster_bidsmodule_providers",{"_index":282,"title":{},"body":{"modules/BidsModule.html":{},"overview.html":{}}}],["cluster_clientsmodule",{"_index":509,"title":{},"body":{"modules/ClientsModule.html":{},"overview.html":{}}}],["cluster_clientsmodule_exports",{"_index":510,"title":{},"body":{"modules/ClientsModule.html":{},"overview.html":{}}}],["cluster_clientsmodule_providers",{"_index":511,"title":{},"body":{"modules/ClientsModule.html":{},"overview.html":{}}}],["cluster_dbmodule",{"_index":606,"title":{},"body":{"modules/DbModule.html":{},"overview.html":{}}}],["cluster_dbmodule_exports",{"_index":608,"title":{},"body":{"modules/DbModule.html":{},"overview.html":{}}}],["cluster_dbmodule_providers",{"_index":607,"title":{},"body":{"modules/DbModule.html":{},"overview.html":{}}}],["cluster_nftsmodule",{"_index":659,"title":{},"body":{"modules/NftsModule.html":{},"overview.html":{}}}],["cluster_nftsmodule_providers",{"_index":660,"title":{},"body":{"modules/NftsModule.html":{},"overview.html":{}}}],["cluster_selloffersmodule",{"_index":730,"title":{},"body":{"modules/SellOffersModule.html":{},"overview.html":{}}}],["cluster_selloffersmodule_imports",{"_index":732,"title":{},"body":{"modules/SellOffersModule.html":{}}}],["cluster_selloffersmodule_providers",{"_index":731,"title":{},"body":{"modules/SellOffersModule.html":{},"overview.html":{}}}],["cluster_usermodule",{"_index":801,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_usermodule_providers",{"_index":802,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["configmodule",{"_index":35,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["configmodule.forroot",{"_index":38,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice",{"_index":144,"title":{},"body":{"modules/AuthModule.html":{}}}],["configservice.get('jwt_secret",{"_index":149,"title":{},"body":{"modules/AuthModule.html":{}}}],["considered",{"_index":208,"title":{},"body":{"classes/Bid.html":{},"classes/CreateBidDto.html":{}}}],["console.log(process.env.jwt_secret",{"_index":815,"title":{},"body":{"injectables/UserService.html":{}}}],["console.log(promise",{"_index":494,"title":{},"body":{"injectables/Client.html":{},"interfaces/FinishAuctionInput.html":{},"interfaces/Window.html":{}}}],["console.log(req.user",{"_index":657,"title":{},"body":{"controllers/NftsController.html":{}}}],["const",{"_index":112,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/BidsService.html":{},"injectables/Client.html":{},"classes/CreateUserDto.html":{},"classes/DeletedEntity.html":{},"classes/EntityNotFound.html":{},"interfaces/FinishAuctionInput.html":{},"classes/InvalidId.html":{},"injectables/NftsService.html":{},"classes/NotOwner.html":{},"controllers/SellOffersController.html":{},"injectables/SellOffersService.html":{},"classes/User.html":{},"classes/UserAuth.html":{},"injectables/UserService.html":{},"interfaces/Window.html":{},"miscellaneous/variables.html":{}}}],["constructor",{"_index":91,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"classes/Bid.html":{},"injectables/BidsService.html":{},"injectables/Db.html":{},"classes/DeletedEntity.html":{},"classes/EntityNotFound.html":{},"classes/InvalidId.html":{},"injectables/NftsService.html":{},"classes/NotOwner.html":{},"classes/SellOffer.html":{},"injectables/SellOffersService.html":{},"classes/User.html":{},"injectables/UserService.html":{}}}],["constructor(client",{"_index":289,"title":{},"body":{"injectables/BidsService.html":{},"injectables/NftsService.html":{},"injectables/SellOffersService.html":{}}}],["constructor(db",{"_index":155,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["constructor(entity",{"_index":613,"title":{},"body":{"classes/DeletedEntity.html":{},"classes/EntityNotFound.html":{},"classes/InvalidId.html":{},"classes/NotOwner.html":{}}}],["constructor(jwt",{"_index":92,"title":{},"body":{"guards/AuthGuard.html":{}}}],["constructor(private",{"_index":71,"title":{},"body":{"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"controllers/BidsController.html":{},"injectables/BidsService.html":{},"controllers/NftsController.html":{},"injectables/NftsService.html":{},"controllers/SellOffersController.html":{},"injectables/SellOffersService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["constructor(values",{"_index":201,"title":{},"body":{"classes/Bid.html":{},"classes/CloseDto.html":{},"classes/CreateBidDto.html":{},"classes/CreateSellOfferDto.html":{},"classes/CreateUserDto.html":{},"classes/SellOffer.html":{},"classes/UpdatePrice.html":{},"classes/User.html":{},"classes/UserAuth.html":{}}}],["context",{"_index":104,"title":{},"body":{"guards/AuthGuard.html":{}}}],["context.getclass",{"_index":129,"title":{},"body":{"guards/AuthGuard.html":{}}}],["context.gethandler",{"_index":128,"title":{},"body":{"guards/AuthGuard.html":{}}}],["context.switchtohttp().getrequest",{"_index":130,"title":{},"body":{"guards/AuthGuard.html":{}}}],["contract",{"_index":385,"title":{},"body":{"injectables/Client.html":{},"interfaces/FinishAuctionInput.html":{},"controllers/NftsController.html":{},"interfaces/Window.html":{},"miscellaneous/variables.html":{}}}],["contract.call(method",{"_index":476,"title":{},"body":{"injectables/Client.html":{},"interfaces/FinishAuctionInput.html":{},"interfaces/Window.html":{}}}],["contractaddr",{"_index":378,"title":{},"body":{"injectables/Client.html":{},"interfaces/FinishAuctionInput.html":{},"interfaces/Window.html":{}}}],["controller",{"_index":43,"title":{"controllers/AuthController.html":{},"controllers/BidsController.html":{},"controllers/NftsController.html":{},"controllers/SellOffersController.html":{},"controllers/UserController.html":{}},"body":{"controllers/AuthController.html":{},"controllers/BidsController.html":{},"controllers/NftsController.html":{},"controllers/SellOffersController.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["controller('auth",{"_index":70,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller('bids",{"_index":270,"title":{},"body":{"controllers/BidsController.html":{}}}],["controller('nfts",{"_index":648,"title":{},"body":{"controllers/NftsController.html":{}}}],["controller('selloffers",{"_index":717,"title":{},"body":{"controllers/SellOffersController.html":{}}}],["controller('user",{"_index":797,"title":{},"body":{"controllers/UserController.html":{}}}],["controllers",{"_index":45,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/BidsController.html":{},"modules/BidsModule.html":{},"controllers/NftsController.html":{},"modules/NftsModule.html":{},"controllers/SellOffersController.html":{},"modules/SellOffersModule.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["correct",{"_index":160,"title":{},"body":{"injectables/AuthService.html":{}}}],["coverage",{"_index":828,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["create",{"_index":240,"title":{},"body":{"controllers/BidsController.html":{},"injectables/BidsService.html":{},"controllers/NftsController.html":{},"injectables/NftsService.html":{},"controllers/SellOffersController.html":{},"injectables/SellOffersService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["create(@body",{"_index":271,"title":{},"body":{"controllers/BidsController.html":{},"controllers/UserController.html":{}}}],["create(@req",{"_index":649,"title":{},"body":{"controllers/NftsController.html":{},"controllers/SellOffersController.html":{}}}],["create(createbiddto",{"_index":245,"title":{},"body":{"controllers/BidsController.html":{},"injectables/BidsService.html":{}}}],["create(createuserdto",{"_index":790,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["create(req",{"_index":633,"title":{},"body":{"controllers/NftsController.html":{},"controllers/SellOffersController.html":{}}}],["create(userid",{"_index":665,"title":{},"body":{"injectables/NftsService.html":{},"injectables/SellOffersService.html":{}}}],["createbiddto",{"_index":194,"title":{"classes/CreateBidDto.html":{}},"body":{"classes/Bid.html":{},"controllers/BidsController.html":{},"injectables/BidsService.html":{},"classes/CreateBidDto.html":{},"coverage.html":{}}}],["createbiddto.bidamount",{"_index":341,"title":{},"body":{"injectables/BidsService.html":{}}}],["createbiddto:11",{"_index":218,"title":{},"body":{"classes/Bid.html":{}}}],["createbiddto:8",{"_index":220,"title":{},"body":{"classes/Bid.html":{}}}],["createdat",{"_index":196,"title":{},"body":{"classes/Bid.html":{},"classes/CloseDto.html":{},"classes/CreateBidDto.html":{},"classes/CreateSellOfferDto.html":{},"classes/CreateUserDto.html":{},"classes/SellOffer.html":{},"classes/UpdatePrice.html":{},"classes/User.html":{},"classes/UserAuth.html":{}}}],["creates",{"_index":248,"title":{},"body":{"controllers/BidsController.html":{},"injectables/Client.html":{},"interfaces/FinishAuctionInput.html":{},"injectables/NftsService.html":{},"controllers/SellOffersController.html":{},"injectables/SellOffersService.html":{},"interfaces/Window.html":{}}}],["createsellofferdto",{"_index":521,"title":{"classes/CreateSellOfferDto.html":{}},"body":{"classes/CloseDto.html":{},"classes/CreateSellOfferDto.html":{},"classes/SellOffer.html":{},"controllers/SellOffersController.html":{},"injectables/SellOffersService.html":{},"classes/UpdatePrice.html":{},"coverage.html":{}}}],["createsellofferdto.tokenid.tostring",{"_index":759,"title":{},"body":{"injectables/SellOffersService.html":{}}}],["createsellofferdto:12",{"_index":689,"title":{},"body":{"classes/SellOffer.html":{}}}],["createsellofferdto:15",{"_index":688,"title":{},"body":{"classes/SellOffer.html":{}}}],["createsellofferdto:18",{"_index":687,"title":{},"body":{"classes/SellOffer.html":{}}}],["createtokendto",{"_index":538,"title":{"classes/CreateTokenDto.html":{}},"body":{"classes/CreateTokenDto.html":{},"controllers/NftsController.html":{},"coverage.html":{}}}],["createtokendto.amount",{"_index":651,"title":{},"body":{"controllers/NftsController.html":{}}}],["createuserdto",{"_index":543,"title":{"classes/CreateUserDto.html":{}},"body":{"classes/CreateUserDto.html":{},"classes/User.html":{},"classes/UserAuth.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["creation",{"_index":122,"title":{},"body":{"guards/AuthGuard.html":{},"classes/Bid.html":{},"injectables/BidsService.html":{},"classes/CreateBidDto.html":{}}}],["credential",{"_index":159,"title":{},"body":{"injectables/AuthService.html":{}}}],["crypto",{"_index":168,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["current",{"_index":314,"title":{},"body":{"injectables/BidsService.html":{},"controllers/SellOffersController.html":{}}}],["currentbid",{"_index":525,"title":{},"body":{"classes/CloseDto.html":{},"classes/CreateSellOfferDto.html":{},"classes/SellOffer.html":{},"classes/UpdatePrice.html":{}}}],["date",{"_index":205,"title":{},"body":{"classes/Bid.html":{},"injectables/BidsService.html":{},"classes/CloseDto.html":{},"classes/CreateBidDto.html":{},"classes/CreateSellOfferDto.html":{},"classes/CreateUserDto.html":{},"interfaces/EntityType.html":{},"classes/SellOffer.html":{},"injectables/SellOffersService.html":{},"classes/UpdatePrice.html":{},"classes/User.html":{},"classes/UserAuth.html":{}}}],["db",{"_index":156,"title":{"injectables/Db.html":{}},"body":{"injectables/AuthService.html":{},"injectables/BidsService.html":{},"injectables/Db.html":{},"modules/DbModule.html":{},"injectables/NftsService.html":{},"injectables/SellOffersService.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["db.length",{"_index":603,"title":{},"body":{"injectables/Db.html":{}}}],["db.service",{"_index":610,"title":{},"body":{"modules/DbModule.html":{}}}],["dbmodule",{"_index":15,"title":{"modules/DbModule.html":{}},"body":{"modules/AppModule.html":{},"modules/BidsModule.html":{},"modules/DbModule.html":{},"modules/SellOffersModule.html":{},"modules.html":{},"overview.html":{}}}],["declarations",{"_index":5,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/BidsModule.html":{},"modules/ClientsModule.html":{},"modules/DbModule.html":{},"modules/NftsModule.html":{},"modules/SellOffersModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["declare",{"_index":449,"title":{},"body":{"injectables/Client.html":{},"interfaces/FinishAuctionInput.html":{},"interfaces/Window.html":{}}}],["decorators",{"_index":54,"title":{},"body":{"controllers/AuthController.html":{},"classes/Bid.html":{},"controllers/BidsController.html":{},"classes/CloseDto.html":{},"classes/CreateBidDto.html":{},"classes/CreateSellOfferDto.html":{},"classes/CreateTokenDto.html":{},"classes/CreateUserDto.html":{},"controllers/NftsController.html":{},"classes/SellOffer.html":{},"controllers/SellOffersController.html":{},"classes/UpdatePrice.html":{},"classes/UserAuth.html":{},"controllers/UserController.html":{}}}],["default",{"_index":118,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/BidsService.html":{},"controllers/NftsController.html":{},"injectables/NftsService.html":{},"miscellaneous/variables.html":{}}}],["defined",{"_index":56,"title":{},"body":{"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"classes/Bid.html":{},"controllers/BidsController.html":{},"injectables/BidsService.html":{},"injectables/Client.html":{},"classes/CloseDto.html":{},"classes/CreateBidDto.html":{},"classes/CreateSellOfferDto.html":{},"classes/CreateTokenDto.html":{},"classes/CreateUserDto.html":{},"injectables/Db.html":{},"classes/DeletedEntity.html":{},"classes/EntityNotFound.html":{},"classes/InvalidId.html":{},"controllers/NftsController.html":{},"injectables/NftsService.html":{},"classes/NotOwner.html":{},"classes/SellOffer.html":{},"controllers/SellOffersController.html":{},"injectables/SellOffersService.html":{},"classes/UpdatePrice.html":{},"classes/User.html":{},"classes/UserAuth.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["delete",{"_index":264,"title":{},"body":{"controllers/BidsController.html":{},"controllers/SellOffersController.html":{}}}],["delete(':id",{"_index":262,"title":{},"body":{"controllers/BidsController.html":{},"controllers/SellOffersController.html":{}}}],["deleted",{"_index":210,"title":{},"body":{"classes/Bid.html":{},"controllers/BidsController.html":{},"injectables/BidsService.html":{},"classes/CreateBidDto.html":{},"classes/DeletedEntity.html":{},"classes/EntityNotFound.html":{},"classes/InvalidId.html":{},"classes/NotOwner.html":{},"controllers/SellOffersController.html":{}}}],["deletedat",{"_index":197,"title":{},"body":{"classes/Bid.html":{},"classes/CloseDto.html":{},"classes/CreateBidDto.html":{},"classes/CreateSellOfferDto.html":{},"classes/CreateUserDto.html":{},"interfaces/EntityType.html":{},"classes/SellOffer.html":{},"classes/UpdatePrice.html":{},"classes/User.html":{},"classes/UserAuth.html":{}}}],["deletedentity",{"_index":594,"title":{"classes/DeletedEntity.html":{}},"body":{"injectables/Db.html":{},"classes/DeletedEntity.html":{},"classes/EntityNotFound.html":{},"classes/InvalidId.html":{},"classes/NotOwner.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["deletion",{"_index":207,"title":{},"body":{"classes/Bid.html":{},"classes/CreateBidDto.html":{}}}],["dependencies",{"_index":3,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/BidsModule.html":{},"modules/ClientsModule.html":{},"modules/DbModule.html":{},"modules/NftsModule.html":{},"modules/SellOffersModule.html":{},"modules/UserModule.html":{},"dependencies.html":{},"overview.html":{}}}],["description",{"_index":186,"title":{},"body":{"classes/Bid.html":{},"classes/CreateBidDto.html":{},"index.html":{},"properties.html":{}}}],["dev/chains",{"_index":440,"title":{},"body":{"injectables/Client.html":{},"interfaces/FinishAuctionInput.html":{},"interfaces/Window.html":{}}}],["dev/sdk",{"_index":438,"title":{},"body":{"injectables/Client.html":{},"interfaces/FinishAuctionInput.html":{},"interfaces/Window.html":{},"dependencies.html":{}}}],["development",{"_index":913,"title":{},"body":{"index.html":{}}}],["disable",{"_index":821,"title":{},"body":{"injectables/UserService.html":{}}}],["documentation",{"_index":829,"title":{},"body":{"coverage.html":{}}}],["dotenv",{"_index":881,"title":{},"body":{"dependencies.html":{}}}],["e2e",{"_index":923,"title":{},"body":{"index.html":{}}}],["efficient",{"_index":901,"title":{},"body":{"index.html":{}}}],["endpoint",{"_index":119,"title":{},"body":{"guards/AuthGuard.html":{}}}],["ends",{"_index":981,"title":{},"body":{"miscellaneous/variables.html":{}}}],["entity",{"_index":187,"title":{},"body":{"classes/Bid.html":{},"classes/CreateBidDto.html":{},"injectables/Db.html":{},"classes/DeletedEntity.html":{},"classes/EntityNotFound.html":{},"classes/InvalidId.html":{},"classes/NotOwner.html":{}}}],["entityname",{"_index":570,"title":{},"body":{"injectables/Db.html":{}}}],["entitynotfound",{"_index":595,"title":{"classes/EntityNotFound.html":{}},"body":{"injectables/Db.html":{},"classes/DeletedEntity.html":{},"classes/EntityNotFound.html":{},"classes/InvalidId.html":{},"classes/NotOwner.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["entitytype",{"_index":591,"title":{"interfaces/EntityType.html":{}},"body":{"injectables/Db.html":{},"interfaces/EntityType.html":{},"coverage.html":{}}}],["entropy",{"_index":545,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/User.html":{},"classes/UserAuth.html":{}}}],["enum",{"_index":517,"title":{},"body":{"classes/CloseDto.html":{},"classes/CreateSellOfferDto.html":{},"classes/SellOffer.html":{},"classes/UpdatePrice.html":{}}}],["enumerations",{"_index":891,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["erc20",{"_index":427,"title":{},"body":{"injectables/Client.html":{},"interfaces/FinishAuctionInput.html":{},"controllers/NftsController.html":{},"interfaces/Window.html":{}}}],["erc721",{"_index":422,"title":{},"body":{"injectables/Client.html":{},"interfaces/FinishAuctionInput.html":{},"interfaces/Window.html":{}}}],["err",{"_index":81,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/BidsController.html":{},"injectables/BidsService.html":{},"injectables/Client.html":{},"classes/DeletedEntity.html":{},"classes/EntityNotFound.html":{},"interfaces/FinishAuctionInput.html":{},"classes/InvalidId.html":{},"injectables/NftsService.html":{},"classes/NotOwner.html":{},"controllers/SellOffersController.html":{},"injectables/SellOffersService.html":{},"injectables/UserService.html":{},"interfaces/Window.html":{},"miscellaneous/variables.html":{}}}],["error",{"_index":612,"title":{},"body":{"classes/DeletedEntity.html":{},"classes/EntityNotFound.html":{},"classes/InvalidId.html":{},"classes/NotOwner.html":{},"miscellaneous/variables.html":{}}}],["eslint",{"_index":820,"title":{},"body":{"injectables/UserService.html":{}}}],["eslint/no",{"_index":823,"title":{},"body":{"injectables/UserService.html":{}}}],["et",{"_index":592,"title":{},"body":{"injectables/Db.html":{}}}],["eth",{"_index":445,"title":{},"body":{"injectables/Client.html":{},"interfaces/FinishAuctionInput.html":{},"interfaces/Window.html":{}}}],["eth.accounts.sign(hashmessage",{"_index":468,"title":{},"body":{"injectables/Client.html":{},"interfaces/FinishAuctionInput.html":{},"interfaces/Window.html":{}}}],["ether",{"_index":482,"title":{},"body":{"injectables/Client.html":{},"interfaces/FinishAuctionInput.html":{},"interfaces/Window.html":{},"miscellaneous/variables.html":{}}}],["ethereum",{"_index":453,"title":{},"body":{"injectables/Client.html":{},"interfaces/FinishAuctionInput.html":{},"interfaces/Window.html":{}}}],["ethers",{"_index":444,"title":{},"body":{"injectables/Client.html":{},"classes/CreateUserDto.html":{},"interfaces/FinishAuctionInput.html":{},"classes/User.html":{},"classes/UserAuth.html":{},"interfaces/Window.html":{},"dependencies.html":{}}}],["ethers.wallet(key",{"_index":552,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/User.html":{},"classes/UserAuth.html":{}}}],["exceptions",{"_index":121,"title":{},"body":{"guards/AuthGuard.html":{}}}],["exchange",{"_index":295,"title":{},"body":{"injectables/BidsService.html":{}}}],["execute",{"_index":416,"title":{},"body":{"injectables/Client.html":{},"interfaces/FinishAuctionInput.html":{},"interfaces/Window.html":{},"miscellaneous/variables.html":{}}}],["executes",{"_index":294,"title":{},"body":{"injectables/BidsService.html":{}}}],["executioncontext",{"_index":102,"title":{},"body":{"guards/AuthGuard.html":{}}}],["export",{"_index":39,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/Bid.html":{},"controllers/BidsController.html":{},"modules/BidsModule.html":{},"injectables/BidsService.html":{},"injectables/Client.html":{},"modules/ClientsModule.html":{},"classes/CloseDto.html":{},"classes/CreateBidDto.html":{},"classes/CreateSellOfferDto.html":{},"classes/CreateTokenDto.html":{},"classes/CreateUserDto.html":{},"injectables/Db.html":{},"modules/DbModule.html":{},"classes/DeletedEntity.html":{},"classes/EntityNotFound.html":{},"interfaces/EntityType.html":{},"interfaces/FinishAuctionInput.html":{},"classes/InvalidId.html":{},"controllers/NftsController.html":{},"modules/NftsModule.html":{},"injectables/NftsService.html":{},"classes/NotOwner.html":{},"classes/SellOffer.html":{},"controllers/SellOffersController.html":{},"modules/SellOffersModule.html":{},"injectables/SellOffersService.html":{},"classes/UpdatePrice.html":{},"classes/User.html":{},"classes/UserAuth.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"interfaces/Window.html":{}}}],["exports",{"_index":8,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/BidsModule.html":{},"modules/ClientsModule.html":{},"modules/DbModule.html":{},"modules/NftsModule.html":{},"modules/SellOffersModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["express",{"_index":111,"title":{},"body":{"guards/AuthGuard.html":{},"dependencies.html":{}}}],["extends",{"_index":193,"title":{},"body":{"classes/Bid.html":{},"classes/CloseDto.html":{},"classes/CreateBidDto.html":{},"classes/CreateSellOfferDto.html":{},"classes/DeletedEntity.html":{},"classes/EntityNotFound.html":{},"classes/InvalidId.html":{},"classes/NotOwner.html":{},"classes/SellOffer.html":{},"classes/UpdatePrice.html":{}}}],["fails",{"_index":575,"title":{},"body":{"injectables/Db.html":{},"controllers/SellOffersController.html":{}}}],["fetch",{"_index":250,"title":{},"body":{"controllers/BidsController.html":{},"controllers/SellOffersController.html":{}}}],["file",{"_index":24,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/Bid.html":{},"controllers/BidsController.html":{},"modules/BidsModule.html":{},"injectables/BidsService.html":{},"injectables/Client.html":{},"modules/ClientsModule.html":{},"classes/CloseDto.html":{},"classes/CreateBidDto.html":{},"classes/CreateSellOfferDto.html":{},"classes/CreateTokenDto.html":{},"classes/CreateUserDto.html":{},"injectables/Db.html":{},"modules/DbModule.html":{},"classes/DeletedEntity.html":{},"classes/EntityNotFound.html":{},"interfaces/EntityType.html":{},"interfaces/FinishAuctionInput.html":{},"classes/InvalidId.html":{},"controllers/NftsController.html":{},"modules/NftsModule.html":{},"injectables/NftsService.html":{},"classes/NotOwner.html":{},"classes/SellOffer.html":{},"controllers/SellOffersController.html":{},"modules/SellOffersModule.html":{},"injectables/SellOffersService.html":{},"classes/UpdatePrice.html":{},"classes/User.html":{},"classes/UserAuth.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"interfaces/Window.html":{},"coverage.html":{}}}],["filter((b",{"_index":352,"title":{},"body":{"injectables/BidsService.html":{}}}],["find",{"_index":618,"title":{},"body":{"classes/DeletedEntity.html":{},"classes/EntityNotFound.html":{},"classes/InvalidId.html":{},"classes/NotOwner.html":{}}}],["findall",{"_index":241,"title":{},"body":{"controllers/BidsController.html":{},"injectables/BidsService.html":{},"controllers/SellOffersController.html":{},"injectables/SellOffersService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["findall(user",{"_index":300,"title":{},"body":{"injectables/BidsService.html":{}}}],["findallnft",{"_index":631,"title":{},"body":{"controllers/NftsController.html":{},"injectables/NftsService.html":{}}}],["findallnft(@req",{"_index":653,"title":{},"body":{"controllers/NftsController.html":{}}}],["findallnft(req",{"_index":640,"title":{},"body":{"controllers/NftsController.html":{}}}],["findallnft(userid",{"_index":667,"title":{},"body":{"injectables/NftsService.html":{}}}],["findalltoken",{"_index":632,"title":{},"body":{"controllers/NftsController.html":{},"injectables/NftsService.html":{}}}],["findalltoken(@req",{"_index":656,"title":{},"body":{"controllers/NftsController.html":{}}}],["findalltoken(req",{"_index":642,"title":{},"body":{"controllers/NftsController.html":{}}}],["findalltoken(userid",{"_index":669,"title":{},"body":{"injectables/NftsService.html":{}}}],["findbyuser",{"_index":242,"title":{},"body":{"controllers/BidsController.html":{}}}],["findbyuser(@req",{"_index":275,"title":{},"body":{"controllers/BidsController.html":{}}}],["findbyuser(req",{"_index":252,"title":{},"body":{"controllers/BidsController.html":{}}}],["findbyuserid",{"_index":736,"title":{},"body":{"injectables/SellOffersService.html":{}}}],["findbyuserid(userid",{"_index":748,"title":{},"body":{"injectables/SellOffersService.html":{}}}],["findone",{"_index":243,"title":{},"body":{"controllers/BidsController.html":{},"injectables/BidsService.html":{},"controllers/SellOffersController.html":{},"injectables/SellOffersService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["findone(@param('id",{"_index":277,"title":{},"body":{"controllers/BidsController.html":{},"controllers/SellOffersController.html":{},"controllers/UserController.html":{}}}],["findone(id",{"_index":256,"title":{},"body":{"controllers/BidsController.html":{},"injectables/BidsService.html":{},"controllers/SellOffersController.html":{},"injectables/SellOffersService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["finds",{"_index":302,"title":{},"body":{"injectables/BidsService.html":{}}}],["finisauction",{"_index":414,"title":{},"body":{"injectables/Client.html":{},"interfaces/FinishAuctionInput.html":{},"interfaces/Window.html":{}}}],["finish",{"_index":743,"title":{},"body":{"injectables/SellOffersService.html":{},"miscellaneous/variables.html":{}}}],["finishauction",{"_index":320,"title":{},"body":{"injectables/BidsService.html":{},"injectables/Client.html":{},"interfaces/FinishAuctionInput.html":{},"injectables/SellOffersService.html":{},"interfaces/Window.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["finishauction(bidderkey",{"_index":411,"title":{},"body":{"injectables/Client.html":{}}}],["finishauction(seller",{"_index":337,"title":{},"body":{"injectables/BidsService.html":{},"injectables/SellOffersService.html":{}}}],["finishauctioninput",{"_index":389,"title":{"interfaces/FinishAuctionInput.html":{}},"body":{"injectables/Client.html":{},"interfaces/FinishAuctionInput.html":{},"interfaces/Window.html":{},"coverage.html":{}}}],["finishauctiontx",{"_index":526,"title":{},"body":{"classes/CloseDto.html":{},"classes/CreateSellOfferDto.html":{},"classes/SellOffer.html":{},"classes/UpdatePrice.html":{}}}],["found",{"_index":333,"title":{},"body":{"injectables/BidsService.html":{}}}],["framework",{"_index":899,"title":{},"body":{"index.html":{}}}],["function",{"_index":851,"title":{},"body":{"coverage.html":{}}}],["functions",{"_index":893,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["garcefully",{"_index":574,"title":{},"body":{"injectables/Db.html":{}}}],["get(':id",{"_index":257,"title":{},"body":{"controllers/BidsController.html":{},"controllers/SellOffersController.html":{},"controllers/UserController.html":{}}}],["get('me",{"_index":253,"title":{},"body":{"controllers/BidsController.html":{}}}],["get('tokens",{"_index":643,"title":{},"body":{"controllers/NftsController.html":{}}}],["getbid",{"_index":561,"title":{},"body":{"injectables/Db.html":{}}}],["getbid(id",{"_index":580,"title":{},"body":{"injectables/Db.html":{}}}],["getnfts",{"_index":371,"title":{},"body":{"injectables/Client.html":{}}}],["getnfts(useraddr",{"_index":418,"title":{},"body":{"injectables/Client.html":{},"interfaces/FinishAuctionInput.html":{},"interfaces/Window.html":{}}}],["gets",{"_index":420,"title":{},"body":{"injectables/Client.html":{},"interfaces/FinishAuctionInput.html":{},"interfaces/Window.html":{}}}],["getselloffer",{"_index":562,"title":{},"body":{"injectables/Db.html":{}}}],["getselloffer(id",{"_index":582,"title":{},"body":{"injectables/Db.html":{}}}],["getting",{"_index":895,"title":{"index.html":{}},"body":{}}],["gettokens",{"_index":372,"title":{},"body":{"injectables/Client.html":{}}}],["gettokens(useraddr",{"_index":425,"title":{},"body":{"injectables/Client.html":{},"interfaces/FinishAuctionInput.html":{},"interfaces/Window.html":{}}}],["getuser",{"_index":563,"title":{},"body":{"injectables/Db.html":{}}}],["getuser(id",{"_index":584,"title":{},"body":{"injectables/Db.html":{}}}],["given",{"_index":384,"title":{},"body":{"injectables/Client.html":{},"interfaces/FinishAuctionInput.html":{},"interfaces/Window.html":{}}}],["global",{"_index":450,"title":{},"body":{"injectables/Client.html":{},"modules/ClientsModule.html":{},"modules/DbModule.html":{},"interfaces/FinishAuctionInput.html":{},"interfaces/Window.html":{}}}],["grow",{"_index":929,"title":{},"body":{"index.html":{}}}],["guard",{"_index":83,"title":{"guards/AuthGuard.html":{}},"body":{"guards/AuthGuard.html":{},"coverage.html":{},"overview.html":{}}}],["guards",{"_index":85,"title":{},"body":{"guards/AuthGuard.html":{}}}],["handleerr",{"_index":170,"title":{},"body":{"injectables/AuthService.html":{},"injectables/BidsService.html":{},"classes/DeletedEntity.html":{},"classes/EntityNotFound.html":{},"classes/InvalidId.html":{},"injectables/NftsService.html":{},"classes/NotOwner.html":{},"injectables/SellOffersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["handleerr(err",{"_index":182,"title":{},"body":{"injectables/AuthService.html":{},"injectables/BidsService.html":{},"injectables/NftsService.html":{},"injectables/SellOffersService.html":{}}}],["hashmessage",{"_index":458,"title":{},"body":{"injectables/Client.html":{},"interfaces/FinishAuctionInput.html":{},"interfaces/Window.html":{}}}],["helper",{"_index":980,"title":{},"body":{"miscellaneous/variables.html":{}}}],["here",{"_index":938,"title":{},"body":{"index.html":{}}}],["highest",{"_index":298,"title":{},"body":{"injectables/BidsService.html":{},"controllers/SellOffersController.html":{}}}],["highestbidder",{"_index":527,"title":{},"body":{"classes/CloseDto.html":{},"classes/CreateSellOfferDto.html":{},"classes/SellOffer.html":{},"classes/UpdatePrice.html":{}}}],["httpexception",{"_index":164,"title":{},"body":{"injectables/AuthService.html":{},"injectables/BidsService.html":{},"classes/DeletedEntity.html":{},"classes/EntityNotFound.html":{},"classes/InvalidId.html":{},"classes/NotOwner.html":{},"injectables/SellOffersService.html":{},"miscellaneous/variables.html":{}}}],["httpexception('failed",{"_index":175,"title":{},"body":{"injectables/AuthService.html":{}}}],["httpexception('user",{"_index":332,"title":{},"body":{"injectables/BidsService.html":{}}}],["httpexception(err.message",{"_index":622,"title":{},"body":{"classes/DeletedEntity.html":{},"classes/EntityNotFound.html":{},"classes/InvalidId.html":{},"classes/NotOwner.html":{},"miscellaneous/variables.html":{}}}],["https://nestjs.com",{"_index":945,"title":{},"body":{"index.html":{}}}],["httpstatus",{"_index":165,"title":{},"body":{"injectables/AuthService.html":{},"injectables/BidsService.html":{},"classes/DeletedEntity.html":{},"classes/EntityNotFound.html":{},"classes/InvalidId.html":{},"classes/NotOwner.html":{},"injectables/SellOffersService.html":{}}}],["httpstatus.bad_request",{"_index":623,"title":{},"body":{"classes/DeletedEntity.html":{},"classes/EntityNotFound.html":{},"classes/InvalidId.html":{},"classes/NotOwner.html":{},"miscellaneous/variables.html":{}}}],["httpstatus.conflict",{"_index":329,"title":{},"body":{"injectables/BidsService.html":{},"injectables/SellOffersService.html":{}}}],["httpstatus.forbidden",{"_index":620,"title":{},"body":{"classes/DeletedEntity.html":{},"classes/EntityNotFound.html":{},"classes/InvalidId.html":{},"classes/NotOwner.html":{}}}],["httpstatus.internal_server_error",{"_index":624,"title":{},"body":{"classes/DeletedEntity.html":{},"classes/EntityNotFound.html":{},"classes/InvalidId.html":{},"classes/NotOwner.html":{},"miscellaneous/variables.html":{}}}],["httpstatus.not_found",{"_index":334,"title":{},"body":{"injectables/BidsService.html":{},"classes/DeletedEntity.html":{},"classes/EntityNotFound.html":{},"classes/InvalidId.html":{},"classes/NotOwner.html":{},"miscellaneous/variables.html":{}}}],["httpstatus.unauthorized",{"_index":176,"title":{},"body":{"injectables/AuthService.html":{}}}],["i.tostring",{"_index":492,"title":{},"body":{"injectables/Client.html":{},"interfaces/FinishAuctionInput.html":{},"interfaces/Window.html":{}}}],["id",{"_index":125,"title":{},"body":{"guards/AuthGuard.html":{},"classes/Bid.html":{},"controllers/BidsController.html":{},"injectables/BidsService.html":{},"classes/CreateBidDto.html":{},"injectables/Db.html":{},"classes/DeletedEntity.html":{},"classes/EntityNotFound.html":{},"classes/InvalidId.html":{},"controllers/NftsController.html":{},"classes/NotOwner.html":{},"controllers/SellOffersController.html":{},"injectables/SellOffersService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["identifier",{"_index":830,"title":{},"body":{"coverage.html":{}}}],["ids",{"_index":421,"title":{},"body":{"injectables/Client.html":{},"interfaces/FinishAuctionInput.html":{},"controllers/NftsController.html":{},"injectables/NftsService.html":{},"interfaces/Window.html":{}}}],["implements",{"_index":126,"title":{},"body":{"guards/AuthGuard.html":{}}}],["import",{"_index":27,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/Bid.html":{},"controllers/BidsController.html":{},"modules/BidsModule.html":{},"injectables/BidsService.html":{},"injectables/Client.html":{},"modules/ClientsModule.html":{},"classes/CloseDto.html":{},"classes/CreateBidDto.html":{},"classes/CreateSellOfferDto.html":{},"classes/CreateTokenDto.html":{},"classes/CreateUserDto.html":{},"injectables/Db.html":{},"modules/DbModule.html":{},"classes/DeletedEntity.html":{},"classes/EntityNotFound.html":{},"interfaces/FinishAuctionInput.html":{},"classes/InvalidId.html":{},"controllers/NftsController.html":{},"modules/NftsModule.html":{},"injectables/NftsService.html":{},"classes/NotOwner.html":{},"classes/SellOffer.html":{},"controllers/SellOffersController.html":{},"modules/SellOffersModule.html":{},"injectables/SellOffersService.html":{},"classes/UpdatePrice.html":{},"classes/User.html":{},"classes/UserAuth.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"interfaces/Window.html":{}}}],["imports",{"_index":26,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/BidsModule.html":{},"modules/SellOffersModule.html":{}}}],["index",{"_index":49,"title":{"index.html":{}},"body":{"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"classes/Bid.html":{},"controllers/BidsController.html":{},"injectables/BidsService.html":{},"injectables/Client.html":{},"classes/CloseDto.html":{},"classes/CreateBidDto.html":{},"classes/CreateSellOfferDto.html":{},"classes/CreateTokenDto.html":{},"classes/CreateUserDto.html":{},"injectables/Db.html":{},"interfaces/EntityType.html":{},"interfaces/FinishAuctionInput.html":{},"controllers/NftsController.html":{},"injectables/NftsService.html":{},"classes/SellOffer.html":{},"controllers/SellOffersController.html":{},"injectables/SellOffersService.html":{},"classes/UpdatePrice.html":{},"classes/User.html":{},"classes/UserAuth.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"interfaces/Window.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":22,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/Bid.html":{},"controllers/BidsController.html":{},"modules/BidsModule.html":{},"injectables/BidsService.html":{},"injectables/Client.html":{},"modules/ClientsModule.html":{},"classes/CloseDto.html":{},"classes/CreateBidDto.html":{},"classes/CreateSellOfferDto.html":{},"classes/CreateTokenDto.html":{},"classes/CreateUserDto.html":{},"injectables/Db.html":{},"modules/DbModule.html":{},"classes/DeletedEntity.html":{},"classes/EntityNotFound.html":{},"interfaces/EntityType.html":{},"interfaces/FinishAuctionInput.html":{},"classes/InvalidId.html":{},"controllers/NftsController.html":{},"modules/NftsModule.html":{},"injectables/NftsService.html":{},"classes/NotOwner.html":{},"classes/SellOffer.html":{},"controllers/SellOffersController.html":{},"modules/SellOffersModule.html":{},"injectables/SellOffersService.html":{},"classes/UpdatePrice.html":{},"classes/User.html":{},"classes/UserAuth.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"interfaces/Window.html":{}}}],["inherited",{"_index":217,"title":{},"body":{"classes/Bid.html":{},"classes/SellOffer.html":{}}}],["inject",{"_index":150,"title":{},"body":{"modules/AuthModule.html":{}}}],["injectable",{"_index":106,"title":{"injectables/AuthService.html":{},"injectables/BidsService.html":{},"injectables/Client.html":{},"injectables/Db.html":{},"injectables/NftsService.html":{},"injectables/SellOffersService.html":{},"injectables/UserService.html":{}},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/BidsService.html":{},"injectables/Client.html":{},"injectables/Db.html":{},"interfaces/FinishAuctionInput.html":{},"injectables/NftsService.html":{},"injectables/SellOffersService.html":{},"injectables/UserService.html":{},"interfaces/Window.html":{},"coverage.html":{}}}],["injectables",{"_index":153,"title":{},"body":{"injectables/AuthService.html":{},"injectables/BidsService.html":{},"injectables/Client.html":{},"injectables/Db.html":{},"injectables/NftsService.html":{},"injectables/SellOffersService.html":{},"injectables/UserService.html":{},"overview.html":{}}}],["injects",{"_index":124,"title":{},"body":{"guards/AuthGuard.html":{}}}],["inmediatly",{"_index":296,"title":{},"body":{"injectables/BidsService.html":{}}}],["input",{"_index":376,"title":{},"body":{"injectables/Client.html":{},"interfaces/FinishAuctionInput.html":{},"interfaces/Window.html":{}}}],["input.bid",{"_index":506,"title":{},"body":{"injectables/Client.html":{},"interfaces/FinishAuctionInput.html":{},"interfaces/Window.html":{}}}],["input.tokenid",{"_index":505,"title":{},"body":{"injectables/Client.html":{},"interfaces/FinishAuctionInput.html":{},"interfaces/Window.html":{}}}],["inputarr",{"_index":504,"title":{},"body":{"injectables/Client.html":{},"interfaces/FinishAuctionInput.html":{},"interfaces/Window.html":{}}}],["inputs",{"_index":386,"title":{},"body":{"injectables/Client.html":{},"interfaces/FinishAuctionInput.html":{},"interfaces/Window.html":{}}}],["inputs.bid",{"_index":466,"title":{},"body":{"injectables/Client.html":{},"interfaces/FinishAuctionInput.html":{},"interfaces/Window.html":{}}}],["inputs.tokenid",{"_index":464,"title":{},"body":{"injectables/Client.html":{},"interfaces/FinishAuctionInput.html":{},"interfaces/Window.html":{}}}],["installation",{"_index":909,"title":{},"body":{"index.html":{}}}],["installrunning",{"_index":911,"title":{},"body":{"index.html":{}}}],["instanceof",{"_index":621,"title":{},"body":{"classes/DeletedEntity.html":{},"classes/EntityNotFound.html":{},"classes/InvalidId.html":{},"classes/NotOwner.html":{},"miscellaneous/variables.html":{}}}],["instead",{"_index":639,"title":{},"body":{"controllers/NftsController.html":{}}}],["interface",{"_index":451,"title":{"interfaces/EntityType.html":{},"interfaces/FinishAuctionInput.html":{},"interfaces/Window.html":{}},"body":{"injectables/Client.html":{},"interfaces/EntityType.html":{},"interfaces/FinishAuctionInput.html":{},"interfaces/Window.html":{},"coverage.html":{}}}],["interfaces",{"_index":626,"title":{},"body":{"interfaces/EntityType.html":{},"interfaces/FinishAuctionInput.html":{},"interfaces/Window.html":{},"overview.html":{}}}],["internal",{"_index":381,"title":{},"body":{"injectables/Client.html":{},"interfaces/FinishAuctionInput.html":{},"interfaces/Window.html":{}}}],["invalidid",{"_index":596,"title":{"classes/InvalidId.html":{}},"body":{"injectables/Db.html":{},"classes/DeletedEntity.html":{},"classes/EntityNotFound.html":{},"classes/InvalidId.html":{},"classes/NotOwner.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["is_public_key",{"_index":113,"title":{},"body":{"guards/AuthGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["isint",{"_index":222,"title":{},"body":{"classes/Bid.html":{},"classes/CloseDto.html":{},"classes/CreateBidDto.html":{},"classes/CreateSellOfferDto.html":{},"classes/CreateUserDto.html":{},"classes/SellOffer.html":{},"classes/UpdatePrice.html":{},"classes/User.html":{},"classes/UserAuth.html":{}}}],["isint()@min(0",{"_index":219,"title":{},"body":{"classes/Bid.html":{},"classes/CreateBidDto.html":{},"classes/CreateSellOfferDto.html":{},"classes/SellOffer.html":{},"classes/UserAuth.html":{}}}],["isoptional",{"_index":223,"title":{},"body":{"classes/Bid.html":{},"classes/CloseDto.html":{},"classes/CreateBidDto.html":{},"classes/CreateSellOfferDto.html":{},"classes/CreateTokenDto.html":{},"classes/SellOffer.html":{},"classes/UpdatePrice.html":{}}}],["ispositive",{"_index":216,"title":{},"body":{"classes/Bid.html":{},"classes/CloseDto.html":{},"classes/CreateBidDto.html":{},"classes/CreateSellOfferDto.html":{},"classes/SellOffer.html":{},"classes/UpdatePrice.html":{}}}],["ispositive()@isoptional",{"_index":534,"title":{},"body":{"classes/CreateSellOfferDto.html":{},"classes/SellOffer.html":{}}}],["ispublic",{"_index":114,"title":{},"body":{"guards/AuthGuard.html":{},"miscellaneous/variables.html":{}}}],["isstring",{"_index":542,"title":{},"body":{"classes/CreateTokenDto.html":{},"classes/CreateUserDto.html":{},"classes/User.html":{},"classes/UserAuth.html":{}}}],["isstring()@isoptional",{"_index":540,"title":{},"body":{"classes/CreateTokenDto.html":{}}}],["issued",{"_index":162,"title":{},"body":{"injectables/AuthService.html":{}}}],["issuer",{"_index":215,"title":{},"body":{"classes/Bid.html":{},"controllers/BidsController.html":{},"classes/CreateBidDto.html":{}}}],["join",{"_index":936,"title":{},"body":{"index.html":{}}}],["js",{"_index":876,"title":{},"body":{"dependencies.html":{}}}],["js/sha256",{"_index":169,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["jwt",{"_index":75,"title":{},"body":{"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"controllers/BidsController.html":{}}}],["jwtmodule",{"_index":143,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtmodule.registerasync",{"_index":146,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtpayload",{"_index":177,"title":{},"body":{"injectables/AuthService.html":{}}}],["jwtservice",{"_index":93,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{}}}],["kamil",{"_index":942,"title":{},"body":{"index.html":{}}}],["key",{"_index":407,"title":{},"body":{"injectables/Client.html":{},"classes/CreateUserDto.html":{},"interfaces/FinishAuctionInput.html":{},"classes/User.html":{},"classes/UserAuth.html":{},"interfaces/Window.html":{}}}],["know",{"_index":434,"title":{},"body":{"injectables/Client.html":{},"interfaces/FinishAuctionInput.html":{},"interfaces/Window.html":{}}}],["last",{"_index":212,"title":{},"body":{"classes/Bid.html":{},"classes/CreateBidDto.html":{}}}],["lastbid",{"_index":350,"title":{},"body":{"injectables/BidsService.html":{}}}],["lastbid.bidamount",{"_index":363,"title":{},"body":{"injectables/BidsService.html":{}}}],["lastbid.userid",{"_index":362,"title":{},"body":{"injectables/BidsService.html":{}}}],["lastbidindex",{"_index":564,"title":{},"body":{"injectables/Db.html":{}}}],["lastsellindex",{"_index":565,"title":{},"body":{"injectables/Db.html":{}}}],["lastuserindex",{"_index":566,"title":{},"body":{"injectables/Db.html":{}}}],["legend",{"_index":4,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/BidsModule.html":{},"modules/ClientsModule.html":{},"modules/DbModule.html":{},"modules/NftsModule.html":{},"modules/SellOffersModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["length",{"_index":489,"title":{},"body":{"injectables/Client.html":{},"interfaces/FinishAuctionInput.html":{},"interfaces/Window.html":{}}}],["license",{"_index":948,"title":{},"body":{"index.html":{},"properties.html":{}}}],["licensed",{"_index":927,"title":{},"body":{"index.html":{}}}],["list",{"_index":652,"title":{},"body":{"controllers/NftsController.html":{}}}],["login",{"_index":51,"title":{},"body":{"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{}}}],["login(@body",{"_index":76,"title":{},"body":{"controllers/AuthController.html":{}}}],["login(userauth",{"_index":52,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["logs",{"_index":73,"title":{},"body":{"controllers/AuthController.html":{}}}],["marketplace",{"_index":415,"title":{},"body":{"injectables/Client.html":{},"interfaces/FinishAuctionInput.html":{},"interfaces/Window.html":{},"miscellaneous/variables.html":{}}}],["matching",{"_index":42,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/Bid.html":{},"controllers/BidsController.html":{},"modules/BidsModule.html":{},"injectables/BidsService.html":{},"injectables/Client.html":{},"modules/ClientsModule.html":{},"classes/CloseDto.html":{},"classes/CreateBidDto.html":{},"classes/CreateSellOfferDto.html":{},"classes/CreateTokenDto.html":{},"classes/CreateUserDto.html":{},"injectables/Db.html":{},"modules/DbModule.html":{},"classes/DeletedEntity.html":{},"classes/EntityNotFound.html":{},"interfaces/EntityType.html":{},"interfaces/FinishAuctionInput.html":{},"classes/InvalidId.html":{},"controllers/NftsController.html":{},"modules/NftsModule.html":{},"injectables/NftsService.html":{},"classes/NotOwner.html":{},"classes/SellOffer.html":{},"controllers/SellOffersController.html":{},"modules/SellOffersModule.html":{},"injectables/SellOffersService.html":{},"classes/UpdatePrice.html":{},"classes/User.html":{},"classes/UserAuth.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"interfaces/Window.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["metadata",{"_index":885,"title":{},"body":{"dependencies.html":{}}}],["metamask/providers",{"_index":442,"title":{},"body":{"injectables/Client.html":{},"interfaces/FinishAuctionInput.html":{},"interfaces/Window.html":{},"dependencies.html":{}}}],["metamaskinpageprovider",{"_index":441,"title":{},"body":{"injectables/Client.html":{},"interfaces/FinishAuctionInput.html":{},"interfaces/Window.html":{}}}],["method",{"_index":379,"title":{},"body":{"injectables/Client.html":{},"interfaces/FinishAuctionInput.html":{},"interfaces/Window.html":{},"miscellaneous/variables.html":{}}}],["methods",{"_index":50,"title":{},"body":{"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"controllers/BidsController.html":{},"injectables/BidsService.html":{},"injectables/Client.html":{},"injectables/Db.html":{},"controllers/NftsController.html":{},"injectables/NftsService.html":{},"controllers/SellOffersController.html":{},"injectables/SellOffersService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["min",{"_index":221,"title":{},"body":{"classes/Bid.html":{},"classes/CloseDto.html":{},"classes/CreateBidDto.html":{},"classes/CreateSellOfferDto.html":{},"classes/CreateUserDto.html":{},"classes/SellOffer.html":{},"classes/UpdatePrice.html":{},"classes/User.html":{},"classes/UserAuth.html":{}}}],["min(0",{"_index":226,"title":{},"body":{"classes/Bid.html":{},"classes/CloseDto.html":{},"classes/CreateBidDto.html":{},"classes/CreateSellOfferDto.html":{},"classes/CreateUserDto.html":{},"classes/SellOffer.html":{},"classes/UpdatePrice.html":{},"classes/User.html":{},"classes/UserAuth.html":{}}}],["minoffer",{"_index":523,"title":{},"body":{"classes/CloseDto.html":{},"classes/CreateSellOfferDto.html":{},"classes/SellOffer.html":{},"classes/UpdatePrice.html":{}}}],["mint",{"_index":373,"title":{},"body":{"injectables/Client.html":{},"interfaces/FinishAuctionInput.html":{},"interfaces/Window.html":{}}}],["mint(key",{"_index":428,"title":{},"body":{"injectables/Client.html":{},"interfaces/FinishAuctionInput.html":{},"interfaces/Window.html":{}}}],["miscellaneous",{"_index":890,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":926,"title":{},"body":{"index.html":{}}}],["mock",{"_index":635,"title":{},"body":{"controllers/NftsController.html":{}}}],["mockerc20",{"_index":431,"title":{},"body":{"injectables/Client.html":{},"interfaces/FinishAuctionInput.html":{},"controllers/NftsController.html":{},"injectables/NftsService.html":{},"interfaces/Window.html":{}}}],["mockerc721",{"_index":430,"title":{},"body":{"injectables/Client.html":{},"interfaces/FinishAuctionInput.html":{},"controllers/NftsController.html":{},"injectables/NftsService.html":{},"interfaces/Window.html":{}}}],["mode",{"_index":917,"title":{},"body":{"index.html":{}}}],["models/.../selloffer.entity.ts",{"_index":892,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["models/bids.entity",{"_index":267,"title":{},"body":{"controllers/BidsController.html":{},"injectables/BidsService.html":{},"injectables/Db.html":{}}}],["models/bids.entity.ts",{"_index":185,"title":{},"body":{"classes/Bid.html":{},"classes/CreateBidDto.html":{},"coverage.html":{}}}],["models/bids.entity.ts:11",{"_index":532,"title":{},"body":{"classes/CreateBidDto.html":{}}}],["models/bids.entity.ts:16",{"_index":214,"title":{},"body":{"classes/Bid.html":{}}}],["models/bids.entity.ts:18",{"_index":206,"title":{},"body":{"classes/Bid.html":{}}}],["models/bids.entity.ts:20",{"_index":211,"title":{},"body":{"classes/Bid.html":{}}}],["models/bids.entity.ts:22",{"_index":203,"title":{},"body":{"classes/Bid.html":{}}}],["models/bids.entity.ts:8",{"_index":533,"title":{},"body":{"classes/CreateBidDto.html":{}}}],["models/entitytype.interface",{"_index":593,"title":{},"body":{"injectables/Db.html":{}}}],["models/entitytype.interface.ts",{"_index":627,"title":{},"body":{"interfaces/EntityType.html":{},"coverage.html":{}}}],["models/selloffer.entity",{"_index":319,"title":{},"body":{"injectables/BidsService.html":{},"injectables/Db.html":{},"controllers/SellOffersController.html":{},"injectables/SellOffersService.html":{}}}],["models/selloffer.entity.ts",{"_index":515,"title":{},"body":{"classes/CloseDto.html":{},"classes/CreateSellOfferDto.html":{},"classes/SellOffer.html":{},"classes/UpdatePrice.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["models/selloffer.entity.ts:12",{"_index":537,"title":{},"body":{"classes/CreateSellOfferDto.html":{}}}],["models/selloffer.entity.ts:15",{"_index":536,"title":{},"body":{"classes/CreateSellOfferDto.html":{}}}],["models/selloffer.entity.ts:18",{"_index":535,"title":{},"body":{"classes/CreateSellOfferDto.html":{}}}],["models/selloffer.entity.ts:23",{"_index":779,"title":{},"body":{"classes/UpdatePrice.html":{}}}],["models/selloffer.entity.ts:27",{"_index":686,"title":{},"body":{"classes/SellOffer.html":{}}}],["models/selloffer.entity.ts:28",{"_index":682,"title":{},"body":{"classes/SellOffer.html":{}}}],["models/selloffer.entity.ts:29",{"_index":680,"title":{},"body":{"classes/SellOffer.html":{}}}],["models/selloffer.entity.ts:30",{"_index":683,"title":{},"body":{"classes/SellOffer.html":{}}}],["models/selloffer.entity.ts:31",{"_index":684,"title":{},"body":{"classes/SellOffer.html":{}}}],["models/selloffer.entity.ts:32",{"_index":681,"title":{},"body":{"classes/SellOffer.html":{}}}],["models/selloffer.entity.ts:33",{"_index":685,"title":{},"body":{"classes/SellOffer.html":{}}}],["models/selloffer.entity.ts:34",{"_index":679,"title":{},"body":{"classes/SellOffer.html":{}}}],["models/selloffer.entity.ts:51",{"_index":516,"title":{},"body":{"classes/CloseDto.html":{}}}],["models/token.entity",{"_index":647,"title":{},"body":{"controllers/NftsController.html":{}}}],["models/token.entity.ts",{"_index":539,"title":{},"body":{"classes/CreateTokenDto.html":{},"coverage.html":{}}}],["models/token.entity.ts:6",{"_index":541,"title":{},"body":{"classes/CreateTokenDto.html":{}}}],["models/users.entity",{"_index":65,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/Db.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["models/users.entity.ts",{"_index":544,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/User.html":{},"classes/UserAuth.html":{},"coverage.html":{}}}],["models/users.entity.ts:10",{"_index":786,"title":{},"body":{"classes/UserAuth.html":{}}}],["models/users.entity.ts:15",{"_index":547,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["models/users.entity.ts:17",{"_index":548,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["models/users.entity.ts:21",{"_index":785,"title":{},"body":{"classes/User.html":{}}}],["models/users.entity.ts:22",{"_index":782,"title":{},"body":{"classes/User.html":{}}}],["models/users.entity.ts:23",{"_index":784,"title":{},"body":{"classes/User.html":{}}}],["models/users.entity.ts:24",{"_index":781,"title":{},"body":{"classes/User.html":{}}}],["models/users.entity.ts:25",{"_index":783,"title":{},"body":{"classes/User.html":{}}}],["models/users.entity.ts:26",{"_index":780,"title":{},"body":{"classes/User.html":{}}}],["models/users.entity.ts:8",{"_index":787,"title":{},"body":{"classes/UserAuth.html":{}}}],["module",{"_index":0,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/BidsModule.html":{},"modules/ClientsModule.html":{},"modules/DbModule.html":{},"modules/NftsModule.html":{},"modules/SellOffersModule.html":{},"modules/UserModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/BidsModule.html":{},"modules/ClientsModule.html":{},"modules/DbModule.html":{},"modules/NftsModule.html":{},"modules/SellOffersModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["modules",{"_index":2,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/BidsModule.html":{},"modules/ClientsModule.html":{},"modules/DbModule.html":{},"modules/NftsModule.html":{},"modules/SellOffersModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["more",{"_index":316,"title":{},"body":{"injectables/BidsService.html":{},"index.html":{}}}],["myśliwiec",{"_index":943,"title":{},"body":{"index.html":{}}}],["name",{"_index":59,"title":{},"body":{"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"classes/Bid.html":{},"controllers/BidsController.html":{},"injectables/BidsService.html":{},"injectables/Client.html":{},"injectables/Db.html":{},"classes/DeletedEntity.html":{},"classes/EntityNotFound.html":{},"controllers/NftsController.html":{},"injectables/NftsService.html":{},"classes/NotOwner.html":{},"classes/SellOffer.html":{},"controllers/SellOffersController.html":{},"injectables/SellOffersService.html":{},"classes/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["nest",{"_index":906,"title":{},"body":{"index.html":{}}}],["nestframework",{"_index":947,"title":{},"body":{"index.html":{}}}],["nestjs/common",{"_index":28,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/BidsController.html":{},"modules/BidsModule.html":{},"injectables/BidsService.html":{},"injectables/Client.html":{},"modules/ClientsModule.html":{},"injectables/Db.html":{},"modules/DbModule.html":{},"classes/DeletedEntity.html":{},"classes/EntityNotFound.html":{},"interfaces/FinishAuctionInput.html":{},"classes/InvalidId.html":{},"controllers/NftsController.html":{},"modules/NftsModule.html":{},"injectables/NftsService.html":{},"classes/NotOwner.html":{},"controllers/SellOffersController.html":{},"modules/SellOffersModule.html":{},"injectables/SellOffersService.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"interfaces/Window.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":36,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":109,"title":{},"body":{"guards/AuthGuard.html":{},"modules/AuthModule.html":{},"dependencies.html":{}}}],["nestjs/jwt",{"_index":110,"title":{},"body":{"guards/AuthGuard.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"dependencies.html":{}}}],["nestjs/mapped",{"_index":871,"title":{},"body":{"dependencies.html":{}}}],["nestjs/platform",{"_index":873,"title":{},"body":{"dependencies.html":{}}}],["network",{"_index":457,"title":{},"body":{"injectables/Client.html":{},"interfaces/FinishAuctionInput.html":{},"interfaces/Window.html":{}}}],["new",{"_index":133,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"classes/Bid.html":{},"injectables/BidsService.html":{},"injectables/Client.html":{},"classes/CloseDto.html":{},"classes/CreateBidDto.html":{},"classes/CreateSellOfferDto.html":{},"classes/CreateUserDto.html":{},"classes/DeletedEntity.html":{},"classes/EntityNotFound.html":{},"interfaces/FinishAuctionInput.html":{},"classes/InvalidId.html":{},"classes/NotOwner.html":{},"classes/SellOffer.html":{},"injectables/SellOffersService.html":{},"classes/UpdatePrice.html":{},"classes/User.html":{},"classes/UserAuth.html":{},"injectables/UserService.html":{},"interfaces/Window.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["newselloffer",{"_index":761,"title":{},"body":{"injectables/SellOffersService.html":{}}}],["newuser",{"_index":810,"title":{},"body":{"injectables/UserService.html":{}}}],["newuser.password",{"_index":812,"title":{},"body":{"injectables/UserService.html":{}}}],["nft",{"_index":405,"title":{},"body":{"injectables/Client.html":{},"interfaces/FinishAuctionInput.html":{},"controllers/NftsController.html":{},"injectables/NftsService.html":{},"controllers/SellOffersController.html":{},"interfaces/Window.html":{},"miscellaneous/variables.html":{}}}],["nfts",{"_index":423,"title":{},"body":{"injectables/Client.html":{},"interfaces/FinishAuctionInput.html":{},"controllers/NftsController.html":{},"interfaces/Window.html":{}}}],["nfts.controller",{"_index":662,"title":{},"body":{"modules/NftsModule.html":{}}}],["nfts.service",{"_index":646,"title":{},"body":{"controllers/NftsController.html":{},"modules/NftsModule.html":{}}}],["nfts/nfts.module",{"_index":31,"title":{},"body":{"modules/AppModule.html":{}}}],["nfts/tokens",{"_index":655,"title":{},"body":{"controllers/NftsController.html":{}}}],["nftscontroller",{"_index":629,"title":{"controllers/NftsController.html":{}},"body":{"controllers/NftsController.html":{},"modules/NftsModule.html":{},"coverage.html":{}}}],["nftsmodule",{"_index":16,"title":{"modules/NftsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/NftsModule.html":{},"modules.html":{},"overview.html":{}}}],["nftsservice",{"_index":645,"title":{"injectables/NftsService.html":{}},"body":{"controllers/NftsController.html":{},"modules/NftsModule.html":{},"injectables/NftsService.html":{},"coverage.html":{},"overview.html":{}}}],["node.js",{"_index":898,"title":{},"body":{"index.html":{}}}],["non",{"_index":251,"title":{},"body":{"controllers/BidsController.html":{},"injectables/BidsService.html":{},"controllers/SellOffersController.html":{},"injectables/SellOffersService.html":{}}}],["notowner",{"_index":322,"title":{"classes/NotOwner.html":{}},"body":{"injectables/BidsService.html":{},"classes/DeletedEntity.html":{},"classes/EntityNotFound.html":{},"classes/InvalidId.html":{},"classes/NotOwner.html":{},"injectables/SellOffersService.html":{},"coverage.html":{}}}],["notowner('bid",{"_index":346,"title":{},"body":{"injectables/BidsService.html":{}}}],["notowner('nft",{"_index":760,"title":{},"body":{"injectables/SellOffersService.html":{}}}],["notowner('sell",{"_index":769,"title":{},"body":{"injectables/SellOffersService.html":{}}}],["now",{"_index":775,"title":{},"body":{"injectables/SellOffersService.html":{}}}],["npm",{"_index":910,"title":{},"body":{"index.html":{}}}],["null",{"_index":343,"title":{},"body":{"injectables/BidsService.html":{},"injectables/UserService.html":{}}}],["number",{"_index":202,"title":{},"body":{"classes/Bid.html":{},"injectables/BidsService.html":{},"classes/CloseDto.html":{},"classes/CreateBidDto.html":{},"classes/CreateSellOfferDto.html":{},"classes/CreateUserDto.html":{},"injectables/Db.html":{},"classes/DeletedEntity.html":{},"classes/EntityNotFound.html":{},"classes/InvalidId.html":{},"injectables/NftsService.html":{},"classes/NotOwner.html":{},"classes/SellOffer.html":{},"injectables/SellOffersService.html":{},"classes/UpdatePrice.html":{},"classes/User.html":{},"classes/UserAuth.html":{},"injectables/UserService.html":{}}}],["object",{"_index":225,"title":{},"body":{"classes/Bid.html":{},"classes/CreateBidDto.html":{}}}],["object.assign(this",{"_index":233,"title":{},"body":{"classes/Bid.html":{},"classes/CloseDto.html":{},"classes/CreateBidDto.html":{},"classes/CreateSellOfferDto.html":{},"classes/CreateUserDto.html":{},"classes/SellOffer.html":{},"classes/UpdatePrice.html":{},"classes/User.html":{},"classes/UserAuth.html":{}}}],["offer",{"_index":190,"title":{},"body":{"classes/Bid.html":{},"injectables/BidsService.html":{},"classes/CreateBidDto.html":{},"controllers/SellOffersController.html":{},"injectables/SellOffersService.html":{},"miscellaneous/variables.html":{}}}],["offer.auctionstate",{"_index":325,"title":{},"body":{"injectables/BidsService.html":{},"injectables/SellOffersService.html":{},"miscellaneous/variables.html":{}}}],["offer.currentbid",{"_index":348,"title":{},"body":{"injectables/BidsService.html":{},"miscellaneous/variables.html":{}}}],["offer.finishauctiontx",{"_index":978,"title":{},"body":{"miscellaneous/variables.html":{}}}],["offer.highestbidder",{"_index":360,"title":{},"body":{"injectables/BidsService.html":{}}}],["offer.minoffer",{"_index":361,"title":{},"body":{"injectables/BidsService.html":{}}}],["offer.price",{"_index":964,"title":{},"body":{"miscellaneous/variables.html":{}}}],["offer.tokenid.tostring",{"_index":968,"title":{},"body":{"miscellaneous/variables.html":{}}}],["offer.userid",{"_index":776,"title":{},"body":{"injectables/SellOffersService.html":{}}}],["offerid",{"_index":739,"title":{},"body":{"injectables/SellOffersService.html":{}}}],["offers",{"_index":706,"title":{},"body":{"controllers/SellOffersController.html":{}}}],["onauction",{"_index":519,"title":{},"body":{"classes/CloseDto.html":{},"classes/CreateSellOfferDto.html":{},"classes/SellOffer.html":{},"classes/UpdatePrice.html":{},"miscellaneous/enumerations.html":{}}}],["one",{"_index":311,"title":{},"body":{"injectables/BidsService.html":{}}}],["ongoing",{"_index":265,"title":{},"body":{"controllers/BidsController.html":{},"injectables/BidsService.html":{}}}],["onsale",{"_index":518,"title":{},"body":{"classes/CloseDto.html":{},"classes/CreateSellOfferDto.html":{},"classes/SellOffer.html":{},"classes/UpdatePrice.html":{},"miscellaneous/enumerations.html":{}}}],["open",{"_index":756,"title":{},"body":{"injectables/SellOffersService.html":{},"index.html":{}}}],["optional",{"_index":61,"title":{},"body":{"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"classes/Bid.html":{},"controllers/BidsController.html":{},"injectables/BidsService.html":{},"injectables/Client.html":{},"classes/CreateSellOfferDto.html":{},"classes/CreateTokenDto.html":{},"injectables/Db.html":{},"classes/DeletedEntity.html":{},"classes/EntityNotFound.html":{},"interfaces/EntityType.html":{},"controllers/NftsController.html":{},"injectables/NftsService.html":{},"classes/NotOwner.html":{},"classes/SellOffer.html":{},"controllers/SellOffersController.html":{},"injectables/SellOffersService.html":{},"classes/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"interfaces/Window.html":{}}}],["otherwise",{"_index":746,"title":{},"body":{"injectables/SellOffersService.html":{}}}],["out",{"_index":21,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/BidsModule.html":{},"modules/ClientsModule.html":{},"modules/DbModule.html":{},"modules/NftsModule.html":{},"modules/SellOffersModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["overview",{"_index":952,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["owned",{"_index":304,"title":{},"body":{"injectables/BidsService.html":{},"injectables/Client.html":{},"interfaces/FinishAuctionInput.html":{},"controllers/NftsController.html":{},"injectables/NftsService.html":{},"interfaces/Window.html":{}}}],["owner",{"_index":435,"title":{},"body":{"injectables/Client.html":{},"classes/DeletedEntity.html":{},"classes/EntityNotFound.html":{},"interfaces/FinishAuctionInput.html":{},"classes/InvalidId.html":{},"classes/NotOwner.html":{},"interfaces/Window.html":{}}}],["ownerof",{"_index":374,"title":{},"body":{"injectables/Client.html":{},"interfaces/FinishAuctionInput.html":{},"interfaces/Window.html":{}}}],["ownerof(tokenid",{"_index":432,"title":{},"body":{"injectables/Client.html":{},"interfaces/FinishAuctionInput.html":{},"interfaces/Window.html":{}}}],["owneroftoken",{"_index":757,"title":{},"body":{"injectables/SellOffersService.html":{}}}],["package",{"_index":866,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["param",{"_index":266,"title":{},"body":{"controllers/BidsController.html":{},"controllers/SellOffersController.html":{},"controllers/UserController.html":{}}}],["param('id",{"_index":721,"title":{},"body":{"controllers/SellOffersController.html":{}}}],["parameters",{"_index":58,"title":{},"body":{"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"classes/Bid.html":{},"controllers/BidsController.html":{},"injectables/BidsService.html":{},"injectables/Client.html":{},"injectables/Db.html":{},"classes/DeletedEntity.html":{},"classes/EntityNotFound.html":{},"controllers/NftsController.html":{},"injectables/NftsService.html":{},"classes/NotOwner.html":{},"classes/SellOffer.html":{},"controllers/SellOffersController.html":{},"injectables/SellOffersService.html":{},"classes/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["parseint(req.user.userid",{"_index":725,"title":{},"body":{"controllers/SellOffersController.html":{}}}],["password",{"_index":546,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/User.html":{},"classes/UserAuth.html":{},"injectables/UserService.html":{}}}],["patch",{"_index":713,"title":{},"body":{"controllers/SellOffersController.html":{}}}],["patch('price/:id",{"_index":711,"title":{},"body":{"controllers/SellOffersController.html":{}}}],["payload",{"_index":134,"title":{},"body":{"guards/AuthGuard.html":{}}}],["place",{"_index":297,"title":{},"body":{"injectables/BidsService.html":{}}}],["please",{"_index":937,"title":{},"body":{"index.html":{}}}],["possible",{"_index":577,"title":{},"body":{"injectables/Db.html":{}}}],["post",{"_index":64,"title":{},"body":{"controllers/AuthController.html":{},"controllers/BidsController.html":{},"controllers/NftsController.html":{},"controllers/SellOffersController.html":{},"controllers/UserController.html":{}}}],["post('cancel",{"_index":695,"title":{},"body":{"controllers/SellOffersController.html":{}}}],["post('close",{"_index":699,"title":{},"body":{"controllers/SellOffersController.html":{}}}],["prefix",{"_index":47,"title":{},"body":{"controllers/AuthController.html":{},"controllers/BidsController.html":{},"controllers/NftsController.html":{},"controllers/SellOffersController.html":{},"controllers/UserController.html":{}}}],["present",{"_index":638,"title":{},"body":{"controllers/NftsController.html":{},"injectables/NftsService.html":{},"controllers/SellOffersController.html":{},"injectables/SellOffersService.html":{}}}],["previous",{"_index":315,"title":{},"body":{"injectables/BidsService.html":{}}}],["price",{"_index":522,"title":{},"body":{"classes/CloseDto.html":{},"classes/CreateSellOfferDto.html":{},"classes/SellOffer.html":{},"controllers/SellOffersController.html":{},"injectables/SellOffersService.html":{},"classes/UpdatePrice.html":{}}}],["private",{"_index":87,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/BidsService.html":{},"injectables/Client.html":{},"injectables/Db.html":{},"interfaces/FinishAuctionInput.html":{},"injectables/NftsService.html":{},"injectables/SellOffersService.html":{},"interfaces/Window.html":{}}}],["privatekey",{"_index":387,"title":{},"body":{"injectables/Client.html":{},"interfaces/FinishAuctionInput.html":{},"interfaces/Window.html":{}}}],["process.env.client_key",{"_index":473,"title":{},"body":{"injectables/Client.html":{},"interfaces/FinishAuctionInput.html":{},"interfaces/Window.html":{}}}],["process.env.erc20_contract",{"_index":463,"title":{},"body":{"injectables/Client.html":{},"interfaces/FinishAuctionInput.html":{},"interfaces/Window.html":{}}}],["process.env.erc721_contract",{"_index":462,"title":{},"body":{"injectables/Client.html":{},"interfaces/FinishAuctionInput.html":{},"interfaces/Window.html":{}}}],["process.env.finish_contract",{"_index":508,"title":{},"body":{"injectables/Client.html":{},"interfaces/FinishAuctionInput.html":{},"interfaces/Window.html":{},"miscellaneous/variables.html":{}}}],["production",{"_index":919,"title":{},"body":{"index.html":{}}}],["progressive",{"_index":897,"title":{},"body":{"index.html":{}}}],["project",{"_index":928,"title":{},"body":{"index.html":{}}}],["promise",{"_index":105,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/Client.html":{},"interfaces/FinishAuctionInput.html":{},"injectables/SellOffersService.html":{},"interfaces/Window.html":{}}}],["promise.all([approvetoken",{"_index":975,"title":{},"body":{"miscellaneous/variables.html":{}}}],["promise.all(promises",{"_index":496,"title":{},"body":{"injectables/Client.html":{},"interfaces/FinishAuctionInput.html":{},"interfaces/Window.html":{}}}],["promises",{"_index":487,"title":{},"body":{"injectables/Client.html":{},"interfaces/FinishAuctionInput.html":{},"interfaces/Window.html":{}}}],["properties",{"_index":195,"title":{"properties.html":{}},"body":{"classes/Bid.html":{},"classes/CloseDto.html":{},"classes/CreateBidDto.html":{},"classes/CreateSellOfferDto.html":{},"classes/CreateTokenDto.html":{},"classes/CreateUserDto.html":{},"injectables/Db.html":{},"interfaces/EntityType.html":{},"interfaces/FinishAuctionInput.html":{},"classes/SellOffer.html":{},"classes/UpdatePrice.html":{},"classes/User.html":{},"classes/UserAuth.html":{},"interfaces/Window.html":{},"properties.html":{}}}],["property",{"_index":637,"title":{},"body":{"controllers/NftsController.html":{}}}],["provide",{"_index":151,"title":{},"body":{"modules/AuthModule.html":{}}}],["provided",{"_index":303,"title":{},"body":{"injectables/BidsService.html":{}}}],["providers",{"_index":7,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/BidsModule.html":{},"modules/ClientsModule.html":{},"modules/DbModule.html":{},"modules/NftsModule.html":{},"modules/SellOffersModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["public",{"_index":68,"title":{},"body":{"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"controllers/UserController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["public()@post",{"_index":55,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UserController.html":{}}}],["queried",{"_index":573,"title":{},"body":{"injectables/Db.html":{}}}],["query",{"_index":576,"title":{},"body":{"injectables/Db.html":{}}}],["read",{"_index":398,"title":{},"body":{"injectables/Client.html":{},"interfaces/FinishAuctionInput.html":{},"interfaces/Window.html":{},"index.html":{}}}],["readonly",{"_index":72,"title":{},"body":{"controllers/AuthController.html":{},"controllers/BidsController.html":{},"controllers/NftsController.html":{},"controllers/SellOffersController.html":{},"controllers/UserController.html":{}}}],["receipt",{"_index":446,"title":{},"body":{"injectables/Client.html":{},"interfaces/FinishAuctionInput.html":{},"interfaces/Window.html":{}}}],["reflect",{"_index":884,"title":{},"body":{"dependencies.html":{}}}],["reflector",{"_index":94,"title":{},"body":{"guards/AuthGuard.html":{}}}],["remove",{"_index":244,"title":{},"body":{"controllers/BidsController.html":{},"injectables/BidsService.html":{},"controllers/SellOffersController.html":{},"injectables/SellOffersService.html":{}}}],["remove(@param('id",{"_index":279,"title":{},"body":{"controllers/BidsController.html":{},"controllers/SellOffersController.html":{}}}],["remove(id",{"_index":261,"title":{},"body":{"controllers/BidsController.html":{},"controllers/SellOffersController.html":{}}}],["remove(user",{"_index":307,"title":{},"body":{"injectables/BidsService.html":{}}}],["remove(userid",{"_index":751,"title":{},"body":{"injectables/SellOffersService.html":{}}}],["removes",{"_index":309,"title":{},"body":{"injectables/BidsService.html":{},"controllers/SellOffersController.html":{},"injectables/SellOffersService.html":{}}}],["repository",{"_index":908,"title":{},"body":{"index.html":{}}}],["represents",{"_index":597,"title":{},"body":{"injectables/Db.html":{}}}],["req",{"_index":246,"title":{},"body":{"controllers/BidsController.html":{},"controllers/NftsController.html":{},"controllers/SellOffersController.html":{}}}],["req.user.userid",{"_index":273,"title":{},"body":{"controllers/BidsController.html":{},"controllers/SellOffersController.html":{}}}],["request",{"_index":97,"title":{},"body":{"guards/AuthGuard.html":{},"classes/Bid.html":{},"classes/CreateBidDto.html":{},"controllers/NftsController.html":{}}}],["request.headers.authorization?.split",{"_index":137,"title":{},"body":{"guards/AuthGuard.html":{}}}],["request['user",{"_index":136,"title":{},"body":{"guards/AuthGuard.html":{}}}],["res",{"_index":478,"title":{},"body":{"injectables/Client.html":{},"interfaces/FinishAuctionInput.html":{},"injectables/NftsService.html":{},"injectables/SellOffersService.html":{},"interfaces/Window.html":{}}}],["reset",{"_index":20,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/BidsModule.html":{},"modules/ClientsModule.html":{},"modules/DbModule.html":{},"modules/NftsModule.html":{},"modules/SellOffersModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["response",{"_index":671,"title":{},"body":{"injectables/NftsService.html":{}}}],["restore",{"_index":313,"title":{},"body":{"injectables/BidsService.html":{}}}],["results",{"_index":41,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/Bid.html":{},"controllers/BidsController.html":{},"modules/BidsModule.html":{},"injectables/BidsService.html":{},"injectables/Client.html":{},"modules/ClientsModule.html":{},"classes/CloseDto.html":{},"classes/CreateBidDto.html":{},"classes/CreateSellOfferDto.html":{},"classes/CreateTokenDto.html":{},"classes/CreateUserDto.html":{},"injectables/Db.html":{},"modules/DbModule.html":{},"classes/DeletedEntity.html":{},"classes/EntityNotFound.html":{},"interfaces/EntityType.html":{},"interfaces/FinishAuctionInput.html":{},"classes/InvalidId.html":{},"controllers/NftsController.html":{},"modules/NftsModule.html":{},"injectables/NftsService.html":{},"classes/NotOwner.html":{},"classes/SellOffer.html":{},"controllers/SellOffersController.html":{},"modules/SellOffersModule.html":{},"injectables/SellOffersService.html":{},"classes/UpdatePrice.html":{},"classes/User.html":{},"classes/UserAuth.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"interfaces/Window.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":78,"title":{},"body":{"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"controllers/BidsController.html":{},"injectables/BidsService.html":{},"injectables/Client.html":{},"injectables/Db.html":{},"interfaces/FinishAuctionInput.html":{},"controllers/NftsController.html":{},"injectables/NftsService.html":{},"controllers/SellOffersController.html":{},"injectables/SellOffersService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"interfaces/Window.html":{}}}],["returns",{"_index":62,"title":{},"body":{"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"controllers/BidsController.html":{},"injectables/BidsService.html":{},"injectables/Client.html":{},"injectables/Db.html":{},"controllers/NftsController.html":{},"injectables/NftsService.html":{},"controllers/SellOffersController.html":{},"injectables/SellOffersService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["run",{"_index":914,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":887,"title":{},"body":{"dependencies.html":{}}}],["safely",{"_index":572,"title":{},"body":{"injectables/Db.html":{}}}],["sale",{"_index":192,"title":{},"body":{"classes/Bid.html":{},"injectables/BidsService.html":{},"classes/CreateBidDto.html":{},"controllers/SellOffersController.html":{},"injectables/SellOffersService.html":{}}}],["scalable",{"_index":902,"title":{},"body":{"index.html":{}}}],["sdk",{"_index":470,"title":{},"body":{"injectables/Client.html":{},"interfaces/FinishAuctionInput.html":{},"interfaces/Window.html":{}}}],["sdk.getcontract(contractaddr",{"_index":474,"title":{},"body":{"injectables/Client.html":{},"interfaces/FinishAuctionInput.html":{},"interfaces/Window.html":{}}}],["secret",{"_index":148,"title":{},"body":{"modules/AuthModule.html":{}}}],["secretkey",{"_index":472,"title":{},"body":{"injectables/Client.html":{},"interfaces/FinishAuctionInput.html":{},"interfaces/Window.html":{}}}],["sell",{"_index":227,"title":{},"body":{"classes/Bid.html":{},"injectables/BidsService.html":{},"classes/CreateBidDto.html":{},"controllers/SellOffersController.html":{},"miscellaneous/variables.html":{}}}],["seller",{"_index":335,"title":{},"body":{"injectables/BidsService.html":{},"injectables/Client.html":{},"interfaces/FinishAuctionInput.html":{},"injectables/SellOffersService.html":{},"interfaces/Window.html":{},"miscellaneous/variables.html":{}}}],["seller.userkey",{"_index":973,"title":{},"body":{"miscellaneous/variables.html":{}}}],["sellerkey",{"_index":412,"title":{},"body":{"injectables/Client.html":{},"interfaces/FinishAuctionInput.html":{},"interfaces/Window.html":{}}}],["sellersignature",{"_index":501,"title":{},"body":{"injectables/Client.html":{},"interfaces/FinishAuctionInput.html":{},"interfaces/Window.html":{}}}],["sellersignature.signature",{"_index":507,"title":{},"body":{"injectables/Client.html":{},"interfaces/FinishAuctionInput.html":{},"interfaces/Window.html":{}}}],["selloffer",{"_index":310,"title":{"classes/SellOffer.html":{}},"body":{"injectables/BidsService.html":{},"classes/CloseDto.html":{},"classes/CreateSellOfferDto.html":{},"injectables/Db.html":{},"classes/SellOffer.html":{},"controllers/SellOffersController.html":{},"injectables/SellOffersService.html":{},"classes/UpdatePrice.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["selloffer(createsellofferdto",{"_index":762,"title":{},"body":{"injectables/SellOffersService.html":{}}}],["selloffer.auctionstate",{"_index":770,"title":{},"body":{"injectables/SellOffersService.html":{}}}],["selloffer.controller",{"_index":734,"title":{},"body":{"modules/SellOffersModule.html":{}}}],["selloffer.deletedat",{"_index":766,"title":{},"body":{"injectables/SellOffersService.html":{}}}],["selloffer.price",{"_index":772,"title":{},"body":{"injectables/SellOffersService.html":{}}}],["selloffer.service",{"_index":716,"title":{},"body":{"controllers/SellOffersController.html":{},"modules/SellOffersModule.html":{}}}],["selloffer.userid",{"_index":767,"title":{},"body":{"injectables/SellOffersService.html":{}}}],["sellofferid",{"_index":200,"title":{},"body":{"classes/Bid.html":{},"classes/CloseDto.html":{},"classes/CreateBidDto.html":{},"classes/CreateSellOfferDto.html":{},"classes/SellOffer.html":{},"classes/UpdatePrice.html":{}}}],["selloffers",{"_index":557,"title":{},"body":{"injectables/Db.html":{},"controllers/SellOffersController.html":{}}}],["selloffers/close",{"_index":701,"title":{},"body":{"controllers/SellOffersController.html":{}}}],["selloffers/selloffer.module",{"_index":29,"title":{},"body":{"modules/AppModule.html":{}}}],["sellofferscontroller",{"_index":690,"title":{"controllers/SellOffersController.html":{}},"body":{"controllers/SellOffersController.html":{},"modules/SellOffersModule.html":{},"coverage.html":{}}}],["selloffersmodule",{"_index":17,"title":{"modules/SellOffersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/SellOffersModule.html":{},"modules.html":{},"overview.html":{}}}],["selloffersservice",{"_index":715,"title":{"injectables/SellOffersService.html":{}},"body":{"controllers/SellOffersController.html":{},"modules/SellOffersModule.html":{},"injectables/SellOffersService.html":{},"coverage.html":{},"overview.html":{}}}],["sepolia",{"_index":439,"title":{},"body":{"injectables/Client.html":{},"interfaces/FinishAuctionInput.html":{},"interfaces/Window.html":{}}}],["server",{"_index":903,"title":{},"body":{"index.html":{}}}],["service",{"_index":312,"title":{},"body":{"injectables/BidsService.html":{}}}],["services",{"_index":293,"title":{},"body":{"injectables/BidsService.html":{}}}],["setmetadata",{"_index":108,"title":{},"body":{"guards/AuthGuard.html":{}}}],["setmetadata(is_public_key",{"_index":115,"title":{},"body":{"guards/AuthGuard.html":{},"miscellaneous/variables.html":{}}}],["sha256",{"_index":167,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["sha256(createuserdto.password).tostring",{"_index":813,"title":{},"body":{"injectables/UserService.html":{}}}],["sha256(userauth.password).tostring",{"_index":173,"title":{},"body":{"injectables/AuthService.html":{}}}],["shared/clients/clients.module",{"_index":32,"title":{},"body":{"modules/AppModule.html":{}}}],["shared/db/db.module",{"_index":33,"title":{},"body":{"modules/AppModule.html":{}}}],["side",{"_index":904,"title":{},"body":{"index.html":{}}}],["signature",{"_index":391,"title":{},"body":{"injectables/Client.html":{},"interfaces/FinishAuctionInput.html":{},"interfaces/Window.html":{}}}],["signedmsg",{"_index":467,"title":{},"body":{"injectables/Client.html":{},"interfaces/FinishAuctionInput.html":{},"interfaces/Window.html":{}}}],["single",{"_index":260,"title":{},"body":{"controllers/BidsController.html":{},"controllers/SellOffersController.html":{}}}],["smart",{"_index":455,"title":{},"body":{"injectables/Client.html":{},"interfaces/FinishAuctionInput.html":{},"interfaces/Window.html":{}}}],["soft",{"_index":209,"title":{},"body":{"classes/Bid.html":{},"classes/CreateBidDto.html":{}}}],["sort((b1",{"_index":356,"title":{},"body":{"injectables/BidsService.html":{}}}],["source",{"_index":23,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/Bid.html":{},"controllers/BidsController.html":{},"modules/BidsModule.html":{},"injectables/BidsService.html":{},"injectables/Client.html":{},"modules/ClientsModule.html":{},"classes/CloseDto.html":{},"classes/CreateBidDto.html":{},"classes/CreateSellOfferDto.html":{},"classes/CreateTokenDto.html":{},"classes/CreateUserDto.html":{},"injectables/Db.html":{},"modules/DbModule.html":{},"classes/DeletedEntity.html":{},"classes/EntityNotFound.html":{},"interfaces/EntityType.html":{},"interfaces/FinishAuctionInput.html":{},"classes/InvalidId.html":{},"controllers/NftsController.html":{},"modules/NftsModule.html":{},"injectables/NftsService.html":{},"classes/NotOwner.html":{},"classes/SellOffer.html":{},"controllers/SellOffersController.html":{},"modules/SellOffersModule.html":{},"injectables/SellOffersService.html":{},"classes/UpdatePrice.html":{},"classes/User.html":{},"classes/UserAuth.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"interfaces/Window.html":{},"index.html":{}}}],["sponsors",{"_index":931,"title":{},"body":{"index.html":{}}}],["src/.../auth.guard.ts",{"_index":963,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../errors.ts",{"_index":962,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../main.ts",{"_index":894,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../tools.ts",{"_index":961,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/app.module.ts",{"_index":25,"title":{},"body":{"modules/AppModule.html":{}}}],["src/auth/auth.controller.ts",{"_index":46,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/auth/auth.controller.ts:12",{"_index":57,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.guard",{"_index":796,"title":{},"body":{"controllers/UserController.html":{}}}],["src/auth/auth.guard.ts",{"_index":86,"title":{},"body":{"guards/AuthGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/auth/auth.guard.ts:20",{"_index":95,"title":{},"body":{"guards/AuthGuard.html":{}}}],["src/auth/auth.guard.ts:23",{"_index":103,"title":{},"body":{"guards/AuthGuard.html":{}}}],["src/auth/auth.guard.ts:46",{"_index":98,"title":{},"body":{"guards/AuthGuard.html":{}}}],["src/auth/auth.module.ts",{"_index":141,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/auth.service.ts",{"_index":154,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/auth/auth.service.ts:12",{"_index":158,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:9",{"_index":157,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/bids/bids.controller.ts",{"_index":238,"title":{},"body":{"controllers/BidsController.html":{},"coverage.html":{}}}],["src/bids/bids.controller.ts:17",{"_index":247,"title":{},"body":{"controllers/BidsController.html":{}}}],["src/bids/bids.controller.ts:27",{"_index":249,"title":{},"body":{"controllers/BidsController.html":{}}}],["src/bids/bids.controller.ts:33",{"_index":254,"title":{},"body":{"controllers/BidsController.html":{}}}],["src/bids/bids.controller.ts:38",{"_index":258,"title":{},"body":{"controllers/BidsController.html":{}}}],["src/bids/bids.controller.ts:47",{"_index":263,"title":{},"body":{"controllers/BidsController.html":{}}}],["src/bids/bids.module.ts",{"_index":284,"title":{},"body":{"modules/BidsModule.html":{}}}],["src/bids/bids.service.ts",{"_index":288,"title":{},"body":{"injectables/BidsService.html":{},"coverage.html":{}}}],["src/bids/bids.service.ts:10",{"_index":291,"title":{},"body":{"injectables/BidsService.html":{}}}],["src/bids/bids.service.ts:17",{"_index":292,"title":{},"body":{"injectables/BidsService.html":{}}}],["src/bids/bids.service.ts:60",{"_index":301,"title":{},"body":{"injectables/BidsService.html":{}}}],["src/bids/bids.service.ts:70",{"_index":306,"title":{},"body":{"injectables/BidsService.html":{}}}],["src/bids/bids.service.ts:81",{"_index":308,"title":{},"body":{"injectables/BidsService.html":{}}}],["src/common/errors",{"_index":171,"title":{},"body":{"injectables/AuthService.html":{},"injectables/BidsService.html":{},"injectables/Db.html":{},"injectables/NftsService.html":{},"injectables/SellOffersService.html":{}}}],["src/common/errors.ts",{"_index":611,"title":{},"body":{"classes/DeletedEntity.html":{},"classes/EntityNotFound.html":{},"classes/InvalidId.html":{},"classes/NotOwner.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/common/errors.ts:15",{"_index":625,"title":{},"body":{"classes/EntityNotFound.html":{}}}],["src/common/errors.ts:21",{"_index":678,"title":{},"body":{"classes/NotOwner.html":{}}}],["src/common/errors.ts:3",{"_index":628,"title":{},"body":{"classes/InvalidId.html":{}}}],["src/common/errors.ts:9",{"_index":614,"title":{},"body":{"classes/DeletedEntity.html":{}}}],["src/common/tools/tools",{"_index":321,"title":{},"body":{"injectables/BidsService.html":{},"injectables/SellOffersService.html":{}}}],["src/common/tools/tools.ts",{"_index":847,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/main.ts",{"_index":850,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/nfts/nfts.controller.ts",{"_index":630,"title":{},"body":{"controllers/NftsController.html":{},"coverage.html":{}}}],["src/nfts/nfts.controller.ts:12",{"_index":634,"title":{},"body":{"controllers/NftsController.html":{}}}],["src/nfts/nfts.controller.ts:17",{"_index":641,"title":{},"body":{"controllers/NftsController.html":{}}}],["src/nfts/nfts.controller.ts:23",{"_index":644,"title":{},"body":{"controllers/NftsController.html":{}}}],["src/nfts/nfts.module.ts",{"_index":661,"title":{},"body":{"modules/NftsModule.html":{}}}],["src/nfts/nfts.service.ts",{"_index":663,"title":{},"body":{"injectables/NftsService.html":{},"coverage.html":{}}}],["src/nfts/nfts.service.ts:12",{"_index":666,"title":{},"body":{"injectables/NftsService.html":{}}}],["src/nfts/nfts.service.ts:26",{"_index":668,"title":{},"body":{"injectables/NftsService.html":{}}}],["src/nfts/nfts.service.ts:37",{"_index":670,"title":{},"body":{"injectables/NftsService.html":{}}}],["src/nfts/nfts.service.ts:7",{"_index":664,"title":{},"body":{"injectables/NftsService.html":{}}}],["src/selloffers/selloffer.controller.ts",{"_index":691,"title":{},"body":{"controllers/SellOffersController.html":{},"coverage.html":{}}}],["src/selloffers/selloffer.controller.ts:25",{"_index":704,"title":{},"body":{"controllers/SellOffersController.html":{}}}],["src/selloffers/selloffer.controller.ts:34",{"_index":705,"title":{},"body":{"controllers/SellOffersController.html":{}}}],["src/selloffers/selloffer.controller.ts:39",{"_index":707,"title":{},"body":{"controllers/SellOffersController.html":{}}}],["src/selloffers/selloffer.controller.ts:46",{"_index":712,"title":{},"body":{"controllers/SellOffersController.html":{}}}],["src/selloffers/selloffer.controller.ts:59",{"_index":708,"title":{},"body":{"controllers/SellOffersController.html":{}}}],["src/selloffers/selloffer.controller.ts:66",{"_index":700,"title":{},"body":{"controllers/SellOffersController.html":{}}}],["src/selloffers/selloffer.controller.ts:76",{"_index":696,"title":{},"body":{"controllers/SellOffersController.html":{}}}],["src/selloffers/selloffer.module.ts",{"_index":733,"title":{},"body":{"modules/SellOffersModule.html":{}}}],["src/selloffers/selloffer.service.ts",{"_index":735,"title":{},"body":{"injectables/SellOffersService.html":{},"coverage.html":{}}}],["src/selloffers/selloffer.service.ts:110",{"_index":740,"title":{},"body":{"injectables/SellOffersService.html":{}}}],["src/selloffers/selloffer.service.ts:14",{"_index":737,"title":{},"body":{"injectables/SellOffersService.html":{}}}],["src/selloffers/selloffer.service.ts:17",{"_index":744,"title":{},"body":{"injectables/SellOffersService.html":{}}}],["src/selloffers/selloffer.service.ts:37",{"_index":747,"title":{},"body":{"injectables/SellOffersService.html":{}}}],["src/selloffers/selloffer.service.ts:43",{"_index":749,"title":{},"body":{"injectables/SellOffersService.html":{}}}],["src/selloffers/selloffer.service.ts:49",{"_index":750,"title":{},"body":{"injectables/SellOffersService.html":{}}}],["src/selloffers/selloffer.service.ts:57",{"_index":754,"title":{},"body":{"injectables/SellOffersService.html":{}}}],["src/selloffers/selloffer.service.ts:76",{"_index":752,"title":{},"body":{"injectables/SellOffersService.html":{}}}],["src/selloffers/selloffer.service.ts:89",{"_index":742,"title":{},"body":{"injectables/SellOffersService.html":{}}}],["src/shared/clients/clients.module",{"_index":287,"title":{},"body":{"modules/BidsModule.html":{}}}],["src/shared/clients/clients.module.ts",{"_index":512,"title":{},"body":{"modules/ClientsModule.html":{}}}],["src/shared/clients/clients.service",{"_index":317,"title":{},"body":{"injectables/BidsService.html":{},"injectables/NftsService.html":{},"injectables/SellOffersService.html":{}}}],["src/shared/clients/clients.service.ts",{"_index":364,"title":{},"body":{"injectables/Client.html":{},"interfaces/FinishAuctionInput.html":{},"interfaces/Window.html":{},"coverage.html":{}}}],["src/shared/clients/clients.service.ts:100",{"_index":419,"title":{},"body":{"injectables/Client.html":{}}}],["src/shared/clients/clients.service.ts:122",{"_index":409,"title":{},"body":{"injectables/Client.html":{}}}],["src/shared/clients/clients.service.ts:132",{"_index":402,"title":{},"body":{"injectables/Client.html":{}}}],["src/shared/clients/clients.service.ts:142",{"_index":413,"title":{},"body":{"injectables/Client.html":{}}}],["src/shared/clients/clients.service.ts:23",{"_index":390,"title":{},"body":{"injectables/Client.html":{}}}],["src/shared/clients/clients.service.ts:36",{"_index":394,"title":{},"body":{"injectables/Client.html":{}}}],["src/shared/clients/clients.service.ts:42",{"_index":380,"title":{},"body":{"injectables/Client.html":{}}}],["src/shared/clients/clients.service.ts:60",{"_index":397,"title":{},"body":{"injectables/Client.html":{}}}],["src/shared/clients/clients.service.ts:71",{"_index":433,"title":{},"body":{"injectables/Client.html":{}}}],["src/shared/clients/clients.service.ts:80",{"_index":429,"title":{},"body":{"injectables/Client.html":{}}}],["src/shared/clients/clients.service.ts:91",{"_index":426,"title":{},"body":{"injectables/Client.html":{}}}],["src/shared/db/db.module",{"_index":286,"title":{},"body":{"modules/BidsModule.html":{},"modules/SellOffersModule.html":{}}}],["src/shared/db/db.module.ts",{"_index":609,"title":{},"body":{"modules/DbModule.html":{}}}],["src/shared/db/db.service",{"_index":166,"title":{},"body":{"injectables/AuthService.html":{},"injectables/BidsService.html":{},"injectables/NftsService.html":{},"injectables/SellOffersService.html":{},"injectables/UserService.html":{}}}],["src/shared/db/db.service.ts",{"_index":556,"title":{},"body":{"injectables/Db.html":{},"coverage.html":{}}}],["src/shared/db/db.service.ts:11",{"_index":589,"title":{},"body":{"injectables/Db.html":{}}}],["src/shared/db/db.service.ts:12",{"_index":590,"title":{},"body":{"injectables/Db.html":{}}}],["src/shared/db/db.service.ts:13",{"_index":567,"title":{},"body":{"injectables/Db.html":{}}}],["src/shared/db/db.service.ts:21",{"_index":579,"title":{},"body":{"injectables/Db.html":{}}}],["src/shared/db/db.service.ts:28",{"_index":571,"title":{},"body":{"injectables/Db.html":{}}}],["src/shared/db/db.service.ts:42",{"_index":581,"title":{},"body":{"injectables/Db.html":{}}}],["src/shared/db/db.service.ts:49",{"_index":583,"title":{},"body":{"injectables/Db.html":{}}}],["src/shared/db/db.service.ts:52",{"_index":585,"title":{},"body":{"injectables/Db.html":{}}}],["src/shared/db/db.service.ts:55",{"_index":586,"title":{},"body":{"injectables/Db.html":{}}}],["src/shared/db/db.service.ts:58",{"_index":587,"title":{},"body":{"injectables/Db.html":{}}}],["src/shared/db/db.service.ts:61",{"_index":588,"title":{},"body":{"injectables/Db.html":{}}}],["src/user/user.controller.ts",{"_index":789,"title":{},"body":{"controllers/UserController.html":{},"coverage.html":{}}}],["src/user/user.controller.ts:11",{"_index":791,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:16",{"_index":792,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:21",{"_index":793,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.module.ts",{"_index":803,"title":{},"body":{"modules/UserModule.html":{}}}],["src/user/user.service.ts",{"_index":805,"title":{},"body":{"injectables/UserService.html":{},"coverage.html":{}}}],["src/user/user.service.ts:17",{"_index":808,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:28",{"_index":809,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:7",{"_index":806,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:9",{"_index":807,"title":{},"body":{"injectables/UserService.html":{}}}],["start",{"_index":915,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":918,"title":{},"body":{"index.html":{}}}],["start:prodtest",{"_index":920,"title":{},"body":{"index.html":{}}}],["started",{"_index":896,"title":{"index.html":{}},"body":{}}],["starter",{"_index":907,"title":{},"body":{"index.html":{}}}],["statements",{"_index":831,"title":{},"body":{"coverage.html":{}}}],["stay",{"_index":939,"title":{},"body":{"index.html":{}}}],["string",{"_index":99,"title":{},"body":{"guards/AuthGuard.html":{},"controllers/BidsController.html":{},"injectables/Client.html":{},"classes/CloseDto.html":{},"classes/CreateSellOfferDto.html":{},"classes/CreateTokenDto.html":{},"classes/CreateUserDto.html":{},"injectables/Db.html":{},"classes/DeletedEntity.html":{},"classes/EntityNotFound.html":{},"interfaces/FinishAuctionInput.html":{},"classes/InvalidId.html":{},"injectables/NftsService.html":{},"classes/NotOwner.html":{},"classes/SellOffer.html":{},"controllers/SellOffersController.html":{},"injectables/SellOffersService.html":{},"classes/UpdatePrice.html":{},"classes/User.html":{},"classes/UserAuth.html":{},"controllers/UserController.html":{},"interfaces/Window.html":{},"miscellaneous/variables.html":{}}}],["string(ans['transactionhash",{"_index":979,"title":{},"body":{"miscellaneous/variables.html":{}}}],["success",{"_index":778,"title":{},"body":{"injectables/SellOffersService.html":{}}}],["super",{"_index":232,"title":{},"body":{"classes/Bid.html":{},"classes/CloseDto.html":{},"classes/CreateBidDto.html":{},"classes/CreateSellOfferDto.html":{},"classes/SellOffer.html":{},"classes/UpdatePrice.html":{}}}],["super('invalid",{"_index":615,"title":{},"body":{"classes/DeletedEntity.html":{},"classes/EntityNotFound.html":{},"classes/InvalidId.html":{},"classes/NotOwner.html":{}}}],["super(`could",{"_index":617,"title":{},"body":{"classes/DeletedEntity.html":{},"classes/EntityNotFound.html":{},"classes/InvalidId.html":{},"classes/NotOwner.html":{}}}],["super(`the",{"_index":616,"title":{},"body":{"classes/DeletedEntity.html":{},"classes/EntityNotFound.html":{},"classes/InvalidId.html":{},"classes/NotOwner.html":{}}}],["super(`you",{"_index":619,"title":{},"body":{"classes/DeletedEntity.html":{},"classes/EntityNotFound.html":{},"classes/InvalidId.html":{},"classes/NotOwner.html":{}}}],["support",{"_index":932,"title":{},"body":{"index.html":{},"modules.html":{}}}],["svg",{"_index":950,"title":{},"body":{"modules.html":{}}}],["switch",{"_index":324,"title":{},"body":{"injectables/BidsService.html":{}}}],["t",{"_index":569,"title":{},"body":{"injectables/Db.html":{}}}],["table",{"_index":599,"title":{},"body":{"injectables/Db.html":{},"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":865,"title":{},"body":{"coverage.html":{}}}],["test",{"_index":456,"title":{},"body":{"injectables/Client.html":{},"interfaces/FinishAuctionInput.html":{},"interfaces/Window.html":{},"index.html":{}}}],["test:covsupport",{"_index":925,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":924,"title":{},"body":{"index.html":{}}}],["tests",{"_index":922,"title":{},"body":{"index.html":{}}}],["thanks",{"_index":930,"title":{},"body":{"index.html":{}}}],["thirdweb",{"_index":437,"title":{},"body":{"injectables/Client.html":{},"interfaces/FinishAuctionInput.html":{},"interfaces/Window.html":{},"dependencies.html":{}}}],["thirdwebsdk",{"_index":436,"title":{},"body":{"injectables/Client.html":{},"interfaces/FinishAuctionInput.html":{},"interfaces/Window.html":{}}}],["thirdwebsdk(sepolia",{"_index":477,"title":{},"body":{"injectables/Client.html":{},"interfaces/FinishAuctionInput.html":{},"interfaces/Window.html":{}}}],["thirdwebsdk.fromprivatekey(privatekey",{"_index":471,"title":{},"body":{"injectables/Client.html":{},"interfaces/FinishAuctionInput.html":{},"interfaces/Window.html":{}}}],["this._callcontract",{"_index":497,"title":{},"body":{"injectables/Client.html":{},"interfaces/FinishAuctionInput.html":{},"interfaces/Window.html":{}}}],["this._callcontract(key",{"_index":483,"title":{},"body":{"injectables/Client.html":{},"interfaces/FinishAuctionInput.html":{},"interfaces/Window.html":{}}}],["this._extracttokenfromheader(request",{"_index":132,"title":{},"body":{"guards/AuthGuard.html":{}}}],["this._getbiddersign(input",{"_index":500,"title":{},"body":{"injectables/Client.html":{},"interfaces/FinishAuctionInput.html":{},"interfaces/Window.html":{}}}],["this._getsellersign",{"_index":502,"title":{},"body":{"injectables/Client.html":{},"interfaces/FinishAuctionInput.html":{},"interfaces/Window.html":{}}}],["this._lastindex(db",{"_index":605,"title":{},"body":{"injectables/Db.html":{}}}],["this._readcontract",{"_index":479,"title":{},"body":{"injectables/Client.html":{},"interfaces/FinishAuctionInput.html":{},"interfaces/Window.html":{}}}],["this.auctionstate",{"_index":528,"title":{},"body":{"classes/CloseDto.html":{},"classes/CreateSellOfferDto.html":{},"classes/SellOffer.html":{},"classes/UpdatePrice.html":{}}}],["this.authservice.login(userauth",{"_index":79,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.bids",{"_index":600,"title":{},"body":{"injectables/Db.html":{}}}],["this.bidsservice.create(createbiddto",{"_index":272,"title":{},"body":{"controllers/BidsController.html":{}}}],["this.bidsservice.findall",{"_index":274,"title":{},"body":{"controllers/BidsController.html":{}}}],["this.bidsservice.findall(req.user.userid",{"_index":276,"title":{},"body":{"controllers/BidsController.html":{}}}],["this.bidsservice.findone(+id",{"_index":278,"title":{},"body":{"controllers/BidsController.html":{}}}],["this.bidsservice.remove(req.user.userid",{"_index":280,"title":{},"body":{"controllers/BidsController.html":{}}}],["this.client",{"_index":338,"title":{},"body":{"injectables/BidsService.html":{},"injectables/SellOffersService.html":{}}}],["this.client.getnfts(usr.useraddr",{"_index":676,"title":{},"body":{"injectables/NftsService.html":{}}}],["this.client.gettokens(usr.useraddr",{"_index":677,"title":{},"body":{"injectables/NftsService.html":{}}}],["this.client.mint",{"_index":672,"title":{},"body":{"injectables/NftsService.html":{}}}],["this.client.ownerof",{"_index":758,"title":{},"body":{"injectables/SellOffersService.html":{}}}],["this.createdat",{"_index":235,"title":{},"body":{"classes/Bid.html":{},"classes/CloseDto.html":{},"classes/CreateBidDto.html":{},"classes/CreateSellOfferDto.html":{},"classes/CreateUserDto.html":{},"classes/SellOffer.html":{},"classes/UpdatePrice.html":{},"classes/User.html":{},"classes/UserAuth.html":{}}}],["this.currentbid",{"_index":530,"title":{},"body":{"classes/CloseDto.html":{},"classes/CreateSellOfferDto.html":{},"classes/SellOffer.html":{},"classes/UpdatePrice.html":{}}}],["this.db.bids",{"_index":351,"title":{},"body":{"injectables/BidsService.html":{}}}],["this.db.getbid(id",{"_index":345,"title":{},"body":{"injectables/BidsService.html":{}}}],["this.db.getselloffer(bid.sellofferid",{"_index":347,"title":{},"body":{"injectables/BidsService.html":{}}}],["this.db.getselloffer(createbiddto.sellofferid",{"_index":323,"title":{},"body":{"injectables/BidsService.html":{}}}],["this.db.getselloffer(id",{"_index":768,"title":{},"body":{"injectables/SellOffersService.html":{}}}],["this.db.getselloffer(offerid",{"_index":774,"title":{},"body":{"injectables/SellOffersService.html":{}}}],["this.db.getuser(id",{"_index":827,"title":{},"body":{"injectables/UserService.html":{}}}],["this.db.getuser(offer.highestbidder",{"_index":777,"title":{},"body":{"injectables/SellOffersService.html":{}}}],["this.db.getuser(offer.userid",{"_index":336,"title":{},"body":{"injectables/BidsService.html":{}}}],["this.db.getuser(userauth.userid",{"_index":172,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.db.getuser(userid",{"_index":331,"title":{},"body":{"injectables/BidsService.html":{},"injectables/NftsService.html":{},"injectables/SellOffersService.html":{}}}],["this.db.lastsellindex",{"_index":764,"title":{},"body":{"injectables/SellOffersService.html":{}}}],["this.db.lastuserindex",{"_index":816,"title":{},"body":{"injectables/UserService.html":{}}}],["this.db.selloffers.filter((selloffer",{"_index":765,"title":{},"body":{"injectables/SellOffersService.html":{}}}],["this.db.selloffers.push(newselloffer",{"_index":763,"title":{},"body":{"injectables/SellOffersService.html":{}}}],["this.db.users.filter((user",{"_index":817,"title":{},"body":{"injectables/UserService.html":{}}}],["this.db.users.push(newuser",{"_index":814,"title":{},"body":{"injectables/UserService.html":{}}}],["this.jwt.decode(token",{"_index":135,"title":{},"body":{"guards/AuthGuard.html":{}}}],["this.jwt.signasync(jwtpayload",{"_index":181,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.minoffer",{"_index":531,"title":{},"body":{"classes/CloseDto.html":{},"classes/CreateSellOfferDto.html":{},"classes/SellOffer.html":{},"classes/UpdatePrice.html":{}}}],["this.nftsservice.create(req.user.userid",{"_index":650,"title":{},"body":{"controllers/NftsController.html":{}}}],["this.nftsservice.findallnft(req.user.userid",{"_index":654,"title":{},"body":{"controllers/NftsController.html":{}}}],["this.nftsservice.findalltoken(req.user.userid",{"_index":658,"title":{},"body":{"controllers/NftsController.html":{}}}],["this.reflector.getallandoverride(is_public_key",{"_index":127,"title":{},"body":{"guards/AuthGuard.html":{}}}],["this.selloffers",{"_index":601,"title":{},"body":{"injectables/Db.html":{}}}],["this.selloffersservice.cancel(user",{"_index":729,"title":{},"body":{"controllers/SellOffersController.html":{}}}],["this.selloffersservice.close(user",{"_index":726,"title":{},"body":{"controllers/SellOffersController.html":{}}}],["this.selloffersservice.create(req.user.userid",{"_index":718,"title":{},"body":{"controllers/SellOffersController.html":{}}}],["this.selloffersservice.findall",{"_index":719,"title":{},"body":{"controllers/SellOffersController.html":{}}}],["this.selloffersservice.findone(+id",{"_index":720,"title":{},"body":{"controllers/SellOffersController.html":{}}}],["this.selloffersservice.remove(req.user.userid",{"_index":723,"title":{},"body":{"controllers/SellOffersController.html":{}}}],["this.selloffersservice.updateprice",{"_index":722,"title":{},"body":{"controllers/SellOffersController.html":{}}}],["this.updatedat",{"_index":236,"title":{},"body":{"classes/Bid.html":{},"classes/CloseDto.html":{},"classes/CreateBidDto.html":{},"classes/CreateSellOfferDto.html":{},"classes/CreateUserDto.html":{},"classes/SellOffer.html":{},"classes/UpdatePrice.html":{},"classes/User.html":{},"classes/UserAuth.html":{}}}],["this.useraddr",{"_index":554,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/User.html":{},"classes/UserAuth.html":{}}}],["this.userid",{"_index":234,"title":{},"body":{"classes/Bid.html":{},"classes/CloseDto.html":{},"classes/CreateBidDto.html":{},"classes/CreateSellOfferDto.html":{},"classes/SellOffer.html":{},"classes/UpdatePrice.html":{}}}],["this.userkey",{"_index":553,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/User.html":{},"classes/UserAuth.html":{}}}],["this.users",{"_index":602,"title":{},"body":{"injectables/Db.html":{}}}],["this.userservice.create(createuserdto",{"_index":798,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.findall",{"_index":799,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.findone(+id",{"_index":800,"title":{},"body":{"controllers/UserController.html":{}}}],["throw",{"_index":82,"title":{},"body":{"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"controllers/BidsController.html":{},"injectables/BidsService.html":{},"injectables/Client.html":{},"classes/DeletedEntity.html":{},"classes/EntityNotFound.html":{},"interfaces/FinishAuctionInput.html":{},"classes/InvalidId.html":{},"classes/NotOwner.html":{},"controllers/SellOffersController.html":{},"injectables/SellOffersService.html":{},"injectables/UserService.html":{},"interfaces/Window.html":{},"miscellaneous/variables.html":{}}}],["toaddress",{"_index":400,"title":{},"body":{"injectables/Client.html":{},"interfaces/FinishAuctionInput.html":{},"interfaces/Window.html":{}}}],["token",{"_index":131,"title":{},"body":{"guards/AuthGuard.html":{},"controllers/NftsController.html":{},"injectables/NftsService.html":{}}}],["tokenid",{"_index":401,"title":{},"body":{"injectables/Client.html":{},"classes/CloseDto.html":{},"classes/CreateSellOfferDto.html":{},"interfaces/FinishAuctionInput.html":{},"classes/SellOffer.html":{},"classes/UpdatePrice.html":{},"interfaces/Window.html":{},"miscellaneous/variables.html":{}}}],["tokenofownerbyindex",{"_index":493,"title":{},"body":{"injectables/Client.html":{},"interfaces/FinishAuctionInput.html":{},"interfaces/Window.html":{}}}],["tokens",{"_index":230,"title":{},"body":{"classes/Bid.html":{},"injectables/Client.html":{},"classes/CreateBidDto.html":{},"interfaces/FinishAuctionInput.html":{},"controllers/NftsController.html":{},"injectables/NftsService.html":{},"interfaces/Window.html":{},"miscellaneous/variables.html":{}}}],["touch",{"_index":940,"title":{},"body":{"index.html":{}}}],["transaction",{"_index":392,"title":{},"body":{"injectables/Client.html":{},"interfaces/FinishAuctionInput.html":{},"interfaces/Window.html":{}}}],["transfer",{"_index":404,"title":{},"body":{"injectables/Client.html":{},"interfaces/FinishAuctionInput.html":{},"interfaces/Window.html":{},"miscellaneous/variables.html":{}}}],["transfered",{"_index":410,"title":{},"body":{"injectables/Client.html":{},"interfaces/FinishAuctionInput.html":{},"interfaces/Window.html":{},"miscellaneous/variables.html":{}}}],["transformer",{"_index":878,"title":{},"body":{"dependencies.html":{}}}],["true",{"_index":116,"title":{},"body":{"guards/AuthGuard.html":{},"miscellaneous/variables.html":{}}}],["try",{"_index":77,"title":{},"body":{"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"controllers/BidsController.html":{},"injectables/BidsService.html":{},"injectables/Client.html":{},"interfaces/FinishAuctionInput.html":{},"injectables/NftsService.html":{},"controllers/SellOffersController.html":{},"injectables/SellOffersService.html":{},"injectables/UserService.html":{},"interfaces/Window.html":{}}}],["twitter",{"_index":946,"title":{},"body":{"index.html":{}}}],["type",{"_index":60,"title":{},"body":{"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"classes/Bid.html":{},"controllers/BidsController.html":{},"injectables/BidsService.html":{},"injectables/Client.html":{},"classes/CloseDto.html":{},"classes/CreateBidDto.html":{},"classes/CreateSellOfferDto.html":{},"classes/CreateTokenDto.html":{},"classes/CreateUserDto.html":{},"injectables/Db.html":{},"classes/DeletedEntity.html":{},"classes/EntityNotFound.html":{},"interfaces/EntityType.html":{},"interfaces/FinishAuctionInput.html":{},"controllers/NftsController.html":{},"injectables/NftsService.html":{},"classes/NotOwner.html":{},"classes/SellOffer.html":{},"controllers/SellOffersController.html":{},"injectables/SellOffersService.html":{},"classes/UpdatePrice.html":{},"classes/User.html":{},"classes/UserAuth.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"interfaces/Window.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["types",{"_index":872,"title":{},"body":{"dependencies.html":{}}}],["types/crypto",{"_index":875,"title":{},"body":{"dependencies.html":{}}}],["typescript",{"_index":822,"title":{},"body":{"injectables/UserService.html":{},"index.html":{}}}],["uint256",{"_index":465,"title":{},"body":{"injectables/Client.html":{},"interfaces/FinishAuctionInput.html":{},"interfaces/Window.html":{}}}],["unauthorizedexception",{"_index":107,"title":{},"body":{"guards/AuthGuard.html":{}}}],["undefined",{"_index":100,"title":{},"body":{"guards/AuthGuard.html":{},"classes/Bid.html":{},"injectables/BidsService.html":{},"classes/CreateBidDto.html":{}}}],["unit",{"_index":921,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":163,"title":{},"body":{"injectables/AuthService.html":{},"injectables/BidsService.html":{},"injectables/Client.html":{},"injectables/NftsService.html":{},"injectables/SellOffersService.html":{}}}],["unlicensed",{"_index":959,"title":{},"body":{"properties.html":{}}}],["unused",{"_index":824,"title":{},"body":{"injectables/UserService.html":{}}}],["update",{"_index":213,"title":{},"body":{"classes/Bid.html":{},"injectables/BidsService.html":{},"classes/CreateBidDto.html":{}}}],["updated",{"_index":771,"title":{},"body":{"injectables/SellOffersService.html":{}}}],["updatedat",{"_index":198,"title":{},"body":{"classes/Bid.html":{},"classes/CloseDto.html":{},"classes/CreateBidDto.html":{},"classes/CreateSellOfferDto.html":{},"classes/CreateUserDto.html":{},"classes/SellOffer.html":{},"classes/UpdatePrice.html":{},"classes/User.html":{},"classes/UserAuth.html":{}}}],["updateprice",{"_index":524,"title":{"classes/UpdatePrice.html":{}},"body":{"classes/CloseDto.html":{},"classes/CreateSellOfferDto.html":{},"classes/SellOffer.html":{},"controllers/SellOffersController.html":{},"injectables/SellOffersService.html":{},"classes/UpdatePrice.html":{},"coverage.html":{}}}],["updateprice(id",{"_index":709,"title":{},"body":{"controllers/SellOffersController.html":{}}}],["updateprice(userid",{"_index":753,"title":{},"body":{"injectables/SellOffersService.html":{}}}],["updates",{"_index":755,"title":{},"body":{"injectables/SellOffersService.html":{}}}],["updatesellofferdto",{"_index":710,"title":{},"body":{"controllers/SellOffersController.html":{},"injectables/SellOffersService.html":{}}}],["updatesellofferdto.price",{"_index":773,"title":{},"body":{"injectables/SellOffersService.html":{}}}],["useclass",{"_index":152,"title":{},"body":{"modules/AuthModule.html":{}}}],["used",{"_index":188,"title":{},"body":{"classes/Bid.html":{},"injectables/Client.html":{},"classes/CreateBidDto.html":{},"interfaces/FinishAuctionInput.html":{},"interfaces/Window.html":{}}}],["usefactory",{"_index":147,"title":{},"body":{"modules/AuthModule.html":{}}}],["user",{"_index":74,"title":{"classes/User.html":{}},"body":{"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"controllers/BidsController.html":{},"injectables/BidsService.html":{},"injectables/Client.html":{},"classes/CreateUserDto.html":{},"injectables/Db.html":{},"interfaces/FinishAuctionInput.html":{},"controllers/NftsController.html":{},"injectables/NftsService.html":{},"controllers/SellOffersController.html":{},"injectables/SellOffersService.html":{},"classes/User.html":{},"classes/UserAuth.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"interfaces/Window.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["user(createuserdto",{"_index":811,"title":{},"body":{"injectables/UserService.html":{}}}],["user.controller",{"_index":804,"title":{},"body":{"modules/UserModule.html":{}}}],["user.deletedat",{"_index":818,"title":{},"body":{"injectables/UserService.html":{}}}],["user.service",{"_index":795,"title":{},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{}}}],["user.useraddr",{"_index":674,"title":{},"body":{"injectables/NftsService.html":{},"injectables/SellOffersService.html":{}}}],["user.userkey",{"_index":673,"title":{},"body":{"injectables/NftsService.html":{}}}],["user/user.module",{"_index":37,"title":{},"body":{"modules/AppModule.html":{}}}],["user?.password",{"_index":174,"title":{},"body":{"injectables/AuthService.html":{}}}],["useraddr",{"_index":424,"title":{},"body":{"injectables/Client.html":{},"classes/CreateUserDto.html":{},"interfaces/FinishAuctionInput.html":{},"classes/User.html":{},"classes/UserAuth.html":{},"interfaces/Window.html":{}}}],["userauth",{"_index":53,"title":{"classes/UserAuth.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"classes/User.html":{},"classes/UserAuth.html":{},"coverage.html":{}}}],["userauth.userid",{"_index":178,"title":{},"body":{"injectables/AuthService.html":{}}}],["usercontroller",{"_index":788,"title":{"controllers/UserController.html":{}},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{},"coverage.html":{}}}],["userid",{"_index":161,"title":{},"body":{"injectables/AuthService.html":{},"classes/Bid.html":{},"injectables/BidsService.html":{},"classes/CloseDto.html":{},"classes/CreateBidDto.html":{},"classes/CreateSellOfferDto.html":{},"classes/CreateUserDto.html":{},"injectables/NftsService.html":{},"classes/SellOffer.html":{},"injectables/SellOffersService.html":{},"classes/UpdatePrice.html":{},"classes/User.html":{},"classes/UserAuth.html":{}}}],["userkey",{"_index":549,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/User.html":{},"classes/UserAuth.html":{},"injectables/UserService.html":{}}}],["usermodule",{"_index":18,"title":{"modules/UserModule.html":{}},"body":{"modules/AppModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["users",{"_index":558,"title":{},"body":{"injectables/Db.html":{},"injectables/UserService.html":{}}}],["users.map((usr",{"_index":819,"title":{},"body":{"injectables/UserService.html":{}}}],["userservice",{"_index":794,"title":{"injectables/UserService.html":{}},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["usr",{"_index":675,"title":{},"body":{"injectables/NftsService.html":{},"injectables/UserService.html":{}}}],["usrinfo",{"_index":826,"title":{},"body":{"injectables/UserService.html":{}}}],["utils",{"_index":447,"title":{},"body":{"injectables/Client.html":{},"classes/CreateUserDto.html":{},"interfaces/FinishAuctionInput.html":{},"classes/User.html":{},"classes/UserAuth.html":{},"interfaces/Window.html":{}}}],["utils.encodepacked",{"_index":460,"title":{},"body":{"injectables/Client.html":{},"interfaces/FinishAuctionInput.html":{},"interfaces/Window.html":{}}}],["utils.fromwei(balance.tobigint",{"_index":486,"title":{},"body":{"injectables/Client.html":{},"interfaces/FinishAuctionInput.html":{},"interfaces/Window.html":{}}}],["utils.sha3",{"_index":459,"title":{},"body":{"injectables/Client.html":{},"interfaces/FinishAuctionInput.html":{},"interfaces/Window.html":{}}}],["utils.sha3(biddersignedmsg",{"_index":469,"title":{},"body":{"injectables/Client.html":{},"interfaces/FinishAuctionInput.html":{},"interfaces/Window.html":{}}}],["utils.sha3(values.entropy",{"_index":550,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/User.html":{},"classes/UserAuth.html":{}}}],["utils.towei(amount",{"_index":481,"title":{},"body":{"injectables/Client.html":{},"interfaces/FinishAuctionInput.html":{},"interfaces/Window.html":{}}}],["utils.towei(bid.tostring",{"_index":966,"title":{},"body":{"miscellaneous/variables.html":{}}}],["validator",{"_index":224,"title":{},"body":{"classes/Bid.html":{},"classes/CloseDto.html":{},"classes/CreateBidDto.html":{},"classes/CreateSellOfferDto.html":{},"classes/CreateTokenDto.html":{},"classes/CreateUserDto.html":{},"classes/SellOffer.html":{},"classes/UpdatePrice.html":{},"classes/User.html":{},"classes/UserAuth.html":{},"dependencies.html":{}}}],["value",{"_index":461,"title":{},"body":{"injectables/Client.html":{},"interfaces/FinishAuctionInput.html":{},"interfaces/Window.html":{},"miscellaneous/variables.html":{}}}],["values",{"_index":204,"title":{},"body":{"classes/Bid.html":{},"injectables/BidsService.html":{},"classes/CloseDto.html":{},"classes/CreateBidDto.html":{},"classes/CreateSellOfferDto.html":{},"classes/CreateUserDto.html":{},"classes/SellOffer.html":{},"classes/UpdatePrice.html":{},"classes/User.html":{},"classes/UserAuth.html":{}}}],["values.price",{"_index":529,"title":{},"body":{"classes/CloseDto.html":{},"classes/CreateSellOfferDto.html":{},"classes/SellOffer.html":{},"classes/UpdatePrice.html":{}}}],["variable",{"_index":841,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":960,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["vars",{"_index":825,"title":{},"body":{"injectables/UserService.html":{}}}],["verifiation",{"_index":123,"title":{},"body":{"guards/AuthGuard.html":{}}}],["version",{"_index":957,"title":{},"body":{"properties.html":{}}}],["wallet",{"_index":551,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/User.html":{},"classes/UserAuth.html":{}}}],["wallet.address",{"_index":555,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/User.html":{},"classes/UserAuth.html":{}}}],["watch",{"_index":916,"title":{},"body":{"index.html":{}}}],["web3",{"_index":448,"title":{},"body":{"injectables/Client.html":{},"classes/CreateUserDto.html":{},"interfaces/FinishAuctionInput.html":{},"classes/User.html":{},"classes/UserAuth.html":{},"interfaces/Window.html":{},"dependencies.html":{}}}],["website",{"_index":944,"title":{},"body":{"index.html":{}}}],["weibid",{"_index":965,"title":{},"body":{"miscellaneous/variables.html":{}}}],["window",{"_index":452,"title":{"interfaces/Window.html":{}},"body":{"injectables/Client.html":{},"interfaces/FinishAuctionInput.html":{},"interfaces/Window.html":{},"coverage.html":{}}}],["write",{"_index":383,"title":{},"body":{"injectables/Client.html":{},"interfaces/FinishAuctionInput.html":{},"interfaces/Window.html":{}}}],["yes",{"_index":305,"title":{},"body":{"injectables/BidsService.html":{},"injectables/Client.html":{},"injectables/NftsService.html":{}}}],["you'd",{"_index":935,"title":{},"body":{"index.html":{}}}],["zoom",{"_index":19,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/BidsModule.html":{},"modules/ClientsModule.html":{},"modules/DbModule.html":{},"modules/NftsModule.html":{},"modules/SellOffersModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nBidsModule\n\nBidsModule\n\nAppModule -->\n\nBidsModule->AppModule\n\n\n\n\n\nClientsModule\n\nClientsModule\n\nAppModule -->\n\nClientsModule->AppModule\n\n\n\n\n\nDbModule\n\nDbModule\n\nAppModule -->\n\nDbModule->AppModule\n\n\n\n\n\nNftsModule\n\nNftsModule\n\nAppModule -->\n\nNftsModule->AppModule\n\n\n\n\n\nSellOffersModule\n\nSellOffersModule\n\nAppModule -->\n\nSellOffersModule->AppModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            BidsModule\n                        \n                        \n                            ClientsModule\n                        \n                        \n                            DbModule\n                        \n                        \n                            NftsModule\n                        \n                        \n                            SellOffersModule\n                        \n                        \n                            UserModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { SellOffersModule } from './sellOffers/sellOffer.module';\nimport { AuthModule } from './auth/auth.module';\nimport { NftsModule } from './nfts/nfts.module';\nimport { ClientsModule } from './shared/clients/clients.module';\nimport { DbModule } from './shared/db/db.module';\nimport { BidsModule } from './bids/bids.module';\nimport { ConfigModule } from '@nestjs/config';\nimport { UserModule } from './user/user.module';\n\n@Module({\n  imports: [\n    ClientsModule,\n    SellOffersModule,\n    AuthModule,\n    NftsModule,\n    BidsModule,\n    DbModule,\n    ConfigModule.forRoot(),\n    UserModule,\n  ],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                login\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        login\n                        \n                    \n                \n            \n            \n                \n                    \n                    login(userAuth: UserAuth)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Public()@Post()\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userAuth\n                                    \n                                                UserAuth\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Post } from '@nestjs/common';\nimport { UserAuth } from 'models/users.entity';\nimport { AuthService } from './auth.service';\nimport { Public } from './auth.guard';\n\n@Controller('auth')\nexport class AuthController {\n  constructor(private readonly authService: AuthService) {}\n  @Public()\n  @Post()\n  /** `POST /auth` logs in a user, returns a JWT */\n  login(@Body() userAuth: UserAuth) {\n    try {\n      return this.authService.login(userAuth);\n    } catch (err) {\n      throw err;\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/AuthGuard.html":{"url":"guards/AuthGuard.html","title":"guard - AuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    AuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/auth/auth.guard.ts\n            \n\n\n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                _extractTokenFromHeader\n                            \n                            \n                                    Async\n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(jwt: JwtService, reflector: Reflector)\n                    \n                \n                        \n                            \n                                Defined in src/auth/auth.guard.ts:20\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        jwt\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        _extractTokenFromHeader\n                        \n                    \n                \n            \n            \n                \n                    \n                    _extractTokenFromHeader(request: Request)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.guard.ts:46\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     string | undefined\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        canActivate\n                        \n                    \n                \n            \n            \n                \n                    \n                    canActivate(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.guard.ts:23\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n        \n\n\n        \n            import {\n  CanActivate,\n  ExecutionContext,\n  Injectable,\n  UnauthorizedException,\n  SetMetadata,\n} from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\nimport { JwtService } from '@nestjs/jwt';\nimport { Request } from 'express';\n\nexport const IS_PUBLIC_KEY = 'isPublic';\nexport const Public = () => SetMetadata(IS_PUBLIC_KEY, true);\n\n@Injectable()\n/** Authentication Guard. By default every endpoint ask for a JWT.\n * The only exceptions are user creation and user login.\n * After JWT verifiation, the guard injects the user id into the request.\n */\nexport class AuthGuard implements CanActivate {\n  constructor(private jwt: JwtService, private reflector: Reflector) {}\n\n  async canActivate(context: ExecutionContext): Promise {\n    const isPublic = this.reflector.getAllAndOverride(IS_PUBLIC_KEY, [\n      context.getHandler(),\n      context.getClass(),\n    ]);\n    if (isPublic) {\n      return true;\n    }\n\n    const request = context.switchToHttp().getRequest();\n    const token = this._extractTokenFromHeader(request);\n    if (!token) {\n      throw new UnauthorizedException();\n    }\n    try {\n      const payload = this.jwt.decode(token);\n      request['user'] = payload;\n    } catch {\n      throw new UnauthorizedException();\n    }\n    return true;\n  }\n\n  private _extractTokenFromHeader(request: Request): string | undefined {\n    const [type, token] = request.headers.authorization?.split(' ') ?? [];\n    return type === 'Bearer' ? token : undefined;\n  }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_providers\n\n\n\n\nAuthService\n\nAuthService\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AuthService } from './auth.service';\nimport { AuthController } from './auth.controller';\nimport { JwtModule } from '@nestjs/jwt';\nimport { ConfigModule } from '@nestjs/config';\nimport { ConfigService } from '@nestjs/config';\nimport { AuthGuard } from './auth.guard';\nimport { APP_GUARD } from '@nestjs/core';\n@Module({\n  imports: [\n    JwtModule.registerAsync({\n      imports: [ConfigModule],\n      useFactory: async (configService: ConfigService) => ({\n        secret: configService.get('JWT_SECRET'),\n      }),\n      inject: [ConfigService],\n    }),\n  ],\n  providers: [\n    AuthService,\n    {\n      provide: APP_GUARD,\n      useClass: AuthGuard,\n    },\n  ],\n  controllers: [AuthController],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                login\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(db: Db, jwt: JwtService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/auth.service.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        db\n                                                  \n                                                        \n                                                                        Db\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwt\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                    \n                    login(userAuth: UserAuth)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:12\n                \n            \n\n\n            \n                \n                    User login, if the user credential are correct, a JWT with the userID is issued\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userAuth\n                                    \n                                                UserAuth\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { HttpException, HttpStatus, Injectable } from '@nestjs/common';\nimport { UserAuth } from 'models/users.entity';\nimport { Db } from 'src/shared/db/db.service';\nimport * as sha256 from 'crypto-js/sha256';\nimport { JwtService } from '@nestjs/jwt';\nimport { HandleErr } from 'src/common/errors';\n\n@Injectable()\nexport class AuthService {\n  constructor(private db: Db, private jwt: JwtService) {}\n  /** User login, if the user credential are correct, a JWT with the userID is issued */\n  async login(userAuth: UserAuth) {\n    try {\n      const user = this.db.getUser(userAuth.userId);\n      if (sha256(userAuth.password).toString() !== user?.password) {\n        throw new HttpException('Failed login', HttpStatus.UNAUTHORIZED);\n      }\n      const jwtPayload = { userId: userAuth.userId };\n      return {\n        accessToken: await this.jwt.signAsync(jwtPayload),\n      };\n    } catch (err) {\n      HandleErr(err);\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Bid.html":{"url":"classes/Bid.html","title":"class - Bid","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Bid\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            models/bids.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                The Bid entity, used to bid on a auction offer or to buy a sale offer\n\n            \n\n            \n                Extends\n            \n            \n                        CreateBidDto\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                createdAt\n                            \n                            \n                                    Optional\n                                DeletedAt\n                            \n                            \n                                updatedAt\n                            \n                            \n                                userId\n                            \n                            \n                                    \n                                bidAmount\n                            \n                            \n                                    \n                                    \n                                sellOfferId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(values: CreateBidDto, userId: number)\n                    \n                \n                        \n                            \n                                Defined in models/bids.entity.ts:22\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        values\n                                                  \n                                                        \n                                                                        CreateBidDto\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userId\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                    \n                        \n                                Defined in models/bids.entity.ts:18\n                        \n                    \n\n            \n                \n                    the creation date\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        DeletedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                    \n                        \n                                Defined in models/bids.entity.ts:22\n                        \n                    \n\n            \n                \n                    the date of deletion. If not undefined the bid entity is considered soft deleted\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                    \n                        \n                                Defined in models/bids.entity.ts:20\n                        \n                    \n\n            \n                \n                    the date of last update\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in models/bids.entity.ts:16\n                        \n                    \n\n            \n                \n                    the id of the bid issuer\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        bidAmount\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsPositive()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         CreateBidDto\n\n                            \n                        \n                    \n                        \n                                Defined in         CreateBidDto:11\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        sellOfferId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsInt()@Min(0)\n                        \n                    \n                \n                        \n                            \n                                Inherited from         CreateBidDto\n\n                            \n                        \n                    \n                        \n                                Defined in         CreateBidDto:8\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Min, IsInt, IsPositive, IsOptional } from 'class-validator';\n\n/** The bid creation  object, used as the body of the bid creation request */\nexport class CreateBidDto {\n  @IsInt()\n  @Min(0)\n  /** The id of the sell offer associated to the bid */\n  sellOfferId: number;\n  @IsPositive()\n  /** The amount of tokens to bid, is a number > 0 */\n  bidAmount: number;\n}\n/** The Bid entity, used to bid on a auction offer or to buy a sale offer  */\nexport class Bid extends CreateBidDto {\n  /** the id of the bid issuer */\n  userId: number;\n  /** the creation date */\n  createdAt: Date;\n  /** the date of last update */\n  updatedAt: Date;\n  /** the date of deletion. If not undefined the bid entity is considered soft deleted */\n  DeletedAt?: Date;\n\n  constructor(values: CreateBidDto, userId: number) {\n    super();\n    Object.assign(this, values);\n    this.userId = userId;\n    this.createdAt = new Date();\n    this.updatedAt = new Date();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/BidsController.html":{"url":"controllers/BidsController.html","title":"controller - BidsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  BidsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/bids/bids.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                bids\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                create\n                            \n                            \n                                    \n                                findAll\n                            \n                            \n                                    \n                                findByUser\n                            \n                            \n                                    \n                                findOne\n                            \n                            \n                                    \n                                remove\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(createBidDto: CreateBidDto, req: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n            \n                \n                    Defined in src/bids/bids.controller.ts:17\n                \n            \n\n\n            \n                \n                    POST /bids Creates a bid\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createBidDto\n                                    \n                                                CreateBidDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    req\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n            \n                \n                    Defined in src/bids/bids.controller.ts:27\n                \n            \n\n\n            \n                \n                    GET /bids Fetch all non deleted bids\n\n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        findByUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    findByUser(req: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('me')\n                \n            \n\n            \n                \n                    Defined in src/bids/bids.controller.ts:33\n                \n            \n\n\n            \n                \n                    GET /bids/me Fetch all bids of the user (the JWT issuer)\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        findOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')\n                \n            \n\n            \n                \n                    Defined in src/bids/bids.controller.ts:38\n                \n            \n\n\n            \n                \n                    GET /bids/:id Fetch a single bid\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        remove\n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(id: string, req: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')\n                \n            \n\n            \n                \n                    Defined in src/bids/bids.controller.ts:47\n                \n            \n\n\n            \n                \n                    DELETE /bids/:id remove a bid of an ongoing auction\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    req\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Post,\n  Body,\n  Param,\n  Delete,\n  Req,\n} from '@nestjs/common';\nimport { CreateBidDto } from 'models/bids.entity';\nimport { BidsService } from './bids.service';\n@Controller('bids')\nexport class BidsController {\n  constructor(private readonly bidsService: BidsService) {}\n  /** `POST /bids` Creates a bid */\n  @Post()\n  create(@Body() createBidDto: CreateBidDto, @Req() req: any) {\n    try {\n      return this.bidsService.create(createBidDto, req.user.userId);\n    } catch (err) {\n      throw err;\n    }\n  }\n\n  /** `GET /bids` Fetch all non deleted bids */\n  @Get()\n  findAll() {\n    return this.bidsService.findAll();\n  }\n\n  /** `GET /bids/me` Fetch all bids of the user (the JWT issuer) */\n  @Get('me')\n  findByUser(@Req() req: any) {\n    return this.bidsService.findAll(req.user.userId);\n  }\n  /** `GET /bids/:id` Fetch a single bid */\n  @Get(':id')\n  findOne(@Param('id') id: string) {\n    try {\n      return this.bidsService.findOne(+id);\n    } catch (err) {\n      throw err;\n    }\n  }\n  /** `DELETE /bids/:id` remove a bid of an ongoing auction */\n  @Delete(':id')\n  remove(@Param('id') id: string, @Req() req: any) {\n    return this.bidsService.remove(req.user.userId, +id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/BidsModule.html":{"url":"modules/BidsModule.html","title":"module - BidsModule","body":"\n                   \n\n\n\n\n    Modules\n    BidsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_BidsModule\n\n\n\ncluster_BidsModule_providers\n\n\n\ncluster_BidsModule_imports\n\n\n\n\nClientsModule\n\nClientsModule\n\n\n\nBidsModule\n\nBidsModule\n\nBidsModule -->\n\nClientsModule->BidsModule\n\n\n\n\n\nDbModule\n\nDbModule\n\nBidsModule -->\n\nDbModule->BidsModule\n\n\n\n\n\nBidsService\n\nBidsService\n\nBidsModule -->\n\nBidsService->BidsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/bids/bids.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            BidsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            BidsController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            ClientsModule\n                        \n                        \n                            DbModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { BidsService } from './bids.service';\nimport { BidsController } from './bids.controller';\nimport { DbModule } from 'src/shared/db/db.module';\nimport { ClientsModule } from 'src/shared/clients/clients.module';\n\n@Module({\n  imports: [DbModule, ClientsModule],\n  controllers: [BidsController],\n  providers: [BidsService],\n})\nexport class BidsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/BidsService.html":{"url":"injectables/BidsService.html","title":"injectable - BidsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  BidsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/bids/bids.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                findAll\n                            \n                            \n                                findOne\n                            \n                            \n                                remove\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(client: Client, db: Db)\n                    \n                \n                        \n                            \n                                Defined in src/bids/bids.service.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        client\n                                                  \n                                                        \n                                                                        Client\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        db\n                                                  \n                                                        \n                                                                        Db\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(createBidDto: CreateBidDto, userId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/bids/bids.service.ts:17\n                \n            \n\n\n            \n                \n                    the creation bid services.\nIf the sell offer is a sale, it executes the exchange inmediatly.\nIf is an auction, place the bid and update the highest bidder of the offer\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createBidDto\n                                    \n                                                CreateBidDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAll\n                        \n                    \n                \n            \n            \n                \nfindAll(user?: number)\n                \n            \n\n\n            \n                \n                    Defined in src/bids/bids.service.ts:60\n                \n            \n\n\n            \n                \n                    Finds all non deleted bids.\nIf a user id is provided, returns only the bids owned by that user id\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findOne\n                        \n                    \n                \n            \n            \n                \nfindOne(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/bids/bids.service.ts:70\n                \n            \n\n\n            \n                \n                    Finds the bid with the id provided.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        remove\n                        \n                    \n                \n            \n            \n                \nremove(user: number, id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/bids/bids.service.ts:81\n                \n            \n\n\n            \n                \n                    removes a bid only if the sellOffer is an ongoing auction.\nIf the deleted bid was the highest one, the service will restore the highest bidder and current bid of the offer to the previous highest bid.\nIf there are no more bids, it restore the values to default.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { HttpException, HttpStatus, Injectable } from '@nestjs/common';\nimport { Bid, CreateBidDto } from 'models/bids.entity';\nimport { Db } from 'src/shared/db/db.service';\nimport { Client } from 'src/shared/clients/clients.service';\nimport { AuctionState } from 'models/sellOffer.entity';\nimport { finishAuction } from 'src/common/tools/tools';\nimport { HandleErr, NotOwner } from 'src/common/errors';\n\n@Injectable()\nexport class BidsService {\n  constructor(private client: Client, private db: Db) {}\n  /**\n   * the creation bid services.\n   * If the sell offer is a sale, it executes the exchange inmediatly.\n   * If is an auction, place the bid and update the highest bidder of the offer\n   */\n  async create(createBidDto: CreateBidDto, userId: number) {\n    try {\n      const offer = this.db.getSellOffer(createBidDto.sellOfferId);\n      switch (offer.auctionState) {\n        case AuctionState.Closed:\n          throw new HttpException(\n            'Offer does not accept more bids',\n            HttpStatus.CONFLICT,\n          );\n        case AuctionState.OnSale:\n          const bidder = this.db.getUser(userId);\n          if (!bidder) {\n            throw new HttpException('User not found', HttpStatus.NOT_FOUND);\n          }\n          const seller = this.db.getUser(offer.userId);\n          await finishAuction(seller, bidder, offer, this.client);\n          break;\n        case AuctionState.OnAuction:\n          if (createBidDto.bidAmount  {\n      if (user) {\n        return bid.DeletedAt !== null && bid.userId == user;\n      }\n      return bid.DeletedAt !== null;\n    });\n  }\n\n  /** Finds the bid with the id provided. */\n  findOne(id: number) {\n    try {\n      return this.db.getBid(id);\n    } catch (err) {\n      HandleErr(err);\n    }\n  }\n  /** removes a bid only if the sellOffer is an ongoing auction.\n   * If the deleted bid was the highest one, the service will restore the highest bidder and current bid of the offer to the previous highest bid.\n   * If there are no more bids, it restore the values to default.\n   */\n  remove(user: number, id: number) {\n    try {\n      const bid = this.db.getBid(id);\n      if (bid.userId !== user) {\n        throw new NotOwner('bid');\n      }\n      bid.DeletedAt = new Date();\n      const offer = this.db.getSellOffer(bid.sellOfferId);\n      if (offer.currentBid === bid.bidAmount) {\n        const lastBid = this.db.bids\n          .filter((b) => {\n            return bid.sellOfferId === b.sellOfferId && !b.DeletedAt;\n          })\n          .sort((b1, b2) => b1.bidAmount - b2.bidAmount)[0];\n        if (!lastBid) {\n          offer.highestBidder = undefined;\n          offer.currentBid = offer.minOffer || 0;\n        } else {\n          offer.highestBidder = lastBid.userId;\n          offer.currentBid = lastBid.bidAmount;\n        }\n      }\n      return bid;\n    } catch (err) {\n      HandleErr(err);\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/Client.html":{"url":"injectables/Client.html","title":"injectable - Client","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  Client\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/shared/clients/clients.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Async\n                                _callContract\n                            \n                            \n                                    Private\n                                    Async\n                                _getBidderSign\n                            \n                            \n                                    Private\n                                    Async\n                                _getSellerSign\n                            \n                            \n                                    Private\n                                    Async\n                                _readContract\n                            \n                            \n                                    Async\n                                approveNft\n                            \n                            \n                                    Async\n                                approveToken\n                            \n                            \n                                    Async\n                                finishAuction\n                            \n                            \n                                    Async\n                                getNfts\n                            \n                            \n                                    Async\n                                getTokens\n                            \n                            \n                                    Async\n                                mint\n                            \n                            \n                                    Async\n                                ownerOf\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        Async\n                        _callContract\n                        \n                    \n                \n            \n            \n                \n                    \n                    _callContract(privateKey: string, input: Array, contractAddr: string, method: string)\n                \n            \n\n\n            \n                \n                    Defined in src/shared/clients/clients.service.ts:42\n                \n            \n\n\n            \n                \n                    Internal method that calls a write method of a given contract with the given inputs\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    privateKey\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    input\n                                    \n                                            Array\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    contractAddr\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    method\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        Async\n                        _getBidderSign\n                        \n                    \n                \n            \n            \n                \n                    \n                    _getBidderSign(inputs: FinishAuctionInput, privateKey: string)\n                \n            \n\n\n            \n                \n                    Defined in src/shared/clients/clients.service.ts:23\n                \n            \n\n\n            \n                \n                    Internal method that creates the bidder signature of the transaction\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    inputs\n                                    \n                                                FinishAuctionInput\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    privateKey\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        Async\n                        _getSellerSign\n                        \n                    \n                \n            \n            \n                \n                    \n                    _getSellerSign(bidderSignedMsg: string, privateKey: string)\n                \n            \n\n\n            \n                \n                    Defined in src/shared/clients/clients.service.ts:36\n                \n            \n\n\n            \n                \n                    Internal method that creates the seller signature of the transaction\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    bidderSignedMsg\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    privateKey\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        Async\n                        _readContract\n                        \n                    \n                \n            \n            \n                \n                    \n                    _readContract(input: Array, contractAddr: string, method: string)\n                \n            \n\n\n            \n                \n                    Defined in src/shared/clients/clients.service.ts:60\n                \n            \n\n\n            \n                \n                    Internal method that calls a read method of a given contract\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    input\n                                    \n                                            Array\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    contractAddr\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    method\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        approveNft\n                        \n                    \n                \n            \n            \n                \n                    \n                    approveNft(key: string, toAddress: string, tokenId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/shared/clients/clients.service.ts:132\n                \n            \n\n\n            \n                \n                    Approves the transfer of a nft to the toAddress address\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    key\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    toAddress\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    tokenId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        approveToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    approveToken(key: string, toAddress: string, amount: string)\n                \n            \n\n\n            \n                \n                    Defined in src/shared/clients/clients.service.ts:122\n                \n            \n\n\n            \n                \n                    Approves the amount of tokens to be transfered to the toAddress address\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    key\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    toAddress\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    amount\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        finishAuction\n                        \n                    \n                \n            \n            \n                \n                    \n                    finishAuction(bidderKey: string, sellerKey: string, input: FinishAuctionInput)\n                \n            \n\n\n            \n                \n                    Defined in src/shared/clients/clients.service.ts:142\n                \n            \n\n\n            \n                \n                    calls the finisAuction method of the Marketplace contract to execute the transaction of nft for tokens.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    bidderKey\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    sellerKey\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    input\n                                    \n                                                FinishAuctionInput\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getNfts\n                        \n                    \n                \n            \n            \n                \n                    \n                    getNfts(userAddr: string)\n                \n            \n\n\n            \n                \n                    Defined in src/shared/clients/clients.service.ts:100\n                \n            \n\n\n            \n                \n                    Gets the ids of the ERC721 nfts owned by a user\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userAddr\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getTokens\n                        \n                    \n                \n            \n            \n                \n                    \n                    getTokens(userAddr: string)\n                \n            \n\n\n            \n                \n                    Defined in src/shared/clients/clients.service.ts:91\n                \n            \n\n\n            \n                \n                    Gets the amount of ERC20 tokens owned by a user\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userAddr\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        mint\n                        \n                    \n                \n            \n            \n                \n                    \n                    mint(key: string, toAddress: string, amount?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/shared/clients/clients.service.ts:80\n                \n            \n\n\n            \n                \n                    Calls the method of the MockERC721 contract to mint a nft or the MockERC20 contract to mint the amount tokens\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    key\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    toAddress\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    amount\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        ownerOf\n                        \n                    \n                \n            \n            \n                \n                    \n                    ownerOf(tokenId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/shared/clients/clients.service.ts:71\n                \n            \n\n\n            \n                \n                    Calls the ownerOf method of the MockERC721 contract to know the owner of a nft\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    tokenId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { ThirdwebSDK } from '@thirdweb-dev/sdk';\nimport { Sepolia } from '@thirdweb-dev/chains';\nimport { MetaMaskInpageProvider } from '@metamask/providers';\nimport { BigNumber } from 'ethers';\nimport { eth, Receipt, utils } from 'web3';\n\ndeclare global {\n  interface Window {\n    ethereum?: MetaMaskInpageProvider;\n  }\n}\n\ninterface FinishAuctionInput {\n  tokenId: string;\n  bid: string;\n}\n\n@Injectable()\n/** Client used to call the smart contract in the Sepolia test network */\nexport class Client {\n  /** Internal method that creates the bidder signature of the transaction */\n  private async _getBidderSign(inputs: FinishAuctionInput, privateKey: string) {\n    const hashMessage = utils.sha3(\n      utils.encodePacked(\n        { value: process.env.ERC721_CONTRACT, type: 'address' },\n        { value: process.env.ERC20_CONTRACT, type: 'address' },\n        { value: inputs.tokenId, type: 'uint256' },\n        { value: inputs.bid, type: 'uint256' },\n      ),\n    );\n    const signedMsg = eth.accounts.sign(hashMessage, privateKey);\n    return signedMsg;\n  }\n  /** Internal method that creates the seller signature of the transaction */\n  private async _getSellerSign(bidderSignedMsg: string, privateKey: string) {\n    const hashMessage = utils.sha3(bidderSignedMsg);\n    const signedMsg = eth.accounts.sign(hashMessage, privateKey);\n    return signedMsg;\n  }\n  /** Internal method that calls a write method of a given contract with the given inputs */\n  private async _callContract(\n    privateKey: string,\n    input: Array,\n    contractAddr: string,\n    method: string,\n  ): Promise {\n    try {\n      const sdk = ThirdwebSDK.fromPrivateKey(privateKey, Sepolia, {\n        secretKey: process.env.CLIENT_KEY,\n      });\n      const contract = await sdk.getContract(contractAddr);\n      const ans = await contract.call(method, input);\n      return ans;\n    } catch (err) {\n      throw err;\n    }\n  }\n  /** Internal method that calls a read method of a given contract */\n  private async _readContract(\n    input: Array,\n    contractAddr: string,\n    method: string,\n  ): Promise {\n    const sdk = new ThirdwebSDK(Sepolia, { secretKey: process.env.CLIENT_KEY });\n    const contract = await sdk.getContract(contractAddr);\n    const ans = await contract.call(method, input);\n    return ans;\n  }\n  /** Calls the ownerOf method of the MockERC721 contract to know the owner of a nft*/\n  async ownerOf(tokenId: string): Promise {\n    const res = await this._readContract(\n      [tokenId],\n      process.env.ERC721_CONTRACT,\n      'ownerOf',\n    );\n    return res;\n  }\n  /** Calls the method of the MockERC721 contract to mint a nft or the MockERC20 contract to mint the `amount` tokens */\n  async mint(key: string, toAddress: string, amount?: string): Promise {\n    const addr = amount\n      ? process.env.ERC20_CONTRACT\n      : process.env.ERC721_CONTRACT;\n    const input = amount\n      ? [toAddress, utils.toWei(amount, 'ether')]\n      : [toAddress];\n    const res = await this._callContract(key, input, addr, 'mint');\n    return res;\n  }\n  /** Gets the amount of ERC20 tokens owned by a user */\n  async getTokens(userAddr: string): Promise {\n    const balance: BigNumber = await this._readContract(\n      [userAddr],\n      process.env.ERC20_CONTRACT,\n      'balanceOf',\n    );\n    return utils.fromWei(balance.toBigInt(), 'ether');\n  }\n  /** Gets the ids of the ERC721 nfts owned by a user */\n  async getNfts(userAddr: string): Promise {\n    const balance: BigNumber = await this._readContract(\n      [userAddr],\n      process.env.ERC721_CONTRACT,\n      'balanceOf',\n    );\n    const promises = Array.from(\n      { length: balance.toNumber() },\n      async (_, i) => {\n        const promise = await this._readContract(\n          [userAddr, i.toString()],\n          process.env.ERC721_CONTRACT,\n          'tokenOfOwnerByIndex',\n        );\n        console.log(promise);\n        return promise;\n      },\n    );\n    const allRes = Promise.all(promises);\n    return allRes;\n  }\n  /** Approves the `amount` of tokens to be transfered to the `toAddress` address */\n  async approveToken(key: string, toAddress: string, amount: string) {\n    const res = this._callContract(\n      key,\n      [toAddress, utils.toWei(amount, 'ether')],\n      process.env.ERC20_CONTRACT,\n      'approve',\n    );\n    return res;\n  }\n  /** Approves the transfer of a nft to the `toAddress` address */\n  async approveNft(key: string, toAddress: string, tokenId: string) {\n    const res = this._callContract(\n      key,\n      [toAddress, tokenId],\n      process.env.ERC721_CONTRACT,\n      'approve',\n    );\n    return res;\n  }\n  /** calls the finisAuction method of the Marketplace contract to execute the transaction of nft for tokens. */\n  async finishAuction(\n    bidderKey: string,\n    sellerKey: string,\n    input: FinishAuctionInput,\n  ) {\n    const bidderSignature = await this._getBidderSign(input, bidderKey);\n    const sellerSignature = await this._getSellerSign(\n      bidderSignature.signature,\n      sellerKey,\n    );\n    const inputArr = [\n      [\n        process.env.ERC721_CONTRACT,\n        process.env.ERC20_CONTRACT,\n        input.tokenId,\n        input.bid,\n      ],\n      bidderSignature.signature,\n      sellerSignature.signature,\n    ];\n    const res: Receipt = await this._callContract(\n      bidderKey,\n      inputArr,\n      process.env.FINISH_CONTRACT,\n      'finishAuction',\n    );\n    return res;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ClientsModule.html":{"url":"modules/ClientsModule.html","title":"module - ClientsModule","body":"\n                   \n\n\n\n\n    Modules\n    ClientsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_ClientsModule\n\n\n\ncluster_ClientsModule_exports\n\n\n\ncluster_ClientsModule_providers\n\n\n\n\nClient \n\nClient \n\n\n\nClientsModule\n\nClientsModule\n\nClient  -->\n\nClientsModule->Client \n\n\n\n\n\nClient\n\nClient\n\nClientsModule -->\n\nClient->ClientsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/shared/clients/clients.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            Client\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            Client\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Global, Module } from '@nestjs/common';\nimport { Client } from './clients.service';\n\n@Global()\n@Module({\n  exports: [Client],\n  providers: [Client],\n})\nexport class ClientsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CloseDto.html":{"url":"classes/CloseDto.html","title":"class - CloseDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CloseDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            models/sellOffer.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                sellOfferId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        sellOfferId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Min(0)\n                        \n                    \n                \n                    \n                        \n                                Defined in models/sellOffer.entity.ts:51\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsInt, IsOptional, IsPositive, Min } from 'class-validator';\n\nexport enum AuctionState {\n  OnSale,\n  OnAuction,\n  Closed,\n}\n\nexport class CreateSellOfferDto {\n  @IsInt()\n  @Min(0)\n  tokenId: number;\n  @IsPositive()\n  @IsOptional()\n  price?: number;\n  @IsPositive()\n  @IsOptional()\n  minOffer?: number;\n}\n\nexport class UpdatePrice {\n  @IsPositive()\n  price: number;\n}\n\nexport class SellOffer extends CreateSellOfferDto {\n  userId: number;\n  currentBid: number;\n  auctionState: AuctionState;\n  finishAuctionTx: string;\n  highestBidder: number;\n  createdAt: Date;\n  updatedAt: Date;\n  DeletedAt?: Date;\n\n  constructor(values: CreateSellOfferDto, userId: number) {\n    super();\n    Object.assign(this, values);\n    this.auctionState = values.price\n      ? AuctionState.OnSale\n      : AuctionState.OnAuction;\n    this.currentBid = this.minOffer || 0;\n    this.userId = userId;\n    this.createdAt = new Date();\n    this.updatedAt = new Date();\n  }\n}\n\nexport class CloseDto {\n  @Min(0)\n  sellOfferId: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateBidDto.html":{"url":"classes/CreateBidDto.html","title":"class - CreateBidDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateBidDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            models/bids.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                The bid creation  object, used as the body of the bid creation request\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                bidAmount\n                            \n                            \n                                    \n                                    \n                                sellOfferId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        bidAmount\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsPositive()\n                        \n                    \n                \n                    \n                        \n                                Defined in models/bids.entity.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        sellOfferId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsInt()@Min(0)\n                        \n                    \n                \n                    \n                        \n                                Defined in models/bids.entity.ts:8\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Min, IsInt, IsPositive, IsOptional } from 'class-validator';\n\n/** The bid creation  object, used as the body of the bid creation request */\nexport class CreateBidDto {\n  @IsInt()\n  @Min(0)\n  /** The id of the sell offer associated to the bid */\n  sellOfferId: number;\n  @IsPositive()\n  /** The amount of tokens to bid, is a number > 0 */\n  bidAmount: number;\n}\n/** The Bid entity, used to bid on a auction offer or to buy a sale offer  */\nexport class Bid extends CreateBidDto {\n  /** the id of the bid issuer */\n  userId: number;\n  /** the creation date */\n  createdAt: Date;\n  /** the date of last update */\n  updatedAt: Date;\n  /** the date of deletion. If not undefined the bid entity is considered soft deleted */\n  DeletedAt?: Date;\n\n  constructor(values: CreateBidDto, userId: number) {\n    super();\n    Object.assign(this, values);\n    this.userId = userId;\n    this.createdAt = new Date();\n    this.updatedAt = new Date();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateSellOfferDto.html":{"url":"classes/CreateSellOfferDto.html","title":"class - CreateSellOfferDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateSellOfferDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            models/sellOffer.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Optional\n                                minOffer\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                price\n                            \n                            \n                                    \n                                    \n                                tokenId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        minOffer\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsPositive()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in models/sellOffer.entity.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        price\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsPositive()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in models/sellOffer.entity.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        tokenId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsInt()@Min(0)\n                        \n                    \n                \n                    \n                        \n                                Defined in models/sellOffer.entity.ts:12\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsInt, IsOptional, IsPositive, Min } from 'class-validator';\n\nexport enum AuctionState {\n  OnSale,\n  OnAuction,\n  Closed,\n}\n\nexport class CreateSellOfferDto {\n  @IsInt()\n  @Min(0)\n  tokenId: number;\n  @IsPositive()\n  @IsOptional()\n  price?: number;\n  @IsPositive()\n  @IsOptional()\n  minOffer?: number;\n}\n\nexport class UpdatePrice {\n  @IsPositive()\n  price: number;\n}\n\nexport class SellOffer extends CreateSellOfferDto {\n  userId: number;\n  currentBid: number;\n  auctionState: AuctionState;\n  finishAuctionTx: string;\n  highestBidder: number;\n  createdAt: Date;\n  updatedAt: Date;\n  DeletedAt?: Date;\n\n  constructor(values: CreateSellOfferDto, userId: number) {\n    super();\n    Object.assign(this, values);\n    this.auctionState = values.price\n      ? AuctionState.OnSale\n      : AuctionState.OnAuction;\n    this.currentBid = this.minOffer || 0;\n    this.userId = userId;\n    this.createdAt = new Date();\n    this.updatedAt = new Date();\n  }\n}\n\nexport class CloseDto {\n  @Min(0)\n  sellOfferId: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateTokenDto.html":{"url":"classes/CreateTokenDto.html","title":"class - CreateTokenDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateTokenDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            models/token.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Optional\n                                amount\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        amount\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in models/token.entity.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsOptional, IsString } from 'class-validator';\n\nexport class CreateTokenDto {\n  @IsString()\n  @IsOptional()\n  amount?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserDto.html":{"url":"classes/CreateUserDto.html","title":"class - CreateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            models/users.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                entropy\n                            \n                            \n                                    \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        entropy\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in models/users.entity.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in models/users.entity.ts:17\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Min, IsString, IsInt } from 'class-validator';\nimport { ethers } from 'ethers';\nimport { utils } from 'web3';\n\nexport class UserAuth {\n  @IsInt()\n  @Min(0)\n  userId: number;\n  @IsString()\n  password: string;\n}\n\nexport class CreateUserDto {\n  @IsString()\n  entropy: string;\n  @IsString()\n  password: string;\n}\n\nexport class User {\n  userKey: string;\n  password: string;\n  userAddr: string;\n  createdAt: Date;\n  updatedAt: Date;\n  DeletedAt?: Date;\n\n  constructor(values: CreateUserDto) {\n    const key = utils.sha3(values.entropy);\n    const wallet = new ethers.Wallet(key);\n    this.userKey = key;\n    this.userAddr = wallet.address;\n    Object.assign(this, values);\n    this.createdAt = new Date();\n    this.updatedAt = new Date();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/Db.html":{"url":"injectables/Db.html","title":"injectable - Db","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  Db\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/shared/db/db.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                bids\n                            \n                            \n                                sellOffers\n                            \n                            \n                                users\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                _getEntity\n                            \n                            \n                                    Private\n                                _lastIndex\n                            \n                            \n                                getBid\n                            \n                            \n                                getSellOffer\n                            \n                            \n                                getUser\n                            \n                            \n                                lastBidIndex\n                            \n                            \n                                lastSellIndex\n                            \n                            \n                                lastUserIndex\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/shared/db/db.service.ts:13\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        _getEntity\n                        \n                    \n                \n            \n            \n                \n                    \n                    _getEntity(id: number, db: T[], entityName: string)\n                \n            \n\n\n            \n                \n                    Defined in src/shared/db/db.service.ts:28\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n                    returns safely the entity queried. It garcefully fails if the query is not possible\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    db\n                                    \n                                            T[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    entityName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     T\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        _lastIndex\n                        \n                    \n                \n            \n            \n                \n                    \n                    _lastIndex(db: Array)\n                \n            \n\n\n            \n                \n                    Defined in src/shared/db/db.service.ts:21\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    db\n                                    \n                                            Array\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getBid\n                        \n                    \n                \n            \n            \n                \ngetBid(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/shared/db/db.service.ts:42\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Bid\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getSellOffer\n                        \n                    \n                \n            \n            \n                \ngetSellOffer(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/shared/db/db.service.ts:49\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         SellOffer\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getUser\n                        \n                    \n                \n            \n            \n                \ngetUser(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/shared/db/db.service.ts:52\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         User\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        lastBidIndex\n                        \n                    \n                \n            \n            \n                \nlastBidIndex()\n                \n            \n\n\n            \n                \n                    Defined in src/shared/db/db.service.ts:55\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         number\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        lastSellIndex\n                        \n                    \n                \n            \n            \n                \nlastSellIndex()\n                \n            \n\n\n            \n                \n                    Defined in src/shared/db/db.service.ts:58\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         number\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        lastUserIndex\n                        \n                    \n                \n            \n            \n                \nlastUserIndex()\n                \n            \n\n\n            \n                \n                    Defined in src/shared/db/db.service.ts:61\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         number\n\n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        bids\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Bid[]\n\n                    \n                \n                    \n                        \n                                Defined in src/shared/db/db.service.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        sellOffers\n                        \n                    \n                \n            \n                \n                    \n                        Type :         SellOffer[]\n\n                    \n                \n                    \n                        \n                                Defined in src/shared/db/db.service.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        users\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User[]\n\n                    \n                \n                    \n                        \n                                Defined in src/shared/db/db.service.ts:13\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { Bid } from 'models/bids.entity';\nimport { SellOffer } from 'models/sellOffer.entity';\nimport { EntityType as ET } from 'models/entityType.interface';\nimport { User } from 'models/users.entity';\nimport { DeletedEntity, EntityNotFound, InvalidId } from 'src/common/errors';\n\n@Injectable()\n/** represents the db of the application. Every `table` is an Array of the table type */\nexport class Db {\n  bids: Bid[];\n  sellOffers: SellOffer[];\n  users: User[];\n\n  constructor() {\n    this.bids = [];\n    this.sellOffers = [];\n    this.users = [];\n  }\n\n  private _lastIndex(db: Array) {\n    if (db.length === 0) {\n      return 0;\n    }\n    return db.length - 1;\n  }\n  /** returns safely the entity queried. It garcefully fails if the query is not possible */\n  private _getEntity(id: number, db: T[], entityName: string): T {\n    if (id > this._lastIndex(db) || id \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/DbModule.html":{"url":"modules/DbModule.html","title":"module - DbModule","body":"\n                   \n\n\n\n\n    Modules\n    DbModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_DbModule\n\n\n\ncluster_DbModule_providers\n\n\n\ncluster_DbModule_exports\n\n\n\n\nDb \n\nDb \n\n\n\nDbModule\n\nDbModule\n\nDb  -->\n\nDbModule->Db \n\n\n\n\n\nDb\n\nDb\n\nDbModule -->\n\nDb->DbModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/shared/db/db.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            Db\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            Db\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Global, Module } from '@nestjs/common';\nimport { Db } from './db.service';\n\n@Global()\n@Module({\n  exports: [Db],\n  providers: [Db],\n})\nexport class DbModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DeletedEntity.html":{"url":"classes/DeletedEntity.html","title":"class - DeletedEntity","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DeletedEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/errors.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    Error\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(entity: string)\n                    \n                \n                        \n                            \n                                Defined in src/common/errors.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        entity\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { HttpException, HttpStatus } from '@nestjs/common';\n\nexport class InvalidId extends Error {\n  constructor() {\n    super('Invalid Id');\n  }\n}\n\nexport class DeletedEntity extends Error {\n  constructor(entity: string) {\n    super(`The ${entity} is deleted`);\n  }\n}\n\nexport class EntityNotFound extends Error {\n  constructor(entity: string, id: number) {\n    super(`Could not find the ${entity} with id ${id}`);\n  }\n}\n\nexport class NotOwner extends HttpException {\n  constructor(entity: string) {\n    super(`You are not the owner of the ${entity}`, HttpStatus.FORBIDDEN);\n  }\n}\n\nexport const HandleErr = (\n  err: InvalidId | DeletedEntity | HttpException | Error,\n) => {\n  if (err instanceof InvalidId || err instanceof DeletedEntity) {\n    throw new HttpException(err.message, HttpStatus.BAD_REQUEST);\n  }\n\n  if (err instanceof EntityNotFound) {\n    throw new HttpException(err.message, HttpStatus.NOT_FOUND);\n  }\n\n  if (err instanceof HttpException) {\n    throw err;\n  }\n  throw new HttpException(err.message, HttpStatus.INTERNAL_SERVER_ERROR);\n};\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/EntityNotFound.html":{"url":"classes/EntityNotFound.html","title":"class - EntityNotFound","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  EntityNotFound\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/errors.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    Error\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(entity: string, id: number)\n                    \n                \n                        \n                            \n                                Defined in src/common/errors.ts:15\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        entity\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        id\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { HttpException, HttpStatus } from '@nestjs/common';\n\nexport class InvalidId extends Error {\n  constructor() {\n    super('Invalid Id');\n  }\n}\n\nexport class DeletedEntity extends Error {\n  constructor(entity: string) {\n    super(`The ${entity} is deleted`);\n  }\n}\n\nexport class EntityNotFound extends Error {\n  constructor(entity: string, id: number) {\n    super(`Could not find the ${entity} with id ${id}`);\n  }\n}\n\nexport class NotOwner extends HttpException {\n  constructor(entity: string) {\n    super(`You are not the owner of the ${entity}`, HttpStatus.FORBIDDEN);\n  }\n}\n\nexport const HandleErr = (\n  err: InvalidId | DeletedEntity | HttpException | Error,\n) => {\n  if (err instanceof InvalidId || err instanceof DeletedEntity) {\n    throw new HttpException(err.message, HttpStatus.BAD_REQUEST);\n  }\n\n  if (err instanceof EntityNotFound) {\n    throw new HttpException(err.message, HttpStatus.NOT_FOUND);\n  }\n\n  if (err instanceof HttpException) {\n    throw err;\n  }\n  throw new HttpException(err.message, HttpStatus.INTERNAL_SERVER_ERROR);\n};\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/EntityType.html":{"url":"interfaces/EntityType.html","title":"interface - EntityType","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  EntityType\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            models/entityType.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            DeletedAt\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        DeletedAt\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        DeletedAt:         Date\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Date\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface EntityType {\n  DeletedAt?: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/FinishAuctionInput.html":{"url":"interfaces/FinishAuctionInput.html","title":"interface - FinishAuctionInput","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  FinishAuctionInput\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/shared/clients/clients.service.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            bid\n                                        \n                                \n                                \n                                        \n                                            tokenId\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        bid\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        bid:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        tokenId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        tokenId:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { ThirdwebSDK } from '@thirdweb-dev/sdk';\nimport { Sepolia } from '@thirdweb-dev/chains';\nimport { MetaMaskInpageProvider } from '@metamask/providers';\nimport { BigNumber } from 'ethers';\nimport { eth, Receipt, utils } from 'web3';\n\ndeclare global {\n  interface Window {\n    ethereum?: MetaMaskInpageProvider;\n  }\n}\n\ninterface FinishAuctionInput {\n  tokenId: string;\n  bid: string;\n}\n\n@Injectable()\n/** Client used to call the smart contract in the Sepolia test network */\nexport class Client {\n  /** Internal method that creates the bidder signature of the transaction */\n  private async _getBidderSign(inputs: FinishAuctionInput, privateKey: string) {\n    const hashMessage = utils.sha3(\n      utils.encodePacked(\n        { value: process.env.ERC721_CONTRACT, type: 'address' },\n        { value: process.env.ERC20_CONTRACT, type: 'address' },\n        { value: inputs.tokenId, type: 'uint256' },\n        { value: inputs.bid, type: 'uint256' },\n      ),\n    );\n    const signedMsg = eth.accounts.sign(hashMessage, privateKey);\n    return signedMsg;\n  }\n  /** Internal method that creates the seller signature of the transaction */\n  private async _getSellerSign(bidderSignedMsg: string, privateKey: string) {\n    const hashMessage = utils.sha3(bidderSignedMsg);\n    const signedMsg = eth.accounts.sign(hashMessage, privateKey);\n    return signedMsg;\n  }\n  /** Internal method that calls a write method of a given contract with the given inputs */\n  private async _callContract(\n    privateKey: string,\n    input: Array,\n    contractAddr: string,\n    method: string,\n  ): Promise {\n    try {\n      const sdk = ThirdwebSDK.fromPrivateKey(privateKey, Sepolia, {\n        secretKey: process.env.CLIENT_KEY,\n      });\n      const contract = await sdk.getContract(contractAddr);\n      const ans = await contract.call(method, input);\n      return ans;\n    } catch (err) {\n      throw err;\n    }\n  }\n  /** Internal method that calls a read method of a given contract */\n  private async _readContract(\n    input: Array,\n    contractAddr: string,\n    method: string,\n  ): Promise {\n    const sdk = new ThirdwebSDK(Sepolia, { secretKey: process.env.CLIENT_KEY });\n    const contract = await sdk.getContract(contractAddr);\n    const ans = await contract.call(method, input);\n    return ans;\n  }\n  /** Calls the ownerOf method of the MockERC721 contract to know the owner of a nft*/\n  async ownerOf(tokenId: string): Promise {\n    const res = await this._readContract(\n      [tokenId],\n      process.env.ERC721_CONTRACT,\n      'ownerOf',\n    );\n    return res;\n  }\n  /** Calls the method of the MockERC721 contract to mint a nft or the MockERC20 contract to mint the `amount` tokens */\n  async mint(key: string, toAddress: string, amount?: string): Promise {\n    const addr = amount\n      ? process.env.ERC20_CONTRACT\n      : process.env.ERC721_CONTRACT;\n    const input = amount\n      ? [toAddress, utils.toWei(amount, 'ether')]\n      : [toAddress];\n    const res = await this._callContract(key, input, addr, 'mint');\n    return res;\n  }\n  /** Gets the amount of ERC20 tokens owned by a user */\n  async getTokens(userAddr: string): Promise {\n    const balance: BigNumber = await this._readContract(\n      [userAddr],\n      process.env.ERC20_CONTRACT,\n      'balanceOf',\n    );\n    return utils.fromWei(balance.toBigInt(), 'ether');\n  }\n  /** Gets the ids of the ERC721 nfts owned by a user */\n  async getNfts(userAddr: string): Promise {\n    const balance: BigNumber = await this._readContract(\n      [userAddr],\n      process.env.ERC721_CONTRACT,\n      'balanceOf',\n    );\n    const promises = Array.from(\n      { length: balance.toNumber() },\n      async (_, i) => {\n        const promise = await this._readContract(\n          [userAddr, i.toString()],\n          process.env.ERC721_CONTRACT,\n          'tokenOfOwnerByIndex',\n        );\n        console.log(promise);\n        return promise;\n      },\n    );\n    const allRes = Promise.all(promises);\n    return allRes;\n  }\n  /** Approves the `amount` of tokens to be transfered to the `toAddress` address */\n  async approveToken(key: string, toAddress: string, amount: string) {\n    const res = this._callContract(\n      key,\n      [toAddress, utils.toWei(amount, 'ether')],\n      process.env.ERC20_CONTRACT,\n      'approve',\n    );\n    return res;\n  }\n  /** Approves the transfer of a nft to the `toAddress` address */\n  async approveNft(key: string, toAddress: string, tokenId: string) {\n    const res = this._callContract(\n      key,\n      [toAddress, tokenId],\n      process.env.ERC721_CONTRACT,\n      'approve',\n    );\n    return res;\n  }\n  /** calls the finisAuction method of the Marketplace contract to execute the transaction of nft for tokens. */\n  async finishAuction(\n    bidderKey: string,\n    sellerKey: string,\n    input: FinishAuctionInput,\n  ) {\n    const bidderSignature = await this._getBidderSign(input, bidderKey);\n    const sellerSignature = await this._getSellerSign(\n      bidderSignature.signature,\n      sellerKey,\n    );\n    const inputArr = [\n      [\n        process.env.ERC721_CONTRACT,\n        process.env.ERC20_CONTRACT,\n        input.tokenId,\n        input.bid,\n      ],\n      bidderSignature.signature,\n      sellerSignature.signature,\n    ];\n    const res: Receipt = await this._callContract(\n      bidderKey,\n      inputArr,\n      process.env.FINISH_CONTRACT,\n      'finishAuction',\n    );\n    return res;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/InvalidId.html":{"url":"classes/InvalidId.html","title":"class - InvalidId","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  InvalidId\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/errors.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    Error\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/common/errors.ts:3\n                            \n                        \n\n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { HttpException, HttpStatus } from '@nestjs/common';\n\nexport class InvalidId extends Error {\n  constructor() {\n    super('Invalid Id');\n  }\n}\n\nexport class DeletedEntity extends Error {\n  constructor(entity: string) {\n    super(`The ${entity} is deleted`);\n  }\n}\n\nexport class EntityNotFound extends Error {\n  constructor(entity: string, id: number) {\n    super(`Could not find the ${entity} with id ${id}`);\n  }\n}\n\nexport class NotOwner extends HttpException {\n  constructor(entity: string) {\n    super(`You are not the owner of the ${entity}`, HttpStatus.FORBIDDEN);\n  }\n}\n\nexport const HandleErr = (\n  err: InvalidId | DeletedEntity | HttpException | Error,\n) => {\n  if (err instanceof InvalidId || err instanceof DeletedEntity) {\n    throw new HttpException(err.message, HttpStatus.BAD_REQUEST);\n  }\n\n  if (err instanceof EntityNotFound) {\n    throw new HttpException(err.message, HttpStatus.NOT_FOUND);\n  }\n\n  if (err instanceof HttpException) {\n    throw err;\n  }\n  throw new HttpException(err.message, HttpStatus.INTERNAL_SERVER_ERROR);\n};\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/NftsController.html":{"url":"controllers/NftsController.html","title":"controller - NftsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  NftsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/nfts/nfts.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                nfts\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                create\n                            \n                            \n                                    \n                                findAllNft\n                            \n                            \n                                    \n                                findAllToken\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(req: any, createTokenDto: CreateTokenDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n            \n                \n                    Defined in src/nfts/nfts.controller.ts:12\n                \n            \n\n\n            \n                \n                    POST /nfts By default create a mock nft calling the MockERC721 contract.\nIf the amount property is present in the request body, it will create a ERC20 mock token instead\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    createTokenDto\n                                    \n                                                CreateTokenDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        findAllNft\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllNft(req: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n            \n                \n                    Defined in src/nfts/nfts.controller.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        findAllToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllToken(req: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('tokens')\n                \n            \n\n            \n                \n                    Defined in src/nfts/nfts.controller.ts:23\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Post, Body, Req } from '@nestjs/common';\nimport { NftsService } from './nfts.service';\nimport { CreateTokenDto } from 'models/token.entity';\n\n@Controller('nfts')\nexport class NftsController {\n  constructor(private readonly nftsService: NftsService) {}\n  /** `POST /nfts` By default create a mock nft calling the MockERC721 contract.\n   * If the `amount` property is present in the request body, it will create a ERC20 mock token instead\n   */\n  @Post()\n  create(@Req() req: any, @Body() createTokenDto: CreateTokenDto) {\n    return this.nftsService.create(req.user.userId, createTokenDto.amount);\n  }\n  /* `GET /nfts` returns the list of nft ids (token id in the contract) in the MockERC721 contract owned by the user**/\n  @Get()\n  findAllNft(@Req() req: any) {\n    return this.nftsService.findAllNft(req.user.userId);\n  }\n\n  /* `GET /nfts/tokens` returns the amount of tokens defined in MockERC20 contract owned by the user**/\n  @Get('tokens')\n  findAllToken(@Req() req: any) {\n    console.log(req.user);\n    return this.nftsService.findAllToken(req.user.userId);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/NftsModule.html":{"url":"modules/NftsModule.html","title":"module - NftsModule","body":"\n                   \n\n\n\n\n    Modules\n    NftsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_NftsModule\n\n\n\ncluster_NftsModule_providers\n\n\n\n\nNftsService\n\nNftsService\n\n\n\nNftsModule\n\nNftsModule\n\nNftsModule -->\n\nNftsService->NftsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/nfts/nfts.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            NftsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            NftsController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { NftsService } from './nfts.service';\nimport { NftsController } from './nfts.controller';\n\n@Module({\n  controllers: [NftsController],\n  providers: [NftsService],\n})\nexport class NftsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/NftsService.html":{"url":"injectables/NftsService.html","title":"injectable - NftsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  NftsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/nfts/nfts.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findAllNft\n                            \n                            \n                                    Async\n                                findAllToken\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(client: Client, db: Db)\n                    \n                \n                        \n                            \n                                Defined in src/nfts/nfts.service.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        client\n                                                  \n                                                        \n                                                                        Client\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        db\n                                                  \n                                                        \n                                                                        Db\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(userId: number, amount?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/nfts/nfts.service.ts:12\n                \n            \n\n\n            \n                \n                    Creates a nft by default (MockERC721).\n If amount is present, its create a token (MockERC20)\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    amount\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllNft\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllNft(userId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/nfts/nfts.service.ts:26\n                \n            \n\n\n            \n                \n                    returns the ids of the nft (MockERC721) owned by the user\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllToken(userId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/nfts/nfts.service.ts:37\n                \n            \n\n\n            \n                \n                    returns the ids of tokens (MockERC20) owned by the user\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { HandleErr } from 'src/common/errors';\nimport { Client } from 'src/shared/clients/clients.service';\nimport { Db } from 'src/shared/db/db.service';\n\n@Injectable()\nexport class NftsService {\n  constructor(private client: Client, private db: Db) {}\n  /**  Creates a nft by default (MockERC721).\n   *  If amount is present, its create a token (MockERC20)\n   */\n  async create(userId: number, amount?: string) {\n    try {\n      const user = this.db.getUser(userId);\n      const response = await this.client.mint(\n        user.userKey,\n        user.userAddr,\n        amount,\n      );\n      return response;\n    } catch (err) {\n      HandleErr(err);\n    }\n  }\n  /** returns the ids of the nft (MockERC721) owned by the user */\n  async findAllNft(userId: number) {\n    try {\n      const usr = this.db.getUser(userId);\n      const res = await this.client.getNfts(usr.userAddr);\n      return res;\n    } catch (err) {\n      HandleErr(err);\n    }\n  }\n\n  /** returns the ids of tokens (MockERC20) owned by the user */\n  async findAllToken(userId: number) {\n    try {\n      const usr = this.db.getUser(userId);\n      const res = await this.client.getTokens(usr.userAddr);\n      return res;\n    } catch (err) {\n      HandleErr(err);\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/NotOwner.html":{"url":"classes/NotOwner.html","title":"class - NotOwner","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  NotOwner\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/errors.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    HttpException\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(entity: string)\n                    \n                \n                        \n                            \n                                Defined in src/common/errors.ts:21\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        entity\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { HttpException, HttpStatus } from '@nestjs/common';\n\nexport class InvalidId extends Error {\n  constructor() {\n    super('Invalid Id');\n  }\n}\n\nexport class DeletedEntity extends Error {\n  constructor(entity: string) {\n    super(`The ${entity} is deleted`);\n  }\n}\n\nexport class EntityNotFound extends Error {\n  constructor(entity: string, id: number) {\n    super(`Could not find the ${entity} with id ${id}`);\n  }\n}\n\nexport class NotOwner extends HttpException {\n  constructor(entity: string) {\n    super(`You are not the owner of the ${entity}`, HttpStatus.FORBIDDEN);\n  }\n}\n\nexport const HandleErr = (\n  err: InvalidId | DeletedEntity | HttpException | Error,\n) => {\n  if (err instanceof InvalidId || err instanceof DeletedEntity) {\n    throw new HttpException(err.message, HttpStatus.BAD_REQUEST);\n  }\n\n  if (err instanceof EntityNotFound) {\n    throw new HttpException(err.message, HttpStatus.NOT_FOUND);\n  }\n\n  if (err instanceof HttpException) {\n    throw err;\n  }\n  throw new HttpException(err.message, HttpStatus.INTERNAL_SERVER_ERROR);\n};\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SellOffer.html":{"url":"classes/SellOffer.html","title":"class - SellOffer","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SellOffer\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            models/sellOffer.entity.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        CreateSellOfferDto\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                auctionState\n                            \n                            \n                                createdAt\n                            \n                            \n                                currentBid\n                            \n                            \n                                    Optional\n                                DeletedAt\n                            \n                            \n                                finishAuctionTx\n                            \n                            \n                                highestBidder\n                            \n                            \n                                updatedAt\n                            \n                            \n                                userId\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                minOffer\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                price\n                            \n                            \n                                    \n                                    \n                                tokenId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(values: CreateSellOfferDto, userId: number)\n                    \n                \n                        \n                            \n                                Defined in models/sellOffer.entity.ts:34\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        values\n                                                  \n                                                        \n                                                                        CreateSellOfferDto\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userId\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        auctionState\n                        \n                    \n                \n            \n                \n                    \n                        Type :         AuctionState\n\n                    \n                \n                    \n                        \n                                Defined in models/sellOffer.entity.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                    \n                        \n                                Defined in models/sellOffer.entity.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        currentBid\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in models/sellOffer.entity.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        DeletedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                    \n                        \n                                Defined in models/sellOffer.entity.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        finishAuctionTx\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in models/sellOffer.entity.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        highestBidder\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in models/sellOffer.entity.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                    \n                        \n                                Defined in models/sellOffer.entity.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in models/sellOffer.entity.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        minOffer\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsPositive()@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         CreateSellOfferDto\n\n                            \n                        \n                    \n                        \n                                Defined in         CreateSellOfferDto:18\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        price\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsPositive()@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         CreateSellOfferDto\n\n                            \n                        \n                    \n                        \n                                Defined in         CreateSellOfferDto:15\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        tokenId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsInt()@Min(0)\n                        \n                    \n                \n                        \n                            \n                                Inherited from         CreateSellOfferDto\n\n                            \n                        \n                    \n                        \n                                Defined in         CreateSellOfferDto:12\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsInt, IsOptional, IsPositive, Min } from 'class-validator';\n\nexport enum AuctionState {\n  OnSale,\n  OnAuction,\n  Closed,\n}\n\nexport class CreateSellOfferDto {\n  @IsInt()\n  @Min(0)\n  tokenId: number;\n  @IsPositive()\n  @IsOptional()\n  price?: number;\n  @IsPositive()\n  @IsOptional()\n  minOffer?: number;\n}\n\nexport class UpdatePrice {\n  @IsPositive()\n  price: number;\n}\n\nexport class SellOffer extends CreateSellOfferDto {\n  userId: number;\n  currentBid: number;\n  auctionState: AuctionState;\n  finishAuctionTx: string;\n  highestBidder: number;\n  createdAt: Date;\n  updatedAt: Date;\n  DeletedAt?: Date;\n\n  constructor(values: CreateSellOfferDto, userId: number) {\n    super();\n    Object.assign(this, values);\n    this.auctionState = values.price\n      ? AuctionState.OnSale\n      : AuctionState.OnAuction;\n    this.currentBid = this.minOffer || 0;\n    this.userId = userId;\n    this.createdAt = new Date();\n    this.updatedAt = new Date();\n  }\n}\n\nexport class CloseDto {\n  @Min(0)\n  sellOfferId: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/SellOffersController.html":{"url":"controllers/SellOffersController.html","title":"controller - SellOffersController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  SellOffersController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/sellOffers/sellOffer.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                sellOffers\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                cancel\n                            \n                            \n                                    \n                                close\n                            \n                            \n                                    \n                                create\n                            \n                            \n                                    \n                                findAll\n                            \n                            \n                                    \n                                findOne\n                            \n                            \n                                    \n                                remove\n                            \n                            \n                                    \n                                updatePrice\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        cancel\n                        \n                    \n                \n            \n            \n                \n                    \n                    cancel(req: any, closeDto: CloseDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('cancel')\n                \n            \n\n            \n                \n                    Defined in src/sellOffers/sellOffer.controller.ts:76\n                \n            \n\n\n            \n                \n                    POST /cancel Cancels a non closed sellOffer\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    closeDto\n                                    \n                                                CloseDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        close\n                        \n                    \n                \n            \n            \n                \n                    \n                    close(req: any, closeDto: CloseDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('close')\n                \n            \n\n            \n                \n                    Defined in src/sellOffers/sellOffer.controller.ts:66\n                \n            \n\n\n            \n                \n                    POST /sellOffers/close Closes an auction.\nThe highest bidder adjudicates the nft at the current bid amount\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    closeDto\n                                    \n                                                CloseDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(req: any, createSellOfferDto: CreateSellOfferDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n            \n                \n                    Defined in src/sellOffers/sellOffer.controller.ts:25\n                \n            \n\n\n            \n                \n                    POST /sellOffers creates an auction or a sale offer.\nIf it is a sale offer, the price must be present.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    createSellOfferDto\n                                    \n                                                CreateSellOfferDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n            \n                \n                    Defined in src/sellOffers/sellOffer.controller.ts:34\n                \n            \n\n\n            \n                \n                    GET /sellOffers fetch all non deleted sell offers\n\n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        findOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')\n                \n            \n\n            \n                \n                    Defined in src/sellOffers/sellOffer.controller.ts:39\n                \n            \n\n\n            \n                \n                    GET /sellOffers fetch a single sellOffer\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        remove\n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(id: string, req: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')\n                \n            \n\n            \n                \n                    Defined in src/sellOffers/sellOffer.controller.ts:59\n                \n            \n\n\n            \n                \n                    DELETE /sellOffers Removes a non closed sellOffer\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    req\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        updatePrice\n                        \n                    \n                \n            \n            \n                \n                    \n                    updatePrice(id: string, updateSellOfferDto: UpdatePrice, req: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch('price/:id')\n                \n            \n\n            \n                \n                    Defined in src/sellOffers/sellOffer.controller.ts:46\n                \n            \n\n\n            \n                \n                    PATCH /sellOffers change the price of a sell offer.\n Fails if is an auction or the offer is closed\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateSellOfferDto\n                                    \n                                                UpdatePrice\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    req\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Post,\n  Body,\n  Patch,\n  Param,\n  Delete,\n  Req,\n} from '@nestjs/common';\nimport { SellOffersService } from './sellOffer.service';\nimport {\n  CloseDto,\n  CreateSellOfferDto,\n  UpdatePrice,\n} from 'models/sellOffer.entity';\n\n@Controller('sellOffers')\nexport class SellOffersController {\n  constructor(private readonly sellOffersService: SellOffersService) {}\n  /** `POST /sellOffers` creates an auction or a sale offer.\n   * If it is a sale offer, the price must be present.\n   * */\n  @Post()\n  create(@Req() req: any, @Body() createSellOfferDto: CreateSellOfferDto) {\n    try {\n      return this.sellOffersService.create(req.user.userId, createSellOfferDto);\n    } catch (err) {\n      throw err;\n    }\n  }\n  /** `GET /sellOffers` fetch all non deleted sell offers */\n  @Get()\n  findAll() {\n    return this.sellOffersService.findAll();\n  }\n  /** `GET /sellOffers` fetch a single sellOffer */\n  @Get(':id')\n  findOne(@Param('id') id: string) {\n    return this.sellOffersService.findOne(+id);\n  }\n  /** `PATCH /sellOffers` change the price of a sell offer.\n   *  Fails if is an auction or the offer is closed\n   */\n  @Patch('price/:id')\n  updatePrice(\n    @Param('id') id: string,\n    @Body() updateSellOfferDto: UpdatePrice,\n    @Req() req: any,\n  ) {\n    return this.sellOffersService.updatePrice(\n      req.user.userId,\n      +id,\n      updateSellOfferDto,\n    );\n  }\n  /** `DELETE /sellOffers` Removes a non closed sellOffer */\n  @Delete(':id')\n  remove(@Param('id') id: string, @Req() req: any) {\n    return this.sellOffersService.remove(req.user.userId, +id);\n  }\n  /** `POST /sellOffers/close` Closes an auction.\n   * The highest bidder adjudicates the nft at the current bid amount\n   */\n  @Post('close')\n  close(@Req() req: any, @Body() closeDto: CloseDto) {\n    try {\n      const user = parseInt(req.user.userId);\n      return this.sellOffersService.close(user, closeDto.sellOfferId);\n    } catch (err) {\n      throw err;\n    }\n  }\n  /** `POST /cancel` Cancels a non closed sellOffer */\n  @Post('cancel')\n  cancel(@Req() req: any, @Body() closeDto: CloseDto) {\n    try {\n      const user = parseInt(req.user.userId);\n      return this.sellOffersService.cancel(user, closeDto.sellOfferId);\n    } catch (err) {\n      throw err;\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/SellOffersModule.html":{"url":"modules/SellOffersModule.html","title":"module - SellOffersModule","body":"\n                   \n\n\n\n\n    Modules\n    SellOffersModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_SellOffersModule\n\n\n\ncluster_SellOffersModule_providers\n\n\n\ncluster_SellOffersModule_imports\n\n\n\n\nDbModule\n\nDbModule\n\n\n\nSellOffersModule\n\nSellOffersModule\n\nSellOffersModule -->\n\nDbModule->SellOffersModule\n\n\n\n\n\nSellOffersService\n\nSellOffersService\n\nSellOffersModule -->\n\nSellOffersService->SellOffersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/sellOffers/sellOffer.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            SellOffersService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            SellOffersController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            DbModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { SellOffersService } from './sellOffer.service';\nimport { SellOffersController } from './sellOffer.controller';\nimport { DbModule } from 'src/shared/db/db.module';\n\n@Module({\n  imports: [DbModule],\n  controllers: [SellOffersController],\n  providers: [SellOffersService],\n})\nexport class SellOffersModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/SellOffersService.html":{"url":"injectables/SellOffersService.html","title":"injectable - SellOffersService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  SellOffersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/sellOffers/sellOffer.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                cancel\n                            \n                            \n                                    Async\n                                close\n                            \n                            \n                                    Async\n                                create\n                            \n                            \n                                findAll\n                            \n                            \n                                findByUserId\n                            \n                            \n                                findOne\n                            \n                            \n                                remove\n                            \n                            \n                                updatePrice\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(client: Client, db: Db)\n                    \n                \n                        \n                            \n                                Defined in src/sellOffers/sellOffer.service.ts:14\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        client\n                                                  \n                                                        \n                                                                        Client\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        db\n                                                  \n                                                        \n                                                                        Db\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        cancel\n                        \n                    \n                \n            \n            \n                \ncancel(userId: number, offerId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/sellOffers/sellOffer.service.ts:110\n                \n            \n\n\n            \n                \n                    cancels a non closed offer\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    offerId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        close\n                        \n                    \n                \n            \n            \n                \n                    \n                    close(userId: number, offerId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/sellOffers/sellOffer.service.ts:89\n                \n            \n\n\n            \n                \n                    finish an auction\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    offerId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(userId: number, createSellOfferDto: CreateSellOfferDto)\n                \n            \n\n\n            \n                \n                    Defined in src/sellOffers/sellOffer.service.ts:17\n                \n            \n\n\n            \n                \n                    Creates a sellOffer. if price is present, asumes is a sale offer. Otherwise asumes is an auction\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    createSellOfferDto\n                                    \n                                                CreateSellOfferDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAll\n                        \n                    \n                \n            \n            \n                \nfindAll()\n                \n            \n\n\n            \n                \n                    Defined in src/sellOffers/sellOffer.service.ts:37\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findByUserId\n                        \n                    \n                \n            \n            \n                \nfindByUserId(userId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/sellOffers/sellOffer.service.ts:43\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findOne\n                        \n                    \n                \n            \n            \n                \nfindOne(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/sellOffers/sellOffer.service.ts:49\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        remove\n                        \n                    \n                \n            \n            \n                \nremove(userId: number, id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/sellOffers/sellOffer.service.ts:76\n                \n            \n\n\n            \n                \n                    removes a non closed offer\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updatePrice\n                        \n                    \n                \n            \n            \n                \nupdatePrice(userId: number, id: number, updateSellOfferDto: UpdatePrice)\n                \n            \n\n\n            \n                \n                    Defined in src/sellOffers/sellOffer.service.ts:57\n                \n            \n\n\n            \n                \n                    updates the price of an open sale offer\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateSellOfferDto\n                                    \n                                                UpdatePrice\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { HttpException, HttpStatus, Injectable } from '@nestjs/common';\nimport {\n  SellOffer,\n  CreateSellOfferDto,\n  AuctionState,\n  UpdatePrice,\n} from 'models/sellOffer.entity';\nimport { Db } from 'src/shared/db/db.service';\nimport { Client } from 'src/shared/clients/clients.service';\nimport { finishAuction } from 'src/common/tools/tools';\nimport { HandleErr, NotOwner } from 'src/common/errors';\n\n@Injectable()\nexport class SellOffersService {\n  constructor(private client: Client, private db: Db) {}\n  /** Creates a sellOffer. if price is present, asumes is a sale offer. Otherwise asumes is an auction */\n  async create(\n    userId: number,\n    createSellOfferDto: CreateSellOfferDto,\n  ): Promise {\n    try {\n      const ownerOfToken = await this.client.ownerOf(\n        createSellOfferDto.tokenId.toString(),\n      );\n      const user = this.db.getUser(userId);\n      if (ownerOfToken !== user.userAddr) {\n        throw new NotOwner('nft');\n      }\n      const newSellOffer: SellOffer = new SellOffer(createSellOfferDto, userId);\n      this.db.sellOffers.push(newSellOffer);\n      return this.db.lastSellIndex();\n    } catch (err) {\n      HandleErr(err);\n    }\n  }\n\n  findAll() {\n    return this.db.sellOffers.filter((sellOffer) => {\n      return !sellOffer.DeletedAt;\n    });\n  }\n\n  findByUserId(userId: number) {\n    return this.db.sellOffers.filter((sellOffer) => {\n      return sellOffer.userId === userId;\n    });\n  }\n\n  findOne(id: number) {\n    try {\n      return this.db.getSellOffer(id);\n    } catch (err) {\n      HandleErr(err);\n    }\n  }\n  /** updates the price of an open sale offer */\n  updatePrice(userId: number, id: number, updateSellOfferDto: UpdatePrice) {\n    try {\n      const sellOffer = this.db.getSellOffer(id);\n      if (sellOffer.userId !== userId) {\n        throw new NotOwner('sell offer');\n      }\n      if (sellOffer.auctionState !== AuctionState.OnSale) {\n        throw new HttpException(\n          'The offer can not be updated',\n          HttpStatus.CONFLICT,\n        );\n      }\n      sellOffer.price = updateSellOfferDto.price;\n      return sellOffer;\n    } catch (err) {\n      HandleErr(err);\n    }\n  }\n  /** removes a non closed offer */\n  remove(userId: number, id: number) {\n    try {\n      const sellOffer = this.db.getSellOffer(id);\n      if (sellOffer.userId !== userId) {\n        throw new NotOwner('sell offer');\n      }\n      sellOffer.DeletedAt = new Date();\n      return sellOffer;\n    } catch (err) {\n      HandleErr(err);\n    }\n  }\n  /** finish an auction */\n  async close(userId: number, offerId: number) {\n    try {\n      const offer = this.db.getSellOffer(offerId);\n      if (offer.auctionState !== AuctionState.OnAuction) {\n        throw new HttpException(\n          'The offer can not be closed now',\n          HttpStatus.CONFLICT,\n        );\n      }\n      if (offer.userId !== userId) {\n        throw new NotOwner('sell offer');\n      }\n      const seller = this.db.getUser(userId);\n      const bidder = this.db.getUser(offer.highestBidder);\n      const res = await finishAuction(seller, bidder, offer, this.client);\n      return res;\n    } catch (err) {\n      HandleErr(err);\n    }\n  }\n  /** cancels a non closed offer*/\n  cancel(userId: number, offerId: number) {\n    try {\n      const offer = this.db.getSellOffer(offerId);\n      if (offer.userId !== userId) {\n        throw new NotOwner('sell offer');\n      }\n      offer.auctionState = AuctionState.Closed;\n      return 'success';\n    } catch (err) {\n      HandleErr(err);\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdatePrice.html":{"url":"classes/UpdatePrice.html","title":"class - UpdatePrice","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdatePrice\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            models/sellOffer.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                price\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        price\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsPositive()\n                        \n                    \n                \n                    \n                        \n                                Defined in models/sellOffer.entity.ts:23\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsInt, IsOptional, IsPositive, Min } from 'class-validator';\n\nexport enum AuctionState {\n  OnSale,\n  OnAuction,\n  Closed,\n}\n\nexport class CreateSellOfferDto {\n  @IsInt()\n  @Min(0)\n  tokenId: number;\n  @IsPositive()\n  @IsOptional()\n  price?: number;\n  @IsPositive()\n  @IsOptional()\n  minOffer?: number;\n}\n\nexport class UpdatePrice {\n  @IsPositive()\n  price: number;\n}\n\nexport class SellOffer extends CreateSellOfferDto {\n  userId: number;\n  currentBid: number;\n  auctionState: AuctionState;\n  finishAuctionTx: string;\n  highestBidder: number;\n  createdAt: Date;\n  updatedAt: Date;\n  DeletedAt?: Date;\n\n  constructor(values: CreateSellOfferDto, userId: number) {\n    super();\n    Object.assign(this, values);\n    this.auctionState = values.price\n      ? AuctionState.OnSale\n      : AuctionState.OnAuction;\n    this.currentBid = this.minOffer || 0;\n    this.userId = userId;\n    this.createdAt = new Date();\n    this.updatedAt = new Date();\n  }\n}\n\nexport class CloseDto {\n  @Min(0)\n  sellOfferId: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/User.html":{"url":"classes/User.html","title":"class - User","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            models/users.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                createdAt\n                            \n                            \n                                    Optional\n                                DeletedAt\n                            \n                            \n                                password\n                            \n                            \n                                updatedAt\n                            \n                            \n                                userAddr\n                            \n                            \n                                userKey\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(values: CreateUserDto)\n                    \n                \n                        \n                            \n                                Defined in models/users.entity.ts:26\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        values\n                                                  \n                                                        \n                                                                        CreateUserDto\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                    \n                        \n                                Defined in models/users.entity.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        DeletedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                    \n                        \n                                Defined in models/users.entity.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in models/users.entity.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                    \n                        \n                                Defined in models/users.entity.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        userAddr\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in models/users.entity.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        userKey\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in models/users.entity.ts:21\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Min, IsString, IsInt } from 'class-validator';\nimport { ethers } from 'ethers';\nimport { utils } from 'web3';\n\nexport class UserAuth {\n  @IsInt()\n  @Min(0)\n  userId: number;\n  @IsString()\n  password: string;\n}\n\nexport class CreateUserDto {\n  @IsString()\n  entropy: string;\n  @IsString()\n  password: string;\n}\n\nexport class User {\n  userKey: string;\n  password: string;\n  userAddr: string;\n  createdAt: Date;\n  updatedAt: Date;\n  DeletedAt?: Date;\n\n  constructor(values: CreateUserDto) {\n    const key = utils.sha3(values.entropy);\n    const wallet = new ethers.Wallet(key);\n    this.userKey = key;\n    this.userAddr = wallet.address;\n    Object.assign(this, values);\n    this.createdAt = new Date();\n    this.updatedAt = new Date();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserAuth.html":{"url":"classes/UserAuth.html","title":"class - UserAuth","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserAuth\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            models/users.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                password\n                            \n                            \n                                    \n                                    \n                                userId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in models/users.entity.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsInt()@Min(0)\n                        \n                    \n                \n                    \n                        \n                                Defined in models/users.entity.ts:8\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Min, IsString, IsInt } from 'class-validator';\nimport { ethers } from 'ethers';\nimport { utils } from 'web3';\n\nexport class UserAuth {\n  @IsInt()\n  @Min(0)\n  userId: number;\n  @IsString()\n  password: string;\n}\n\nexport class CreateUserDto {\n  @IsString()\n  entropy: string;\n  @IsString()\n  password: string;\n}\n\nexport class User {\n  userKey: string;\n  password: string;\n  userAddr: string;\n  createdAt: Date;\n  updatedAt: Date;\n  DeletedAt?: Date;\n\n  constructor(values: CreateUserDto) {\n    const key = utils.sha3(values.entropy);\n    const wallet = new ethers.Wallet(key);\n    this.userKey = key;\n    this.userAddr = wallet.address;\n    Object.assign(this, values);\n    this.createdAt = new Date();\n    this.updatedAt = new Date();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UserController.html":{"url":"controllers/UserController.html","title":"controller - UserController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UserController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                user\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                create\n                            \n                            \n                                    \n                                findAll\n                            \n                            \n                                    \n                                findOne\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(createUserDto: CreateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Public()@Post()\n                \n            \n\n            \n                \n                    Defined in src/user/user.controller.ts:11\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createUserDto\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n            \n                \n                    Defined in src/user/user.controller.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        findOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')\n                \n            \n\n            \n                \n                    Defined in src/user/user.controller.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Post, Body, Param } from '@nestjs/common';\nimport { UserService } from './user.service';\nimport { CreateUserDto } from 'models/users.entity';\nimport { Public } from 'src/auth/auth.guard';\n\n@Controller('user')\nexport class UserController {\n  constructor(private readonly userService: UserService) {}\n  @Public()\n  @Post()\n  create(@Body() createUserDto: CreateUserDto) {\n    return this.userService.create(createUserDto);\n  }\n\n  @Get()\n  findAll() {\n    return this.userService.findAll();\n  }\n\n  @Get(':id')\n  findOne(@Param('id') id: string) {\n    return this.userService.findOne(+id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UserModule.html":{"url":"modules/UserModule.html","title":"module - UserModule","body":"\n                   \n\n\n\n\n    Modules\n    UserModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UserModule\n\n\n\ncluster_UserModule_providers\n\n\n\n\nUserService\n\nUserService\n\n\n\nUserModule\n\nUserModule\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/user/user.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UserService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UserController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { UserService } from './user.service';\nimport { UserController } from './user.controller';\n\n@Module({\n  controllers: [UserController],\n  providers: [UserService],\n})\nexport class UserModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserService.html":{"url":"injectables/UserService.html","title":"injectable - UserService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UserService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                create\n                            \n                            \n                                findAll\n                            \n                            \n                                findOne\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(db: Db)\n                    \n                \n                        \n                            \n                                Defined in src/user/user.service.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        db\n                                                  \n                                                        \n                                                                        Db\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        create\n                        \n                    \n                \n            \n            \n                \ncreate(createUserDto: CreateUserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:9\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createUserDto\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAll\n                        \n                    \n                \n            \n            \n                \nfindAll()\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findOne\n                        \n                    \n                \n            \n            \n                \nfindOne(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:28\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { CreateUserDto, User } from 'models/users.entity';\nimport { Db } from 'src/shared/db/db.service';\nimport * as sha256 from 'crypto-js/sha256';\n\n@Injectable()\nexport class UserService {\n  constructor(private db: Db) {}\n  create(createUserDto: CreateUserDto): number {\n    const newUser: User = new User(createUserDto);\n    newUser.password = sha256(createUserDto.password).toString();\n    this.db.users.push(newUser);\n    console.log(process.env.JWT_SECRET);\n    return this.db.lastUserIndex();\n  }\n\n  findAll() {\n    const users = this.db.users.filter((user) => {\n      return user.DeletedAt !== null;\n    });\n    return users.map((usr) => {\n      /* eslint-disable  @typescript-eslint/no-unused-vars */\n      const { password, userKey, ...usrInfo } = usr;\n      return usrInfo;\n    });\n  }\n\n  findOne(id: number) {\n    try {\n      return this.db.getUser(id);\n    } catch (err) {\n      throw err;\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Window.html":{"url":"interfaces/Window.html","title":"interface - Window","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Window\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/shared/clients/clients.service.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            ethereum\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        ethereum\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        ethereum:     MetaMaskInpageProvider\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     MetaMaskInpageProvider\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { ThirdwebSDK } from '@thirdweb-dev/sdk';\nimport { Sepolia } from '@thirdweb-dev/chains';\nimport { MetaMaskInpageProvider } from '@metamask/providers';\nimport { BigNumber } from 'ethers';\nimport { eth, Receipt, utils } from 'web3';\n\ndeclare global {\n  interface Window {\n    ethereum?: MetaMaskInpageProvider;\n  }\n}\n\ninterface FinishAuctionInput {\n  tokenId: string;\n  bid: string;\n}\n\n@Injectable()\n/** Client used to call the smart contract in the Sepolia test network */\nexport class Client {\n  /** Internal method that creates the bidder signature of the transaction */\n  private async _getBidderSign(inputs: FinishAuctionInput, privateKey: string) {\n    const hashMessage = utils.sha3(\n      utils.encodePacked(\n        { value: process.env.ERC721_CONTRACT, type: 'address' },\n        { value: process.env.ERC20_CONTRACT, type: 'address' },\n        { value: inputs.tokenId, type: 'uint256' },\n        { value: inputs.bid, type: 'uint256' },\n      ),\n    );\n    const signedMsg = eth.accounts.sign(hashMessage, privateKey);\n    return signedMsg;\n  }\n  /** Internal method that creates the seller signature of the transaction */\n  private async _getSellerSign(bidderSignedMsg: string, privateKey: string) {\n    const hashMessage = utils.sha3(bidderSignedMsg);\n    const signedMsg = eth.accounts.sign(hashMessage, privateKey);\n    return signedMsg;\n  }\n  /** Internal method that calls a write method of a given contract with the given inputs */\n  private async _callContract(\n    privateKey: string,\n    input: Array,\n    contractAddr: string,\n    method: string,\n  ): Promise {\n    try {\n      const sdk = ThirdwebSDK.fromPrivateKey(privateKey, Sepolia, {\n        secretKey: process.env.CLIENT_KEY,\n      });\n      const contract = await sdk.getContract(contractAddr);\n      const ans = await contract.call(method, input);\n      return ans;\n    } catch (err) {\n      throw err;\n    }\n  }\n  /** Internal method that calls a read method of a given contract */\n  private async _readContract(\n    input: Array,\n    contractAddr: string,\n    method: string,\n  ): Promise {\n    const sdk = new ThirdwebSDK(Sepolia, { secretKey: process.env.CLIENT_KEY });\n    const contract = await sdk.getContract(contractAddr);\n    const ans = await contract.call(method, input);\n    return ans;\n  }\n  /** Calls the ownerOf method of the MockERC721 contract to know the owner of a nft*/\n  async ownerOf(tokenId: string): Promise {\n    const res = await this._readContract(\n      [tokenId],\n      process.env.ERC721_CONTRACT,\n      'ownerOf',\n    );\n    return res;\n  }\n  /** Calls the method of the MockERC721 contract to mint a nft or the MockERC20 contract to mint the `amount` tokens */\n  async mint(key: string, toAddress: string, amount?: string): Promise {\n    const addr = amount\n      ? process.env.ERC20_CONTRACT\n      : process.env.ERC721_CONTRACT;\n    const input = amount\n      ? [toAddress, utils.toWei(amount, 'ether')]\n      : [toAddress];\n    const res = await this._callContract(key, input, addr, 'mint');\n    return res;\n  }\n  /** Gets the amount of ERC20 tokens owned by a user */\n  async getTokens(userAddr: string): Promise {\n    const balance: BigNumber = await this._readContract(\n      [userAddr],\n      process.env.ERC20_CONTRACT,\n      'balanceOf',\n    );\n    return utils.fromWei(balance.toBigInt(), 'ether');\n  }\n  /** Gets the ids of the ERC721 nfts owned by a user */\n  async getNfts(userAddr: string): Promise {\n    const balance: BigNumber = await this._readContract(\n      [userAddr],\n      process.env.ERC721_CONTRACT,\n      'balanceOf',\n    );\n    const promises = Array.from(\n      { length: balance.toNumber() },\n      async (_, i) => {\n        const promise = await this._readContract(\n          [userAddr, i.toString()],\n          process.env.ERC721_CONTRACT,\n          'tokenOfOwnerByIndex',\n        );\n        console.log(promise);\n        return promise;\n      },\n    );\n    const allRes = Promise.all(promises);\n    return allRes;\n  }\n  /** Approves the `amount` of tokens to be transfered to the `toAddress` address */\n  async approveToken(key: string, toAddress: string, amount: string) {\n    const res = this._callContract(\n      key,\n      [toAddress, utils.toWei(amount, 'ether')],\n      process.env.ERC20_CONTRACT,\n      'approve',\n    );\n    return res;\n  }\n  /** Approves the transfer of a nft to the `toAddress` address */\n  async approveNft(key: string, toAddress: string, tokenId: string) {\n    const res = this._callContract(\n      key,\n      [toAddress, tokenId],\n      process.env.ERC721_CONTRACT,\n      'approve',\n    );\n    return res;\n  }\n  /** calls the finisAuction method of the Marketplace contract to execute the transaction of nft for tokens. */\n  async finishAuction(\n    bidderKey: string,\n    sellerKey: string,\n    input: FinishAuctionInput,\n  ) {\n    const bidderSignature = await this._getBidderSign(input, bidderKey);\n    const sellerSignature = await this._getSellerSign(\n      bidderSignature.signature,\n      sellerKey,\n    );\n    const inputArr = [\n      [\n        process.env.ERC721_CONTRACT,\n        process.env.ERC20_CONTRACT,\n        input.tokenId,\n        input.bid,\n      ],\n      bidderSignature.signature,\n      sellerSignature.signature,\n    ];\n    const res: Receipt = await this._callContract(\n      bidderKey,\n      inputArr,\n      process.env.FINISH_CONTRACT,\n      'finishAuction',\n    );\n    return res;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                models/bids.entity.ts\n            \n            class\n            Bid\n            \n                62 %\n                (5/8)\n            \n        \n        \n            \n                \n                models/bids.entity.ts\n            \n            class\n            CreateBidDto\n            \n                33 %\n                (1/3)\n            \n        \n        \n            \n                \n                models/entityType.interface.ts\n            \n            interface\n            EntityType\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                models/sellOffer.entity.ts\n            \n            class\n            CloseDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                models/sellOffer.entity.ts\n            \n            class\n            CreateSellOfferDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                models/sellOffer.entity.ts\n            \n            class\n            SellOffer\n            \n                0 %\n                (0/13)\n            \n        \n        \n            \n                \n                models/sellOffer.entity.ts\n            \n            class\n            UpdatePrice\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                models/token.entity.ts\n            \n            class\n            CreateTokenDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                models/users.entity.ts\n            \n            class\n            CreateUserDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                models/users.entity.ts\n            \n            class\n            User\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                models/users.entity.ts\n            \n            class\n            UserAuth\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/auth.guard.ts\n            \n            guard\n            AuthGuard\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/auth/auth.guard.ts\n            \n            variable\n            IS_PUBLIC_KEY\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/auth.guard.ts\n            \n            variable\n            Public\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                33 %\n                (1/3)\n            \n        \n        \n            \n                \n                src/bids/bids.controller.ts\n            \n            controller\n            BidsController\n            \n                83 %\n                (5/6)\n            \n        \n        \n            \n                \n                src/bids/bids.service.ts\n            \n            injectable\n            BidsService\n            \n                66 %\n                (4/6)\n            \n        \n        \n            \n                \n                src/common/errors.ts\n            \n            class\n            DeletedEntity\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/common/errors.ts\n            \n            class\n            EntityNotFound\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/common/errors.ts\n            \n            class\n            InvalidId\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/common/errors.ts\n            \n            class\n            NotOwner\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/common/errors.ts\n            \n            variable\n            HandleErr\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/common/tools/tools.ts\n            \n            variable\n            finishAuction\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/nfts/nfts.controller.ts\n            \n            controller\n            NftsController\n            \n                25 %\n                (1/4)\n            \n        \n        \n            \n                \n                src/nfts/nfts.service.ts\n            \n            injectable\n            NftsService\n            \n                60 %\n                (3/5)\n            \n        \n        \n            \n                \n                src/sellOffers/sellOffer.controller.ts\n            \n            controller\n            SellOffersController\n            \n                87 %\n                (7/8)\n            \n        \n        \n            \n                \n                src/sellOffers/sellOffer.service.ts\n            \n            injectable\n            SellOffersService\n            \n                50 %\n                (5/10)\n            \n        \n        \n            \n                \n                src/shared/clients/clients.service.ts\n            \n            injectable\n            Client\n            \n                91 %\n                (11/12)\n            \n        \n        \n            \n                \n                src/shared/clients/clients.service.ts\n            \n            interface\n            FinishAuctionInput\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/shared/clients/clients.service.ts\n            \n            interface\n            Window\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/shared/db/db.service.ts\n            \n            injectable\n            Db\n            \n                7 %\n                (1/13)\n            \n        \n        \n            \n                \n                src/user/user.controller.ts\n            \n            controller\n            UserController\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/user/user.service.ts\n            \n            injectable\n            UserService\n            \n                0 %\n                (0/5)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @metamask/providers : ^11.1.0\n        \n            @nestjs/common : ^10.0.0\n        \n            @nestjs/config : ^3.0.0\n        \n            @nestjs/core : ^10.0.0\n        \n            @nestjs/jwt : ^10.1.0\n        \n            @nestjs/mapped-types : *\n        \n            @nestjs/platform-express : ^10.0.0\n        \n            @thirdweb-dev/sdk : ^3.10.40\n        \n            @types/crypto-js : ^4.1.1\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.14.0\n        \n            crypto-js : ^4.1.1\n        \n            dotenv : ^16.3.1\n        \n            ethers : ^5.7.2\n        \n            reflect-metadata : ^0.1.13\n        \n            rxjs : ^7.8.1\n        \n            web3 : ^4.0.3\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            AuctionState   (models/.../sellOffer.entity.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    models/sellOffer.entity.ts\n    \n        \n            \n                \n                    \n                        \n                        AuctionState\n                    \n                \n                        \n                            \n                                 OnSale\n                            \n                        \n                        \n                            \n                                 OnAuction\n                            \n                        \n                        \n                            \n                                 Closed\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications.\n    \n\n\n\n\n\n\n\n\n  \n    \n  \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nInstallation\n$ npm installRunning the app\n# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodTest\n# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:covSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nAuthor - Kamil Myśliwiec\nWebsite - https://nestjs.com\nTwitter - @nestframework\n\nLicense\nNest is MIT licensed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        BidsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ClientsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        DbModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        NftsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        SellOffersModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UserModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_BidsModule\n\n\n\ncluster_BidsModule_providers\n\n\n\ncluster_ClientsModule\n\n\n\ncluster_ClientsModule_exports\n\n\n\ncluster_ClientsModule_providers\n\n\n\ncluster_DbModule\n\n\n\ncluster_DbModule_exports\n\n\n\ncluster_DbModule_providers\n\n\n\ncluster_NftsModule\n\n\n\ncluster_NftsModule_providers\n\n\n\ncluster_SellOffersModule\n\n\n\ncluster_SellOffersModule_providers\n\n\n\ncluster_UserModule\n\n\n\ncluster_UserModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nBidsModule\n\nBidsModule\n\nAppModule -->\n\nBidsModule->AppModule\n\n\n\n\n\nClientsModule\n\nClientsModule\n\nBidsModule -->\n\nClientsModule->BidsModule\n\n\n\nAppModule -->\n\nClientsModule->AppModule\n\n\n\n\n\nClient \n\nClient \n\nClient  -->\n\nClientsModule->Client \n\n\n\n\n\nDbModule\n\nDbModule\n\nBidsModule -->\n\nDbModule->BidsModule\n\n\n\n\n\nSellOffersModule\n\nSellOffersModule\n\nSellOffersModule -->\n\nDbModule->SellOffersModule\n\n\n\nAppModule -->\n\nDbModule->AppModule\n\n\n\n\n\nDb \n\nDb \n\nDb  -->\n\nDbModule->Db \n\n\n\n\n\nNftsModule\n\nNftsModule\n\nAppModule -->\n\nNftsModule->AppModule\n\n\n\nAppModule -->\n\nSellOffersModule->AppModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nBidsService\n\nBidsService\n\nBidsModule -->\n\nBidsService->BidsModule\n\n\n\n\n\nClient\n\nClient\n\nClientsModule -->\n\nClient->ClientsModule\n\n\n\n\n\nDb\n\nDb\n\nDbModule -->\n\nDb->DbModule\n\n\n\n\n\nNftsService\n\nNftsService\n\nNftsModule -->\n\nNftsService->NftsModule\n\n\n\n\n\nSellOffersService\n\nSellOffersService\n\nSellOffersModule -->\n\nSellOffersService->SellOffersModule\n\n\n\n\n\nUserService\n\nUserService\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        8 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    5 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    7 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    14 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    1 Guard\n                \n            \n        \n        \n            \n                \n                    \n                    3 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            finishAuction   (src/.../tools.ts)\n                        \n                        \n                            HandleErr   (src/.../errors.ts)\n                        \n                        \n                            IS_PUBLIC_KEY   (src/.../auth.guard.ts)\n                        \n                        \n                            Public   (src/.../auth.guard.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/common/tools/tools.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        finishAuction\n                        \n                    \n                \n            \n                \n                    \n                        Default value : async (\n  seller: User,\n  bidder: User,\n  offer: SellOffer,\n  client: Client,\n) => {\n  const bid =\n    offer.auctionState === AuctionState.OnSale ? offer.price : offer.currentBid;\n  const weiBid = utils.toWei(bid.toString(), 'ether');\n  const buyInput = {\n    tokenId: offer.tokenId.toString(),\n    bid: weiBid,\n  };\n\n  const approveToken = client.approveToken(\n    bidder.userKey,\n    process.env.FINISH_CONTRACT,\n    buyInput.bid,\n  );\n  const approveNft = client.approveNft(\n    seller.userKey,\n    process.env.FINISH_CONTRACT,\n    buyInput.tokenId,\n  );\n  await Promise.all([approveToken, approveNft]);\n  const ans = await client.finishAuction(\n    bidder.userKey,\n    seller.userKey,\n    buyInput,\n  );\n  if (ans['transactionHash']) {\n    offer.finishAuctionTx = String(ans['transactionHash']);\n  }\n  offer.auctionState = AuctionState.Closed;\n}\n                    \n                \n\n            \n                \n                    Helper that ends a sell offer.\nIt will approves the tokens and nft to be transfered.\nThen it will execute the finish auction method in the marketplace contract to transfer the tokens to the seller and the nft to the bidder.\n\n                \n            \n\n        \n    \n\n    src/common/errors.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        HandleErr\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (\n  err: InvalidId | DeletedEntity | HttpException | Error,\n) => {\n  if (err instanceof InvalidId || err instanceof DeletedEntity) {\n    throw new HttpException(err.message, HttpStatus.BAD_REQUEST);\n  }\n\n  if (err instanceof EntityNotFound) {\n    throw new HttpException(err.message, HttpStatus.NOT_FOUND);\n  }\n\n  if (err instanceof HttpException) {\n    throw err;\n  }\n  throw new HttpException(err.message, HttpStatus.INTERNAL_SERVER_ERROR);\n}\n                    \n                \n\n\n        \n    \n\n    src/auth/auth.guard.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        IS_PUBLIC_KEY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'isPublic'\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        \n                    \n                \n            \n                \n                    \n                        Default value : () => SetMetadata(IS_PUBLIC_KEY, true)\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
